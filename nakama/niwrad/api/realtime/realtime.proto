syntax = "proto3";

package nakama.niwrad.api.realtime;

option csharp_namespace = "Api.Realtime";
option go_package = "nakama/niwrad/api/realtime;realtime";
import "github.com/louis030195/protometry/api/vector3/vector3.proto";
import "github.com/louis030195/protometry/api/quaternion/quaternion.proto";
import "github.com/louis030195/protometry/api/volume/volume.proto";

// TODO: kind of ugly to use same struct for client -> server and server -> client ?
message Packet {
    // TODO: prob will have to switch to a box instead of vector3 later (want to notify before arrival ...)
    protometry.vector3.Vector3 impact = 4; // Whom for ? Does xXxD4rkK1ll3rxXx care about the message 1 km away ?
    oneof type {
        // Events
        MatchJoin match_join = 7; 
        // Map map = 8;

        // General physical objects
        UpdateTransform update_transform = 10;
        NavMeshUpdate nav_mesh_update = 11;

        // Evolution
        Spawn spawn = 15;
        Spawn request_spawn = 16;
        Destroy destroy = 17;
        Destroy request_destroy = 18;
        Meme meme = 19;
        
        // Player
        Initialized initialized = 25;
    }
}

message MatchJoin{
    protometry.volume.Box region = 1;
    int64 seed = 2;
}

// message Map {
//     // Offsets of the chunk of map data
//     int64 x_base = 1;
//     int64 y_base = 2;
//     Matrix map = 3;
// }
// message Matrix {
//     repeated Array rows = 1;
// }
// message Array {
//     repeated double cols = 1 [packed=true];
// }

// General purpose transform update typically shared by several different types of objects
message UpdateTransform {
    Transform transform = 1;
}

message NavMeshUpdate {
    uint64 id = 1;
    protometry.vector3.Vector3 destination = 2;
}


message Spawn {
    oneof type {
        Transform any = 1; // Any object, no special behaviour
        Tree tree = 2;
        Animal animal = 3;
        // TODO: other ?
    }
}

message Destroy {
    oneof type {
        Transform any = 1; // Any object, no special behaviour
        Tree tree = 2;
        Animal animal = 3;
        // TODO: other ?
    }
}

message Meme {
    uint64 id = 1;
    string meme_name = 2; // Not really efficient but ok
}

// Client notifying being ready to handle gameplay
message Initialized {
}

message Transform { // TODO: is it worthwhile to add like "owner_id" ... ?
    uint64 id = 1;
    protometry.vector3.Vector3 position = 2;
    protometry.quaternion.Quaternion rotation = 3;
}

message Tree {
    Transform transform = 1;
    // TODO: other stats
}
message Animal {
    Transform transform = 1;
    // TODO: other stats
}

// Ask a logic server to transfer ownership of an object
message RequestTransferOwnership {
    Transform transform = 1;
}

// doubt its a good idea
// message CharacteristicsBounds {
//     map<string, float> bounds = 1;
// }

// Real time characteristics of a living being
message Characteristics {
    float computation = 1; // E.g. more = more decisions, less delay, more reactive ...
    float life = 2; // 0 = dead, highly related to energy
    float robustness = 3; // ? Resistance, anti fragility ?
    float energy = 4; // Current energy
    float reproduction_cost = 5; // Cost in energy
    float energy_loss = 6; // Cost in energy
    float eat_energy_gain = 7; // TODO: do plants eat ? fed from sun ?
    float drink_energy_gain = 8; // TODO: lot of hard coded stuff can we do better ?


    oneof type {
        AnimalCharacteristics animal_characteristics = 15;
        VegetationCharacteristics vegetation_characteristics = 16;
    }
    message AnimalCharacteristics {
        float speed = 1;
        float random_movement_range = 2; // these are very hard coded chars ?
        float sight_range = 3;
        float eat_range = 4;
        float metabolism = 5;
    }
    message VegetationCharacteristics {
    
    }
}


message Experience {
    string name = 1;
    Characteristics animal_characteristics = 10;
    Characteristics animal_characteristics_minimum_bound = 11; // E.g. for example speed is bounded between 0 and 100 to keep balance
    Characteristics animal_characteristics_maximum_bound = 12;
    PopulationDistribution animal_distribution = 13;
    bool include_carnivorous = 14;

    Characteristics vegetation_characteristics = 40;
    Characteristics vegetation_characteristics_minimum_bound = 41;
    Characteristics vegetation_characteristics_maximum_bound = 42;
    PopulationDistribution vegetation_distribution = 43;

    Map map = 50;
    GeneralParameters general = 60;
    // How should we spawn individuals, tons grouped on a specific point or very scattered ... ?
    message PopulationDistribution {
        uint64 initial_amount = 1;
        float scattering = 2; // How close individuals are from each other at spawn
        // ...
    }

    // Initial proc gen traits
    message Map {
        double size = 1;
        double height = 2;
        double spread = 5;
        double spread_reduction_rate = 7;

        bool water = 8;
        uint64 diversity = 10; // linear scale: desert, mountains ...
    }

    message GeneralParameters {
        uint32 timescale = 1;
        uint32 time_limit = 2; // Stop experience after x time
        bool repeat = 3; // Repeat experience ?
        bool save_statistics = 4; // [Regularly] save characteristics statistics ?
    }
}
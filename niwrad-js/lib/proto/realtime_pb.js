/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var github_com_louis030195_protometry_api_vector3_vector3_pb = require('./github.com/louis030195/protometry/api/vector3/vector3_pb.js');
goog.object.extend(proto, github_com_louis030195_protometry_api_vector3_vector3_pb);
var github_com_louis030195_protometry_api_quaternion_quaternion_pb = require('./github.com/louis030195/protometry/api/quaternion/quaternion_pb.js');
goog.object.extend(proto, github_com_louis030195_protometry_api_quaternion_quaternion_pb);
var github_com_louis030195_protometry_api_volume_volume_pb = require('./github.com/louis030195/protometry/api/volume/volume_pb.js');
goog.object.extend(proto, github_com_louis030195_protometry_api_volume_volume_pb);
goog.exportSymbol('proto.nakama.niwrad.api.realtime.Animal', null, global);
goog.exportSymbol('proto.nakama.niwrad.api.realtime.Array', null, global);
goog.exportSymbol('proto.nakama.niwrad.api.realtime.Destroy', null, global);
goog.exportSymbol('proto.nakama.niwrad.api.realtime.Initialized', null, global);
goog.exportSymbol('proto.nakama.niwrad.api.realtime.Map', null, global);
goog.exportSymbol('proto.nakama.niwrad.api.realtime.MatchJoin', null, global);
goog.exportSymbol('proto.nakama.niwrad.api.realtime.Matrix', null, global);
goog.exportSymbol('proto.nakama.niwrad.api.realtime.Meme', null, global);
goog.exportSymbol('proto.nakama.niwrad.api.realtime.NavMeshUpdate', null, global);
goog.exportSymbol('proto.nakama.niwrad.api.realtime.Packet', null, global);
goog.exportSymbol('proto.nakama.niwrad.api.realtime.RequestTransferOwnership', null, global);
goog.exportSymbol('proto.nakama.niwrad.api.realtime.Spawn', null, global);
goog.exportSymbol('proto.nakama.niwrad.api.realtime.Transform', null, global);
goog.exportSymbol('proto.nakama.niwrad.api.realtime.Tree', null, global);
goog.exportSymbol('proto.nakama.niwrad.api.realtime.UpdateTransform', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nakama.niwrad.api.realtime.Packet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nakama.niwrad.api.realtime.Packet.oneofGroups_);
};
goog.inherits(proto.nakama.niwrad.api.realtime.Packet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nakama.niwrad.api.realtime.Packet.displayName = 'proto.nakama.niwrad.api.realtime.Packet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nakama.niwrad.api.realtime.MatchJoin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nakama.niwrad.api.realtime.MatchJoin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nakama.niwrad.api.realtime.MatchJoin.displayName = 'proto.nakama.niwrad.api.realtime.MatchJoin';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nakama.niwrad.api.realtime.Map = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nakama.niwrad.api.realtime.Map, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nakama.niwrad.api.realtime.Map.displayName = 'proto.nakama.niwrad.api.realtime.Map';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nakama.niwrad.api.realtime.Matrix = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nakama.niwrad.api.realtime.Matrix.repeatedFields_, null);
};
goog.inherits(proto.nakama.niwrad.api.realtime.Matrix, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nakama.niwrad.api.realtime.Matrix.displayName = 'proto.nakama.niwrad.api.realtime.Matrix';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nakama.niwrad.api.realtime.Array = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nakama.niwrad.api.realtime.Array.repeatedFields_, null);
};
goog.inherits(proto.nakama.niwrad.api.realtime.Array, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nakama.niwrad.api.realtime.Array.displayName = 'proto.nakama.niwrad.api.realtime.Array';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nakama.niwrad.api.realtime.UpdateTransform = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nakama.niwrad.api.realtime.UpdateTransform, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nakama.niwrad.api.realtime.UpdateTransform.displayName = 'proto.nakama.niwrad.api.realtime.UpdateTransform';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nakama.niwrad.api.realtime.NavMeshUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nakama.niwrad.api.realtime.NavMeshUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nakama.niwrad.api.realtime.NavMeshUpdate.displayName = 'proto.nakama.niwrad.api.realtime.NavMeshUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nakama.niwrad.api.realtime.Spawn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nakama.niwrad.api.realtime.Spawn.oneofGroups_);
};
goog.inherits(proto.nakama.niwrad.api.realtime.Spawn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nakama.niwrad.api.realtime.Spawn.displayName = 'proto.nakama.niwrad.api.realtime.Spawn';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nakama.niwrad.api.realtime.Destroy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nakama.niwrad.api.realtime.Destroy.oneofGroups_);
};
goog.inherits(proto.nakama.niwrad.api.realtime.Destroy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nakama.niwrad.api.realtime.Destroy.displayName = 'proto.nakama.niwrad.api.realtime.Destroy';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nakama.niwrad.api.realtime.Meme = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nakama.niwrad.api.realtime.Meme, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nakama.niwrad.api.realtime.Meme.displayName = 'proto.nakama.niwrad.api.realtime.Meme';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nakama.niwrad.api.realtime.Initialized = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nakama.niwrad.api.realtime.Initialized, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nakama.niwrad.api.realtime.Initialized.displayName = 'proto.nakama.niwrad.api.realtime.Initialized';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nakama.niwrad.api.realtime.Transform = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nakama.niwrad.api.realtime.Transform, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nakama.niwrad.api.realtime.Transform.displayName = 'proto.nakama.niwrad.api.realtime.Transform';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nakama.niwrad.api.realtime.Tree = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nakama.niwrad.api.realtime.Tree, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nakama.niwrad.api.realtime.Tree.displayName = 'proto.nakama.niwrad.api.realtime.Tree';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nakama.niwrad.api.realtime.Animal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nakama.niwrad.api.realtime.Animal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nakama.niwrad.api.realtime.Animal.displayName = 'proto.nakama.niwrad.api.realtime.Animal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nakama.niwrad.api.realtime.RequestTransferOwnership = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nakama.niwrad.api.realtime.RequestTransferOwnership, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nakama.niwrad.api.realtime.RequestTransferOwnership.displayName = 'proto.nakama.niwrad.api.realtime.RequestTransferOwnership';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nakama.niwrad.api.realtime.Packet.oneofGroups_ = [[7,8,10,11,15,16,17,18,19,25]];

/**
 * @enum {number}
 */
proto.nakama.niwrad.api.realtime.Packet.TypeCase = {
  TYPE_NOT_SET: 0,
  MATCH_JOIN: 7,
  MAP: 8,
  UPDATE_TRANSFORM: 10,
  NAV_MESH_UPDATE: 11,
  SPAWN: 15,
  REQUEST_SPAWN: 16,
  DESTROY: 17,
  REQUEST_DESTROY: 18,
  MEME: 19,
  INITIALIZED: 25
};

/**
 * @return {proto.nakama.niwrad.api.realtime.Packet.TypeCase}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.getTypeCase = function() {
  return /** @type {proto.nakama.niwrad.api.realtime.Packet.TypeCase} */(jspb.Message.computeOneofCase(this, proto.nakama.niwrad.api.realtime.Packet.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.toObject = function(opt_includeInstance) {
  return proto.nakama.niwrad.api.realtime.Packet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nakama.niwrad.api.realtime.Packet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Packet.toObject = function(includeInstance, msg) {
  var f, obj = {
    impact: (f = msg.getImpact()) && github_com_louis030195_protometry_api_vector3_vector3_pb.Vector3.toObject(includeInstance, f),
    matchJoin: (f = msg.getMatchJoin()) && proto.nakama.niwrad.api.realtime.MatchJoin.toObject(includeInstance, f),
    map: (f = msg.getMap()) && proto.nakama.niwrad.api.realtime.Map.toObject(includeInstance, f),
    updateTransform: (f = msg.getUpdateTransform()) && proto.nakama.niwrad.api.realtime.UpdateTransform.toObject(includeInstance, f),
    navMeshUpdate: (f = msg.getNavMeshUpdate()) && proto.nakama.niwrad.api.realtime.NavMeshUpdate.toObject(includeInstance, f),
    spawn: (f = msg.getSpawn()) && proto.nakama.niwrad.api.realtime.Spawn.toObject(includeInstance, f),
    requestSpawn: (f = msg.getRequestSpawn()) && proto.nakama.niwrad.api.realtime.Spawn.toObject(includeInstance, f),
    destroy: (f = msg.getDestroy()) && proto.nakama.niwrad.api.realtime.Destroy.toObject(includeInstance, f),
    requestDestroy: (f = msg.getRequestDestroy()) && proto.nakama.niwrad.api.realtime.Destroy.toObject(includeInstance, f),
    meme: (f = msg.getMeme()) && proto.nakama.niwrad.api.realtime.Meme.toObject(includeInstance, f),
    initialized: (f = msg.getInitialized()) && proto.nakama.niwrad.api.realtime.Initialized.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nakama.niwrad.api.realtime.Packet}
 */
proto.nakama.niwrad.api.realtime.Packet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nakama.niwrad.api.realtime.Packet;
  return proto.nakama.niwrad.api.realtime.Packet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nakama.niwrad.api.realtime.Packet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nakama.niwrad.api.realtime.Packet}
 */
proto.nakama.niwrad.api.realtime.Packet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 4:
      var value = new github_com_louis030195_protometry_api_vector3_vector3_pb.Vector3;
      reader.readMessage(value,github_com_louis030195_protometry_api_vector3_vector3_pb.Vector3.deserializeBinaryFromReader);
      msg.setImpact(value);
      break;
    case 7:
      var value = new proto.nakama.niwrad.api.realtime.MatchJoin;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.MatchJoin.deserializeBinaryFromReader);
      msg.setMatchJoin(value);
      break;
    case 8:
      var value = new proto.nakama.niwrad.api.realtime.Map;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Map.deserializeBinaryFromReader);
      msg.setMap(value);
      break;
    case 10:
      var value = new proto.nakama.niwrad.api.realtime.UpdateTransform;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.UpdateTransform.deserializeBinaryFromReader);
      msg.setUpdateTransform(value);
      break;
    case 11:
      var value = new proto.nakama.niwrad.api.realtime.NavMeshUpdate;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.NavMeshUpdate.deserializeBinaryFromReader);
      msg.setNavMeshUpdate(value);
      break;
    case 15:
      var value = new proto.nakama.niwrad.api.realtime.Spawn;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Spawn.deserializeBinaryFromReader);
      msg.setSpawn(value);
      break;
    case 16:
      var value = new proto.nakama.niwrad.api.realtime.Spawn;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Spawn.deserializeBinaryFromReader);
      msg.setRequestSpawn(value);
      break;
    case 17:
      var value = new proto.nakama.niwrad.api.realtime.Destroy;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Destroy.deserializeBinaryFromReader);
      msg.setDestroy(value);
      break;
    case 18:
      var value = new proto.nakama.niwrad.api.realtime.Destroy;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Destroy.deserializeBinaryFromReader);
      msg.setRequestDestroy(value);
      break;
    case 19:
      var value = new proto.nakama.niwrad.api.realtime.Meme;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Meme.deserializeBinaryFromReader);
      msg.setMeme(value);
      break;
    case 25:
      var value = new proto.nakama.niwrad.api.realtime.Initialized;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Initialized.deserializeBinaryFromReader);
      msg.setInitialized(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nakama.niwrad.api.realtime.Packet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nakama.niwrad.api.realtime.Packet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Packet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getImpact();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      github_com_louis030195_protometry_api_vector3_vector3_pb.Vector3.serializeBinaryToWriter
    );
  }
  f = message.getMatchJoin();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.nakama.niwrad.api.realtime.MatchJoin.serializeBinaryToWriter
    );
  }
  f = message.getMap();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.nakama.niwrad.api.realtime.Map.serializeBinaryToWriter
    );
  }
  f = message.getUpdateTransform();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.nakama.niwrad.api.realtime.UpdateTransform.serializeBinaryToWriter
    );
  }
  f = message.getNavMeshUpdate();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.nakama.niwrad.api.realtime.NavMeshUpdate.serializeBinaryToWriter
    );
  }
  f = message.getSpawn();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.nakama.niwrad.api.realtime.Spawn.serializeBinaryToWriter
    );
  }
  f = message.getRequestSpawn();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.nakama.niwrad.api.realtime.Spawn.serializeBinaryToWriter
    );
  }
  f = message.getDestroy();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.nakama.niwrad.api.realtime.Destroy.serializeBinaryToWriter
    );
  }
  f = message.getRequestDestroy();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.nakama.niwrad.api.realtime.Destroy.serializeBinaryToWriter
    );
  }
  f = message.getMeme();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.nakama.niwrad.api.realtime.Meme.serializeBinaryToWriter
    );
  }
  f = message.getInitialized();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      proto.nakama.niwrad.api.realtime.Initialized.serializeBinaryToWriter
    );
  }
};


/**
 * optional protometry.vector3.Vector3 impact = 4;
 * @return {?proto.protometry.vector3.Vector3}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.getImpact = function() {
  return /** @type{?proto.protometry.vector3.Vector3} */ (
    jspb.Message.getWrapperField(this, github_com_louis030195_protometry_api_vector3_vector3_pb.Vector3, 4));
};


/** @param {?proto.protometry.vector3.Vector3|undefined} value */
proto.nakama.niwrad.api.realtime.Packet.prototype.setImpact = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.clearImpact = function() {
  this.setImpact(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.hasImpact = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional MatchJoin match_join = 7;
 * @return {?proto.nakama.niwrad.api.realtime.MatchJoin}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.getMatchJoin = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.MatchJoin} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.MatchJoin, 7));
};


/** @param {?proto.nakama.niwrad.api.realtime.MatchJoin|undefined} value */
proto.nakama.niwrad.api.realtime.Packet.prototype.setMatchJoin = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.nakama.niwrad.api.realtime.Packet.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.clearMatchJoin = function() {
  this.setMatchJoin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.hasMatchJoin = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Map map = 8;
 * @return {?proto.nakama.niwrad.api.realtime.Map}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.getMap = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Map} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Map, 8));
};


/** @param {?proto.nakama.niwrad.api.realtime.Map|undefined} value */
proto.nakama.niwrad.api.realtime.Packet.prototype.setMap = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.nakama.niwrad.api.realtime.Packet.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.clearMap = function() {
  this.setMap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.hasMap = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional UpdateTransform update_transform = 10;
 * @return {?proto.nakama.niwrad.api.realtime.UpdateTransform}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.getUpdateTransform = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.UpdateTransform} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.UpdateTransform, 10));
};


/** @param {?proto.nakama.niwrad.api.realtime.UpdateTransform|undefined} value */
proto.nakama.niwrad.api.realtime.Packet.prototype.setUpdateTransform = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.nakama.niwrad.api.realtime.Packet.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.clearUpdateTransform = function() {
  this.setUpdateTransform(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.hasUpdateTransform = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional NavMeshUpdate nav_mesh_update = 11;
 * @return {?proto.nakama.niwrad.api.realtime.NavMeshUpdate}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.getNavMeshUpdate = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.NavMeshUpdate} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.NavMeshUpdate, 11));
};


/** @param {?proto.nakama.niwrad.api.realtime.NavMeshUpdate|undefined} value */
proto.nakama.niwrad.api.realtime.Packet.prototype.setNavMeshUpdate = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.nakama.niwrad.api.realtime.Packet.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.clearNavMeshUpdate = function() {
  this.setNavMeshUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.hasNavMeshUpdate = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Spawn spawn = 15;
 * @return {?proto.nakama.niwrad.api.realtime.Spawn}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.getSpawn = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Spawn} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Spawn, 15));
};


/** @param {?proto.nakama.niwrad.api.realtime.Spawn|undefined} value */
proto.nakama.niwrad.api.realtime.Packet.prototype.setSpawn = function(value) {
  jspb.Message.setOneofWrapperField(this, 15, proto.nakama.niwrad.api.realtime.Packet.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.clearSpawn = function() {
  this.setSpawn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.hasSpawn = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional Spawn request_spawn = 16;
 * @return {?proto.nakama.niwrad.api.realtime.Spawn}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.getRequestSpawn = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Spawn} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Spawn, 16));
};


/** @param {?proto.nakama.niwrad.api.realtime.Spawn|undefined} value */
proto.nakama.niwrad.api.realtime.Packet.prototype.setRequestSpawn = function(value) {
  jspb.Message.setOneofWrapperField(this, 16, proto.nakama.niwrad.api.realtime.Packet.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.clearRequestSpawn = function() {
  this.setRequestSpawn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.hasRequestSpawn = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional Destroy destroy = 17;
 * @return {?proto.nakama.niwrad.api.realtime.Destroy}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.getDestroy = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Destroy} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Destroy, 17));
};


/** @param {?proto.nakama.niwrad.api.realtime.Destroy|undefined} value */
proto.nakama.niwrad.api.realtime.Packet.prototype.setDestroy = function(value) {
  jspb.Message.setOneofWrapperField(this, 17, proto.nakama.niwrad.api.realtime.Packet.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.clearDestroy = function() {
  this.setDestroy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.hasDestroy = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional Destroy request_destroy = 18;
 * @return {?proto.nakama.niwrad.api.realtime.Destroy}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.getRequestDestroy = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Destroy} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Destroy, 18));
};


/** @param {?proto.nakama.niwrad.api.realtime.Destroy|undefined} value */
proto.nakama.niwrad.api.realtime.Packet.prototype.setRequestDestroy = function(value) {
  jspb.Message.setOneofWrapperField(this, 18, proto.nakama.niwrad.api.realtime.Packet.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.clearRequestDestroy = function() {
  this.setRequestDestroy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.hasRequestDestroy = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional Meme meme = 19;
 * @return {?proto.nakama.niwrad.api.realtime.Meme}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.getMeme = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Meme} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Meme, 19));
};


/** @param {?proto.nakama.niwrad.api.realtime.Meme|undefined} value */
proto.nakama.niwrad.api.realtime.Packet.prototype.setMeme = function(value) {
  jspb.Message.setOneofWrapperField(this, 19, proto.nakama.niwrad.api.realtime.Packet.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.clearMeme = function() {
  this.setMeme(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.hasMeme = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional Initialized initialized = 25;
 * @return {?proto.nakama.niwrad.api.realtime.Initialized}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.getInitialized = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Initialized} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Initialized, 25));
};


/** @param {?proto.nakama.niwrad.api.realtime.Initialized|undefined} value */
proto.nakama.niwrad.api.realtime.Packet.prototype.setInitialized = function(value) {
  jspb.Message.setOneofWrapperField(this, 25, proto.nakama.niwrad.api.realtime.Packet.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.clearInitialized = function() {
  this.setInitialized(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.hasInitialized = function() {
  return jspb.Message.getField(this, 25) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nakama.niwrad.api.realtime.MatchJoin.prototype.toObject = function(opt_includeInstance) {
  return proto.nakama.niwrad.api.realtime.MatchJoin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nakama.niwrad.api.realtime.MatchJoin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.MatchJoin.toObject = function(includeInstance, msg) {
  var f, obj = {
    region: (f = msg.getRegion()) && github_com_louis030195_protometry_api_volume_volume_pb.Box.toObject(includeInstance, f),
    seed: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nakama.niwrad.api.realtime.MatchJoin}
 */
proto.nakama.niwrad.api.realtime.MatchJoin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nakama.niwrad.api.realtime.MatchJoin;
  return proto.nakama.niwrad.api.realtime.MatchJoin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nakama.niwrad.api.realtime.MatchJoin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nakama.niwrad.api.realtime.MatchJoin}
 */
proto.nakama.niwrad.api.realtime.MatchJoin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_louis030195_protometry_api_volume_volume_pb.Box;
      reader.readMessage(value,github_com_louis030195_protometry_api_volume_volume_pb.Box.deserializeBinaryFromReader);
      msg.setRegion(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nakama.niwrad.api.realtime.MatchJoin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nakama.niwrad.api.realtime.MatchJoin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nakama.niwrad.api.realtime.MatchJoin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.MatchJoin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRegion();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_louis030195_protometry_api_volume_volume_pb.Box.serializeBinaryToWriter
    );
  }
  f = message.getSeed();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional protometry.volume.Box region = 1;
 * @return {?proto.protometry.volume.Box}
 */
proto.nakama.niwrad.api.realtime.MatchJoin.prototype.getRegion = function() {
  return /** @type{?proto.protometry.volume.Box} */ (
    jspb.Message.getWrapperField(this, github_com_louis030195_protometry_api_volume_volume_pb.Box, 1));
};


/** @param {?proto.protometry.volume.Box|undefined} value */
proto.nakama.niwrad.api.realtime.MatchJoin.prototype.setRegion = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nakama.niwrad.api.realtime.MatchJoin.prototype.clearRegion = function() {
  this.setRegion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nakama.niwrad.api.realtime.MatchJoin.prototype.hasRegion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 seed = 2;
 * @return {number}
 */
proto.nakama.niwrad.api.realtime.MatchJoin.prototype.getSeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.nakama.niwrad.api.realtime.MatchJoin.prototype.setSeed = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nakama.niwrad.api.realtime.Map.prototype.toObject = function(opt_includeInstance) {
  return proto.nakama.niwrad.api.realtime.Map.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nakama.niwrad.api.realtime.Map} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Map.toObject = function(includeInstance, msg) {
  var f, obj = {
    xBase: jspb.Message.getFieldWithDefault(msg, 1, 0),
    yBase: jspb.Message.getFieldWithDefault(msg, 2, 0),
    map: (f = msg.getMap()) && proto.nakama.niwrad.api.realtime.Matrix.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nakama.niwrad.api.realtime.Map}
 */
proto.nakama.niwrad.api.realtime.Map.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nakama.niwrad.api.realtime.Map;
  return proto.nakama.niwrad.api.realtime.Map.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nakama.niwrad.api.realtime.Map} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nakama.niwrad.api.realtime.Map}
 */
proto.nakama.niwrad.api.realtime.Map.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setXBase(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setYBase(value);
      break;
    case 3:
      var value = new proto.nakama.niwrad.api.realtime.Matrix;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Matrix.deserializeBinaryFromReader);
      msg.setMap(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nakama.niwrad.api.realtime.Map.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nakama.niwrad.api.realtime.Map.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nakama.niwrad.api.realtime.Map} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Map.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getXBase();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getYBase();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getMap();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nakama.niwrad.api.realtime.Matrix.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 x_base = 1;
 * @return {number}
 */
proto.nakama.niwrad.api.realtime.Map.prototype.getXBase = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.nakama.niwrad.api.realtime.Map.prototype.setXBase = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 y_base = 2;
 * @return {number}
 */
proto.nakama.niwrad.api.realtime.Map.prototype.getYBase = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.nakama.niwrad.api.realtime.Map.prototype.setYBase = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Matrix map = 3;
 * @return {?proto.nakama.niwrad.api.realtime.Matrix}
 */
proto.nakama.niwrad.api.realtime.Map.prototype.getMap = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Matrix} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Matrix, 3));
};


/** @param {?proto.nakama.niwrad.api.realtime.Matrix|undefined} value */
proto.nakama.niwrad.api.realtime.Map.prototype.setMap = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nakama.niwrad.api.realtime.Map.prototype.clearMap = function() {
  this.setMap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nakama.niwrad.api.realtime.Map.prototype.hasMap = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nakama.niwrad.api.realtime.Matrix.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nakama.niwrad.api.realtime.Matrix.prototype.toObject = function(opt_includeInstance) {
  return proto.nakama.niwrad.api.realtime.Matrix.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nakama.niwrad.api.realtime.Matrix} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Matrix.toObject = function(includeInstance, msg) {
  var f, obj = {
    rowsList: jspb.Message.toObjectList(msg.getRowsList(),
    proto.nakama.niwrad.api.realtime.Array.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nakama.niwrad.api.realtime.Matrix}
 */
proto.nakama.niwrad.api.realtime.Matrix.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nakama.niwrad.api.realtime.Matrix;
  return proto.nakama.niwrad.api.realtime.Matrix.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nakama.niwrad.api.realtime.Matrix} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nakama.niwrad.api.realtime.Matrix}
 */
proto.nakama.niwrad.api.realtime.Matrix.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nakama.niwrad.api.realtime.Array;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Array.deserializeBinaryFromReader);
      msg.addRows(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nakama.niwrad.api.realtime.Matrix.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nakama.niwrad.api.realtime.Matrix.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nakama.niwrad.api.realtime.Matrix} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Matrix.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRowsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.nakama.niwrad.api.realtime.Array.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Array rows = 1;
 * @return {!Array<!proto.nakama.niwrad.api.realtime.Array>}
 */
proto.nakama.niwrad.api.realtime.Matrix.prototype.getRowsList = function() {
  return /** @type{!Array<!proto.nakama.niwrad.api.realtime.Array>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nakama.niwrad.api.realtime.Array, 1));
};


/** @param {!Array<!proto.nakama.niwrad.api.realtime.Array>} value */
proto.nakama.niwrad.api.realtime.Matrix.prototype.setRowsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.nakama.niwrad.api.realtime.Array=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nakama.niwrad.api.realtime.Array}
 */
proto.nakama.niwrad.api.realtime.Matrix.prototype.addRows = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.nakama.niwrad.api.realtime.Array, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.nakama.niwrad.api.realtime.Matrix.prototype.clearRowsList = function() {
  this.setRowsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nakama.niwrad.api.realtime.Array.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nakama.niwrad.api.realtime.Array.prototype.toObject = function(opt_includeInstance) {
  return proto.nakama.niwrad.api.realtime.Array.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nakama.niwrad.api.realtime.Array} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Array.toObject = function(includeInstance, msg) {
  var f, obj = {
    colsList: jspb.Message.getRepeatedFloatingPointField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nakama.niwrad.api.realtime.Array}
 */
proto.nakama.niwrad.api.realtime.Array.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nakama.niwrad.api.realtime.Array;
  return proto.nakama.niwrad.api.realtime.Array.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nakama.niwrad.api.realtime.Array} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nakama.niwrad.api.realtime.Array}
 */
proto.nakama.niwrad.api.realtime.Array.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
      msg.setColsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nakama.niwrad.api.realtime.Array.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nakama.niwrad.api.realtime.Array.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nakama.niwrad.api.realtime.Array} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Array.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColsList();
  if (f.length > 0) {
    writer.writePackedDouble(
      1,
      f
    );
  }
};


/**
 * repeated double cols = 1;
 * @return {!Array<number>}
 */
proto.nakama.niwrad.api.realtime.Array.prototype.getColsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/** @param {!Array<number>} value */
proto.nakama.niwrad.api.realtime.Array.prototype.setColsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.nakama.niwrad.api.realtime.Array.prototype.addCols = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.nakama.niwrad.api.realtime.Array.prototype.clearColsList = function() {
  this.setColsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nakama.niwrad.api.realtime.UpdateTransform.prototype.toObject = function(opt_includeInstance) {
  return proto.nakama.niwrad.api.realtime.UpdateTransform.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nakama.niwrad.api.realtime.UpdateTransform} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.UpdateTransform.toObject = function(includeInstance, msg) {
  var f, obj = {
    transform: (f = msg.getTransform()) && proto.nakama.niwrad.api.realtime.Transform.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nakama.niwrad.api.realtime.UpdateTransform}
 */
proto.nakama.niwrad.api.realtime.UpdateTransform.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nakama.niwrad.api.realtime.UpdateTransform;
  return proto.nakama.niwrad.api.realtime.UpdateTransform.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nakama.niwrad.api.realtime.UpdateTransform} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nakama.niwrad.api.realtime.UpdateTransform}
 */
proto.nakama.niwrad.api.realtime.UpdateTransform.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nakama.niwrad.api.realtime.Transform;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Transform.deserializeBinaryFromReader);
      msg.setTransform(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nakama.niwrad.api.realtime.UpdateTransform.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nakama.niwrad.api.realtime.UpdateTransform.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nakama.niwrad.api.realtime.UpdateTransform} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.UpdateTransform.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransform();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nakama.niwrad.api.realtime.Transform.serializeBinaryToWriter
    );
  }
};


/**
 * optional Transform transform = 1;
 * @return {?proto.nakama.niwrad.api.realtime.Transform}
 */
proto.nakama.niwrad.api.realtime.UpdateTransform.prototype.getTransform = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Transform} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Transform, 1));
};


/** @param {?proto.nakama.niwrad.api.realtime.Transform|undefined} value */
proto.nakama.niwrad.api.realtime.UpdateTransform.prototype.setTransform = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nakama.niwrad.api.realtime.UpdateTransform.prototype.clearTransform = function() {
  this.setTransform(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nakama.niwrad.api.realtime.UpdateTransform.prototype.hasTransform = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nakama.niwrad.api.realtime.NavMeshUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.nakama.niwrad.api.realtime.NavMeshUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nakama.niwrad.api.realtime.NavMeshUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.NavMeshUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    destination: (f = msg.getDestination()) && github_com_louis030195_protometry_api_vector3_vector3_pb.Vector3.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nakama.niwrad.api.realtime.NavMeshUpdate}
 */
proto.nakama.niwrad.api.realtime.NavMeshUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nakama.niwrad.api.realtime.NavMeshUpdate;
  return proto.nakama.niwrad.api.realtime.NavMeshUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nakama.niwrad.api.realtime.NavMeshUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nakama.niwrad.api.realtime.NavMeshUpdate}
 */
proto.nakama.niwrad.api.realtime.NavMeshUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = new github_com_louis030195_protometry_api_vector3_vector3_pb.Vector3;
      reader.readMessage(value,github_com_louis030195_protometry_api_vector3_vector3_pb.Vector3.deserializeBinaryFromReader);
      msg.setDestination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nakama.niwrad.api.realtime.NavMeshUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nakama.niwrad.api.realtime.NavMeshUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nakama.niwrad.api.realtime.NavMeshUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.NavMeshUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getDestination();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      github_com_louis030195_protometry_api_vector3_vector3_pb.Vector3.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.nakama.niwrad.api.realtime.NavMeshUpdate.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.nakama.niwrad.api.realtime.NavMeshUpdate.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional protometry.vector3.Vector3 destination = 2;
 * @return {?proto.protometry.vector3.Vector3}
 */
proto.nakama.niwrad.api.realtime.NavMeshUpdate.prototype.getDestination = function() {
  return /** @type{?proto.protometry.vector3.Vector3} */ (
    jspb.Message.getWrapperField(this, github_com_louis030195_protometry_api_vector3_vector3_pb.Vector3, 2));
};


/** @param {?proto.protometry.vector3.Vector3|undefined} value */
proto.nakama.niwrad.api.realtime.NavMeshUpdate.prototype.setDestination = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nakama.niwrad.api.realtime.NavMeshUpdate.prototype.clearDestination = function() {
  this.setDestination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nakama.niwrad.api.realtime.NavMeshUpdate.prototype.hasDestination = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nakama.niwrad.api.realtime.Spawn.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.nakama.niwrad.api.realtime.Spawn.TypeCase = {
  TYPE_NOT_SET: 0,
  ANY: 1,
  TREE: 2,
  ANIMAL: 3
};

/**
 * @return {proto.nakama.niwrad.api.realtime.Spawn.TypeCase}
 */
proto.nakama.niwrad.api.realtime.Spawn.prototype.getTypeCase = function() {
  return /** @type {proto.nakama.niwrad.api.realtime.Spawn.TypeCase} */(jspb.Message.computeOneofCase(this, proto.nakama.niwrad.api.realtime.Spawn.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nakama.niwrad.api.realtime.Spawn.prototype.toObject = function(opt_includeInstance) {
  return proto.nakama.niwrad.api.realtime.Spawn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nakama.niwrad.api.realtime.Spawn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Spawn.toObject = function(includeInstance, msg) {
  var f, obj = {
    any: (f = msg.getAny()) && proto.nakama.niwrad.api.realtime.Transform.toObject(includeInstance, f),
    tree: (f = msg.getTree()) && proto.nakama.niwrad.api.realtime.Tree.toObject(includeInstance, f),
    animal: (f = msg.getAnimal()) && proto.nakama.niwrad.api.realtime.Animal.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nakama.niwrad.api.realtime.Spawn}
 */
proto.nakama.niwrad.api.realtime.Spawn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nakama.niwrad.api.realtime.Spawn;
  return proto.nakama.niwrad.api.realtime.Spawn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nakama.niwrad.api.realtime.Spawn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nakama.niwrad.api.realtime.Spawn}
 */
proto.nakama.niwrad.api.realtime.Spawn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nakama.niwrad.api.realtime.Transform;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Transform.deserializeBinaryFromReader);
      msg.setAny(value);
      break;
    case 2:
      var value = new proto.nakama.niwrad.api.realtime.Tree;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Tree.deserializeBinaryFromReader);
      msg.setTree(value);
      break;
    case 3:
      var value = new proto.nakama.niwrad.api.realtime.Animal;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Animal.deserializeBinaryFromReader);
      msg.setAnimal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nakama.niwrad.api.realtime.Spawn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nakama.niwrad.api.realtime.Spawn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nakama.niwrad.api.realtime.Spawn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Spawn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAny();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nakama.niwrad.api.realtime.Transform.serializeBinaryToWriter
    );
  }
  f = message.getTree();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nakama.niwrad.api.realtime.Tree.serializeBinaryToWriter
    );
  }
  f = message.getAnimal();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nakama.niwrad.api.realtime.Animal.serializeBinaryToWriter
    );
  }
};


/**
 * optional Transform any = 1;
 * @return {?proto.nakama.niwrad.api.realtime.Transform}
 */
proto.nakama.niwrad.api.realtime.Spawn.prototype.getAny = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Transform} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Transform, 1));
};


/** @param {?proto.nakama.niwrad.api.realtime.Transform|undefined} value */
proto.nakama.niwrad.api.realtime.Spawn.prototype.setAny = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.nakama.niwrad.api.realtime.Spawn.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nakama.niwrad.api.realtime.Spawn.prototype.clearAny = function() {
  this.setAny(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nakama.niwrad.api.realtime.Spawn.prototype.hasAny = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Tree tree = 2;
 * @return {?proto.nakama.niwrad.api.realtime.Tree}
 */
proto.nakama.niwrad.api.realtime.Spawn.prototype.getTree = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Tree} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Tree, 2));
};


/** @param {?proto.nakama.niwrad.api.realtime.Tree|undefined} value */
proto.nakama.niwrad.api.realtime.Spawn.prototype.setTree = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.nakama.niwrad.api.realtime.Spawn.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nakama.niwrad.api.realtime.Spawn.prototype.clearTree = function() {
  this.setTree(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nakama.niwrad.api.realtime.Spawn.prototype.hasTree = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Animal animal = 3;
 * @return {?proto.nakama.niwrad.api.realtime.Animal}
 */
proto.nakama.niwrad.api.realtime.Spawn.prototype.getAnimal = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Animal} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Animal, 3));
};


/** @param {?proto.nakama.niwrad.api.realtime.Animal|undefined} value */
proto.nakama.niwrad.api.realtime.Spawn.prototype.setAnimal = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.nakama.niwrad.api.realtime.Spawn.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nakama.niwrad.api.realtime.Spawn.prototype.clearAnimal = function() {
  this.setAnimal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nakama.niwrad.api.realtime.Spawn.prototype.hasAnimal = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nakama.niwrad.api.realtime.Destroy.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.nakama.niwrad.api.realtime.Destroy.TypeCase = {
  TYPE_NOT_SET: 0,
  ANY: 1,
  TREE: 2,
  ANIMAL: 3
};

/**
 * @return {proto.nakama.niwrad.api.realtime.Destroy.TypeCase}
 */
proto.nakama.niwrad.api.realtime.Destroy.prototype.getTypeCase = function() {
  return /** @type {proto.nakama.niwrad.api.realtime.Destroy.TypeCase} */(jspb.Message.computeOneofCase(this, proto.nakama.niwrad.api.realtime.Destroy.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nakama.niwrad.api.realtime.Destroy.prototype.toObject = function(opt_includeInstance) {
  return proto.nakama.niwrad.api.realtime.Destroy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nakama.niwrad.api.realtime.Destroy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Destroy.toObject = function(includeInstance, msg) {
  var f, obj = {
    any: (f = msg.getAny()) && proto.nakama.niwrad.api.realtime.Transform.toObject(includeInstance, f),
    tree: (f = msg.getTree()) && proto.nakama.niwrad.api.realtime.Tree.toObject(includeInstance, f),
    animal: (f = msg.getAnimal()) && proto.nakama.niwrad.api.realtime.Animal.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nakama.niwrad.api.realtime.Destroy}
 */
proto.nakama.niwrad.api.realtime.Destroy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nakama.niwrad.api.realtime.Destroy;
  return proto.nakama.niwrad.api.realtime.Destroy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nakama.niwrad.api.realtime.Destroy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nakama.niwrad.api.realtime.Destroy}
 */
proto.nakama.niwrad.api.realtime.Destroy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nakama.niwrad.api.realtime.Transform;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Transform.deserializeBinaryFromReader);
      msg.setAny(value);
      break;
    case 2:
      var value = new proto.nakama.niwrad.api.realtime.Tree;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Tree.deserializeBinaryFromReader);
      msg.setTree(value);
      break;
    case 3:
      var value = new proto.nakama.niwrad.api.realtime.Animal;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Animal.deserializeBinaryFromReader);
      msg.setAnimal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nakama.niwrad.api.realtime.Destroy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nakama.niwrad.api.realtime.Destroy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nakama.niwrad.api.realtime.Destroy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Destroy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAny();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nakama.niwrad.api.realtime.Transform.serializeBinaryToWriter
    );
  }
  f = message.getTree();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nakama.niwrad.api.realtime.Tree.serializeBinaryToWriter
    );
  }
  f = message.getAnimal();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nakama.niwrad.api.realtime.Animal.serializeBinaryToWriter
    );
  }
};


/**
 * optional Transform any = 1;
 * @return {?proto.nakama.niwrad.api.realtime.Transform}
 */
proto.nakama.niwrad.api.realtime.Destroy.prototype.getAny = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Transform} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Transform, 1));
};


/** @param {?proto.nakama.niwrad.api.realtime.Transform|undefined} value */
proto.nakama.niwrad.api.realtime.Destroy.prototype.setAny = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.nakama.niwrad.api.realtime.Destroy.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nakama.niwrad.api.realtime.Destroy.prototype.clearAny = function() {
  this.setAny(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nakama.niwrad.api.realtime.Destroy.prototype.hasAny = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Tree tree = 2;
 * @return {?proto.nakama.niwrad.api.realtime.Tree}
 */
proto.nakama.niwrad.api.realtime.Destroy.prototype.getTree = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Tree} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Tree, 2));
};


/** @param {?proto.nakama.niwrad.api.realtime.Tree|undefined} value */
proto.nakama.niwrad.api.realtime.Destroy.prototype.setTree = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.nakama.niwrad.api.realtime.Destroy.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nakama.niwrad.api.realtime.Destroy.prototype.clearTree = function() {
  this.setTree(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nakama.niwrad.api.realtime.Destroy.prototype.hasTree = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Animal animal = 3;
 * @return {?proto.nakama.niwrad.api.realtime.Animal}
 */
proto.nakama.niwrad.api.realtime.Destroy.prototype.getAnimal = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Animal} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Animal, 3));
};


/** @param {?proto.nakama.niwrad.api.realtime.Animal|undefined} value */
proto.nakama.niwrad.api.realtime.Destroy.prototype.setAnimal = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.nakama.niwrad.api.realtime.Destroy.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nakama.niwrad.api.realtime.Destroy.prototype.clearAnimal = function() {
  this.setAnimal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nakama.niwrad.api.realtime.Destroy.prototype.hasAnimal = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nakama.niwrad.api.realtime.Meme.prototype.toObject = function(opt_includeInstance) {
  return proto.nakama.niwrad.api.realtime.Meme.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nakama.niwrad.api.realtime.Meme} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Meme.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    memeName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nakama.niwrad.api.realtime.Meme}
 */
proto.nakama.niwrad.api.realtime.Meme.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nakama.niwrad.api.realtime.Meme;
  return proto.nakama.niwrad.api.realtime.Meme.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nakama.niwrad.api.realtime.Meme} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nakama.niwrad.api.realtime.Meme}
 */
proto.nakama.niwrad.api.realtime.Meme.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemeName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nakama.niwrad.api.realtime.Meme.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nakama.niwrad.api.realtime.Meme.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nakama.niwrad.api.realtime.Meme} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Meme.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getMemeName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.nakama.niwrad.api.realtime.Meme.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.nakama.niwrad.api.realtime.Meme.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string meme_name = 2;
 * @return {string}
 */
proto.nakama.niwrad.api.realtime.Meme.prototype.getMemeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.nakama.niwrad.api.realtime.Meme.prototype.setMemeName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nakama.niwrad.api.realtime.Initialized.prototype.toObject = function(opt_includeInstance) {
  return proto.nakama.niwrad.api.realtime.Initialized.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nakama.niwrad.api.realtime.Initialized} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Initialized.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nakama.niwrad.api.realtime.Initialized}
 */
proto.nakama.niwrad.api.realtime.Initialized.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nakama.niwrad.api.realtime.Initialized;
  return proto.nakama.niwrad.api.realtime.Initialized.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nakama.niwrad.api.realtime.Initialized} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nakama.niwrad.api.realtime.Initialized}
 */
proto.nakama.niwrad.api.realtime.Initialized.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nakama.niwrad.api.realtime.Initialized.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nakama.niwrad.api.realtime.Initialized.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nakama.niwrad.api.realtime.Initialized} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Initialized.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nakama.niwrad.api.realtime.Transform.prototype.toObject = function(opt_includeInstance) {
  return proto.nakama.niwrad.api.realtime.Transform.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nakama.niwrad.api.realtime.Transform} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Transform.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    position: (f = msg.getPosition()) && github_com_louis030195_protometry_api_vector3_vector3_pb.Vector3.toObject(includeInstance, f),
    rotation: (f = msg.getRotation()) && github_com_louis030195_protometry_api_quaternion_quaternion_pb.Quaternion.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nakama.niwrad.api.realtime.Transform}
 */
proto.nakama.niwrad.api.realtime.Transform.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nakama.niwrad.api.realtime.Transform;
  return proto.nakama.niwrad.api.realtime.Transform.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nakama.niwrad.api.realtime.Transform} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nakama.niwrad.api.realtime.Transform}
 */
proto.nakama.niwrad.api.realtime.Transform.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = new github_com_louis030195_protometry_api_vector3_vector3_pb.Vector3;
      reader.readMessage(value,github_com_louis030195_protometry_api_vector3_vector3_pb.Vector3.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 3:
      var value = new github_com_louis030195_protometry_api_quaternion_quaternion_pb.Quaternion;
      reader.readMessage(value,github_com_louis030195_protometry_api_quaternion_quaternion_pb.Quaternion.deserializeBinaryFromReader);
      msg.setRotation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nakama.niwrad.api.realtime.Transform.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nakama.niwrad.api.realtime.Transform.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nakama.niwrad.api.realtime.Transform} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Transform.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      github_com_louis030195_protometry_api_vector3_vector3_pb.Vector3.serializeBinaryToWriter
    );
  }
  f = message.getRotation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      github_com_louis030195_protometry_api_quaternion_quaternion_pb.Quaternion.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.nakama.niwrad.api.realtime.Transform.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.nakama.niwrad.api.realtime.Transform.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional protometry.vector3.Vector3 position = 2;
 * @return {?proto.protometry.vector3.Vector3}
 */
proto.nakama.niwrad.api.realtime.Transform.prototype.getPosition = function() {
  return /** @type{?proto.protometry.vector3.Vector3} */ (
    jspb.Message.getWrapperField(this, github_com_louis030195_protometry_api_vector3_vector3_pb.Vector3, 2));
};


/** @param {?proto.protometry.vector3.Vector3|undefined} value */
proto.nakama.niwrad.api.realtime.Transform.prototype.setPosition = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nakama.niwrad.api.realtime.Transform.prototype.clearPosition = function() {
  this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nakama.niwrad.api.realtime.Transform.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional protometry.quaternion.Quaternion rotation = 3;
 * @return {?proto.protometry.quaternion.Quaternion}
 */
proto.nakama.niwrad.api.realtime.Transform.prototype.getRotation = function() {
  return /** @type{?proto.protometry.quaternion.Quaternion} */ (
    jspb.Message.getWrapperField(this, github_com_louis030195_protometry_api_quaternion_quaternion_pb.Quaternion, 3));
};


/** @param {?proto.protometry.quaternion.Quaternion|undefined} value */
proto.nakama.niwrad.api.realtime.Transform.prototype.setRotation = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nakama.niwrad.api.realtime.Transform.prototype.clearRotation = function() {
  this.setRotation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nakama.niwrad.api.realtime.Transform.prototype.hasRotation = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nakama.niwrad.api.realtime.Tree.prototype.toObject = function(opt_includeInstance) {
  return proto.nakama.niwrad.api.realtime.Tree.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nakama.niwrad.api.realtime.Tree} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Tree.toObject = function(includeInstance, msg) {
  var f, obj = {
    transform: (f = msg.getTransform()) && proto.nakama.niwrad.api.realtime.Transform.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nakama.niwrad.api.realtime.Tree}
 */
proto.nakama.niwrad.api.realtime.Tree.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nakama.niwrad.api.realtime.Tree;
  return proto.nakama.niwrad.api.realtime.Tree.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nakama.niwrad.api.realtime.Tree} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nakama.niwrad.api.realtime.Tree}
 */
proto.nakama.niwrad.api.realtime.Tree.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nakama.niwrad.api.realtime.Transform;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Transform.deserializeBinaryFromReader);
      msg.setTransform(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nakama.niwrad.api.realtime.Tree.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nakama.niwrad.api.realtime.Tree.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nakama.niwrad.api.realtime.Tree} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Tree.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransform();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nakama.niwrad.api.realtime.Transform.serializeBinaryToWriter
    );
  }
};


/**
 * optional Transform transform = 1;
 * @return {?proto.nakama.niwrad.api.realtime.Transform}
 */
proto.nakama.niwrad.api.realtime.Tree.prototype.getTransform = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Transform} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Transform, 1));
};


/** @param {?proto.nakama.niwrad.api.realtime.Transform|undefined} value */
proto.nakama.niwrad.api.realtime.Tree.prototype.setTransform = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nakama.niwrad.api.realtime.Tree.prototype.clearTransform = function() {
  this.setTransform(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nakama.niwrad.api.realtime.Tree.prototype.hasTransform = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nakama.niwrad.api.realtime.Animal.prototype.toObject = function(opt_includeInstance) {
  return proto.nakama.niwrad.api.realtime.Animal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nakama.niwrad.api.realtime.Animal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Animal.toObject = function(includeInstance, msg) {
  var f, obj = {
    transform: (f = msg.getTransform()) && proto.nakama.niwrad.api.realtime.Transform.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nakama.niwrad.api.realtime.Animal}
 */
proto.nakama.niwrad.api.realtime.Animal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nakama.niwrad.api.realtime.Animal;
  return proto.nakama.niwrad.api.realtime.Animal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nakama.niwrad.api.realtime.Animal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nakama.niwrad.api.realtime.Animal}
 */
proto.nakama.niwrad.api.realtime.Animal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nakama.niwrad.api.realtime.Transform;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Transform.deserializeBinaryFromReader);
      msg.setTransform(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nakama.niwrad.api.realtime.Animal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nakama.niwrad.api.realtime.Animal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nakama.niwrad.api.realtime.Animal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Animal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransform();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nakama.niwrad.api.realtime.Transform.serializeBinaryToWriter
    );
  }
};


/**
 * optional Transform transform = 1;
 * @return {?proto.nakama.niwrad.api.realtime.Transform}
 */
proto.nakama.niwrad.api.realtime.Animal.prototype.getTransform = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Transform} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Transform, 1));
};


/** @param {?proto.nakama.niwrad.api.realtime.Transform|undefined} value */
proto.nakama.niwrad.api.realtime.Animal.prototype.setTransform = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nakama.niwrad.api.realtime.Animal.prototype.clearTransform = function() {
  this.setTransform(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nakama.niwrad.api.realtime.Animal.prototype.hasTransform = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nakama.niwrad.api.realtime.RequestTransferOwnership.prototype.toObject = function(opt_includeInstance) {
  return proto.nakama.niwrad.api.realtime.RequestTransferOwnership.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nakama.niwrad.api.realtime.RequestTransferOwnership} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.RequestTransferOwnership.toObject = function(includeInstance, msg) {
  var f, obj = {
    transform: (f = msg.getTransform()) && proto.nakama.niwrad.api.realtime.Transform.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nakama.niwrad.api.realtime.RequestTransferOwnership}
 */
proto.nakama.niwrad.api.realtime.RequestTransferOwnership.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nakama.niwrad.api.realtime.RequestTransferOwnership;
  return proto.nakama.niwrad.api.realtime.RequestTransferOwnership.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nakama.niwrad.api.realtime.RequestTransferOwnership} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nakama.niwrad.api.realtime.RequestTransferOwnership}
 */
proto.nakama.niwrad.api.realtime.RequestTransferOwnership.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nakama.niwrad.api.realtime.Transform;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Transform.deserializeBinaryFromReader);
      msg.setTransform(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nakama.niwrad.api.realtime.RequestTransferOwnership.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nakama.niwrad.api.realtime.RequestTransferOwnership.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nakama.niwrad.api.realtime.RequestTransferOwnership} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.RequestTransferOwnership.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransform();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nakama.niwrad.api.realtime.Transform.serializeBinaryToWriter
    );
  }
};


/**
 * optional Transform transform = 1;
 * @return {?proto.nakama.niwrad.api.realtime.Transform}
 */
proto.nakama.niwrad.api.realtime.RequestTransferOwnership.prototype.getTransform = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Transform} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Transform, 1));
};


/** @param {?proto.nakama.niwrad.api.realtime.Transform|undefined} value */
proto.nakama.niwrad.api.realtime.RequestTransferOwnership.prototype.setTransform = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nakama.niwrad.api.realtime.RequestTransferOwnership.prototype.clearTransform = function() {
  this.setTransform(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nakama.niwrad.api.realtime.RequestTransferOwnership.prototype.hasTransform = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.nakama.niwrad.api.realtime);

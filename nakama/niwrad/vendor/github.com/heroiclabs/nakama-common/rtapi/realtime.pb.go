// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rtapi/realtime.proto

package rtapi

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	api "github.com/heroiclabs/nakama-common/api"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The type of chat channel.
type ChannelJoin_Type int32

const (
	// Default case. Assumed as ROOM type.
	ChannelJoin_TYPE_UNSPECIFIED ChannelJoin_Type = 0
	// A room which anyone can join to chat.
	ChannelJoin_ROOM ChannelJoin_Type = 1
	// A private channel for 1-on-1 chat.
	ChannelJoin_DIRECT_MESSAGE ChannelJoin_Type = 2
	// A channel for group chat.
	ChannelJoin_GROUP ChannelJoin_Type = 3
)

var ChannelJoin_Type_name = map[int32]string{
	0: "TYPE_UNSPECIFIED",
	1: "ROOM",
	2: "DIRECT_MESSAGE",
	3: "GROUP",
}

var ChannelJoin_Type_value = map[string]int32{
	"TYPE_UNSPECIFIED": 0,
	"ROOM":             1,
	"DIRECT_MESSAGE":   2,
	"GROUP":            3,
}

func (x ChannelJoin_Type) String() string {
	return proto.EnumName(ChannelJoin_Type_name, int32(x))
}

func (ChannelJoin_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0163624496220f8c, []int{2, 0}
}

// The selection of possible error codes.
type Error_Code int32

const (
	// An unexpected result from the server.
	Error_RUNTIME_EXCEPTION Error_Code = 0
	// The server received a message which is not recognised.
	Error_UNRECOGNIZED_PAYLOAD Error_Code = 1
	// A message was expected but contains no content.
	Error_MISSING_PAYLOAD Error_Code = 2
	// Fields in the message have an invalid format.
	Error_BAD_INPUT Error_Code = 3
	// The match id was not found.
	Error_MATCH_NOT_FOUND Error_Code = 4
	// The match join was rejected.
	Error_MATCH_JOIN_REJECTED Error_Code = 5
	// The runtime function does not exist on the server.
	Error_RUNTIME_FUNCTION_NOT_FOUND Error_Code = 6
	// The runtime function executed with an error.
	Error_RUNTIME_FUNCTION_EXCEPTION Error_Code = 7
)

var Error_Code_name = map[int32]string{
	0: "RUNTIME_EXCEPTION",
	1: "UNRECOGNIZED_PAYLOAD",
	2: "MISSING_PAYLOAD",
	3: "BAD_INPUT",
	4: "MATCH_NOT_FOUND",
	5: "MATCH_JOIN_REJECTED",
	6: "RUNTIME_FUNCTION_NOT_FOUND",
	7: "RUNTIME_FUNCTION_EXCEPTION",
}

var Error_Code_value = map[string]int32{
	"RUNTIME_EXCEPTION":          0,
	"UNRECOGNIZED_PAYLOAD":       1,
	"MISSING_PAYLOAD":            2,
	"BAD_INPUT":                  3,
	"MATCH_NOT_FOUND":            4,
	"MATCH_JOIN_REJECTED":        5,
	"RUNTIME_FUNCTION_NOT_FOUND": 6,
	"RUNTIME_FUNCTION_EXCEPTION": 7,
}

func (x Error_Code) String() string {
	return proto.EnumName(Error_Code_name, int32(x))
}

func (Error_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0163624496220f8c, []int{9, 0}
}

// An envelope for a realtime message.
type Envelope struct {
	Cid string `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
	// Types that are valid to be assigned to Message:
	//	*Envelope_Channel
	//	*Envelope_ChannelJoin
	//	*Envelope_ChannelLeave
	//	*Envelope_ChannelMessage
	//	*Envelope_ChannelMessageAck
	//	*Envelope_ChannelMessageSend
	//	*Envelope_ChannelMessageUpdate
	//	*Envelope_ChannelMessageRemove
	//	*Envelope_ChannelPresenceEvent
	//	*Envelope_Error
	//	*Envelope_Match
	//	*Envelope_MatchCreate
	//	*Envelope_MatchData
	//	*Envelope_MatchDataSend
	//	*Envelope_MatchJoin
	//	*Envelope_MatchLeave
	//	*Envelope_MatchPresenceEvent
	//	*Envelope_MatchmakerAdd
	//	*Envelope_MatchmakerMatched
	//	*Envelope_MatchmakerRemove
	//	*Envelope_MatchmakerTicket
	//	*Envelope_Notifications
	//	*Envelope_Rpc
	//	*Envelope_Status
	//	*Envelope_StatusFollow
	//	*Envelope_StatusPresenceEvent
	//	*Envelope_StatusUnfollow
	//	*Envelope_StatusUpdate
	//	*Envelope_StreamData
	//	*Envelope_StreamPresenceEvent
	//	*Envelope_Ping
	//	*Envelope_Pong
	Message              isEnvelope_Message `protobuf_oneof:"message"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Envelope) Reset()         { *m = Envelope{} }
func (m *Envelope) String() string { return proto.CompactTextString(m) }
func (*Envelope) ProtoMessage()    {}
func (*Envelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_0163624496220f8c, []int{0}
}

func (m *Envelope) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Envelope.Unmarshal(m, b)
}
func (m *Envelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Envelope.Marshal(b, m, deterministic)
}
func (m *Envelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Envelope.Merge(m, src)
}
func (m *Envelope) XXX_Size() int {
	return xxx_messageInfo_Envelope.Size(m)
}
func (m *Envelope) XXX_DiscardUnknown() {
	xxx_messageInfo_Envelope.DiscardUnknown(m)
}

var xxx_messageInfo_Envelope proto.InternalMessageInfo

func (m *Envelope) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

type isEnvelope_Message interface {
	isEnvelope_Message()
}

type Envelope_Channel struct {
	Channel *Channel `protobuf:"bytes,2,opt,name=channel,proto3,oneof"`
}

type Envelope_ChannelJoin struct {
	ChannelJoin *ChannelJoin `protobuf:"bytes,3,opt,name=channel_join,json=channelJoin,proto3,oneof"`
}

type Envelope_ChannelLeave struct {
	ChannelLeave *ChannelLeave `protobuf:"bytes,4,opt,name=channel_leave,json=channelLeave,proto3,oneof"`
}

type Envelope_ChannelMessage struct {
	ChannelMessage *api.ChannelMessage `protobuf:"bytes,5,opt,name=channel_message,json=channelMessage,proto3,oneof"`
}

type Envelope_ChannelMessageAck struct {
	ChannelMessageAck *ChannelMessageAck `protobuf:"bytes,6,opt,name=channel_message_ack,json=channelMessageAck,proto3,oneof"`
}

type Envelope_ChannelMessageSend struct {
	ChannelMessageSend *ChannelMessageSend `protobuf:"bytes,7,opt,name=channel_message_send,json=channelMessageSend,proto3,oneof"`
}

type Envelope_ChannelMessageUpdate struct {
	ChannelMessageUpdate *ChannelMessageUpdate `protobuf:"bytes,8,opt,name=channel_message_update,json=channelMessageUpdate,proto3,oneof"`
}

type Envelope_ChannelMessageRemove struct {
	ChannelMessageRemove *ChannelMessageRemove `protobuf:"bytes,9,opt,name=channel_message_remove,json=channelMessageRemove,proto3,oneof"`
}

type Envelope_ChannelPresenceEvent struct {
	ChannelPresenceEvent *ChannelPresenceEvent `protobuf:"bytes,10,opt,name=channel_presence_event,json=channelPresenceEvent,proto3,oneof"`
}

type Envelope_Error struct {
	Error *Error `protobuf:"bytes,11,opt,name=error,proto3,oneof"`
}

type Envelope_Match struct {
	Match *Match `protobuf:"bytes,12,opt,name=match,proto3,oneof"`
}

type Envelope_MatchCreate struct {
	MatchCreate *MatchCreate `protobuf:"bytes,13,opt,name=match_create,json=matchCreate,proto3,oneof"`
}

type Envelope_MatchData struct {
	MatchData *MatchData `protobuf:"bytes,14,opt,name=match_data,json=matchData,proto3,oneof"`
}

type Envelope_MatchDataSend struct {
	MatchDataSend *MatchDataSend `protobuf:"bytes,15,opt,name=match_data_send,json=matchDataSend,proto3,oneof"`
}

type Envelope_MatchJoin struct {
	MatchJoin *MatchJoin `protobuf:"bytes,16,opt,name=match_join,json=matchJoin,proto3,oneof"`
}

type Envelope_MatchLeave struct {
	MatchLeave *MatchLeave `protobuf:"bytes,17,opt,name=match_leave,json=matchLeave,proto3,oneof"`
}

type Envelope_MatchPresenceEvent struct {
	MatchPresenceEvent *MatchPresenceEvent `protobuf:"bytes,18,opt,name=match_presence_event,json=matchPresenceEvent,proto3,oneof"`
}

type Envelope_MatchmakerAdd struct {
	MatchmakerAdd *MatchmakerAdd `protobuf:"bytes,19,opt,name=matchmaker_add,json=matchmakerAdd,proto3,oneof"`
}

type Envelope_MatchmakerMatched struct {
	MatchmakerMatched *MatchmakerMatched `protobuf:"bytes,20,opt,name=matchmaker_matched,json=matchmakerMatched,proto3,oneof"`
}

type Envelope_MatchmakerRemove struct {
	MatchmakerRemove *MatchmakerRemove `protobuf:"bytes,21,opt,name=matchmaker_remove,json=matchmakerRemove,proto3,oneof"`
}

type Envelope_MatchmakerTicket struct {
	MatchmakerTicket *MatchmakerTicket `protobuf:"bytes,22,opt,name=matchmaker_ticket,json=matchmakerTicket,proto3,oneof"`
}

type Envelope_Notifications struct {
	Notifications *Notifications `protobuf:"bytes,23,opt,name=notifications,proto3,oneof"`
}

type Envelope_Rpc struct {
	Rpc *api.Rpc `protobuf:"bytes,24,opt,name=rpc,proto3,oneof"`
}

type Envelope_Status struct {
	Status *Status `protobuf:"bytes,25,opt,name=status,proto3,oneof"`
}

type Envelope_StatusFollow struct {
	StatusFollow *StatusFollow `protobuf:"bytes,26,opt,name=status_follow,json=statusFollow,proto3,oneof"`
}

type Envelope_StatusPresenceEvent struct {
	StatusPresenceEvent *StatusPresenceEvent `protobuf:"bytes,27,opt,name=status_presence_event,json=statusPresenceEvent,proto3,oneof"`
}

type Envelope_StatusUnfollow struct {
	StatusUnfollow *StatusUnfollow `protobuf:"bytes,28,opt,name=status_unfollow,json=statusUnfollow,proto3,oneof"`
}

type Envelope_StatusUpdate struct {
	StatusUpdate *StatusUpdate `protobuf:"bytes,29,opt,name=status_update,json=statusUpdate,proto3,oneof"`
}

type Envelope_StreamData struct {
	StreamData *StreamData `protobuf:"bytes,30,opt,name=stream_data,json=streamData,proto3,oneof"`
}

type Envelope_StreamPresenceEvent struct {
	StreamPresenceEvent *StreamPresenceEvent `protobuf:"bytes,31,opt,name=stream_presence_event,json=streamPresenceEvent,proto3,oneof"`
}

type Envelope_Ping struct {
	Ping *Ping `protobuf:"bytes,32,opt,name=ping,proto3,oneof"`
}

type Envelope_Pong struct {
	Pong *Pong `protobuf:"bytes,33,opt,name=pong,proto3,oneof"`
}

func (*Envelope_Channel) isEnvelope_Message() {}

func (*Envelope_ChannelJoin) isEnvelope_Message() {}

func (*Envelope_ChannelLeave) isEnvelope_Message() {}

func (*Envelope_ChannelMessage) isEnvelope_Message() {}

func (*Envelope_ChannelMessageAck) isEnvelope_Message() {}

func (*Envelope_ChannelMessageSend) isEnvelope_Message() {}

func (*Envelope_ChannelMessageUpdate) isEnvelope_Message() {}

func (*Envelope_ChannelMessageRemove) isEnvelope_Message() {}

func (*Envelope_ChannelPresenceEvent) isEnvelope_Message() {}

func (*Envelope_Error) isEnvelope_Message() {}

func (*Envelope_Match) isEnvelope_Message() {}

func (*Envelope_MatchCreate) isEnvelope_Message() {}

func (*Envelope_MatchData) isEnvelope_Message() {}

func (*Envelope_MatchDataSend) isEnvelope_Message() {}

func (*Envelope_MatchJoin) isEnvelope_Message() {}

func (*Envelope_MatchLeave) isEnvelope_Message() {}

func (*Envelope_MatchPresenceEvent) isEnvelope_Message() {}

func (*Envelope_MatchmakerAdd) isEnvelope_Message() {}

func (*Envelope_MatchmakerMatched) isEnvelope_Message() {}

func (*Envelope_MatchmakerRemove) isEnvelope_Message() {}

func (*Envelope_MatchmakerTicket) isEnvelope_Message() {}

func (*Envelope_Notifications) isEnvelope_Message() {}

func (*Envelope_Rpc) isEnvelope_Message() {}

func (*Envelope_Status) isEnvelope_Message() {}

func (*Envelope_StatusFollow) isEnvelope_Message() {}

func (*Envelope_StatusPresenceEvent) isEnvelope_Message() {}

func (*Envelope_StatusUnfollow) isEnvelope_Message() {}

func (*Envelope_StatusUpdate) isEnvelope_Message() {}

func (*Envelope_StreamData) isEnvelope_Message() {}

func (*Envelope_StreamPresenceEvent) isEnvelope_Message() {}

func (*Envelope_Ping) isEnvelope_Message() {}

func (*Envelope_Pong) isEnvelope_Message() {}

func (m *Envelope) GetMessage() isEnvelope_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Envelope) GetChannel() *Channel {
	if x, ok := m.GetMessage().(*Envelope_Channel); ok {
		return x.Channel
	}
	return nil
}

func (m *Envelope) GetChannelJoin() *ChannelJoin {
	if x, ok := m.GetMessage().(*Envelope_ChannelJoin); ok {
		return x.ChannelJoin
	}
	return nil
}

func (m *Envelope) GetChannelLeave() *ChannelLeave {
	if x, ok := m.GetMessage().(*Envelope_ChannelLeave); ok {
		return x.ChannelLeave
	}
	return nil
}

func (m *Envelope) GetChannelMessage() *api.ChannelMessage {
	if x, ok := m.GetMessage().(*Envelope_ChannelMessage); ok {
		return x.ChannelMessage
	}
	return nil
}

func (m *Envelope) GetChannelMessageAck() *ChannelMessageAck {
	if x, ok := m.GetMessage().(*Envelope_ChannelMessageAck); ok {
		return x.ChannelMessageAck
	}
	return nil
}

func (m *Envelope) GetChannelMessageSend() *ChannelMessageSend {
	if x, ok := m.GetMessage().(*Envelope_ChannelMessageSend); ok {
		return x.ChannelMessageSend
	}
	return nil
}

func (m *Envelope) GetChannelMessageUpdate() *ChannelMessageUpdate {
	if x, ok := m.GetMessage().(*Envelope_ChannelMessageUpdate); ok {
		return x.ChannelMessageUpdate
	}
	return nil
}

func (m *Envelope) GetChannelMessageRemove() *ChannelMessageRemove {
	if x, ok := m.GetMessage().(*Envelope_ChannelMessageRemove); ok {
		return x.ChannelMessageRemove
	}
	return nil
}

func (m *Envelope) GetChannelPresenceEvent() *ChannelPresenceEvent {
	if x, ok := m.GetMessage().(*Envelope_ChannelPresenceEvent); ok {
		return x.ChannelPresenceEvent
	}
	return nil
}

func (m *Envelope) GetError() *Error {
	if x, ok := m.GetMessage().(*Envelope_Error); ok {
		return x.Error
	}
	return nil
}

func (m *Envelope) GetMatch() *Match {
	if x, ok := m.GetMessage().(*Envelope_Match); ok {
		return x.Match
	}
	return nil
}

func (m *Envelope) GetMatchCreate() *MatchCreate {
	if x, ok := m.GetMessage().(*Envelope_MatchCreate); ok {
		return x.MatchCreate
	}
	return nil
}

func (m *Envelope) GetMatchData() *MatchData {
	if x, ok := m.GetMessage().(*Envelope_MatchData); ok {
		return x.MatchData
	}
	return nil
}

func (m *Envelope) GetMatchDataSend() *MatchDataSend {
	if x, ok := m.GetMessage().(*Envelope_MatchDataSend); ok {
		return x.MatchDataSend
	}
	return nil
}

func (m *Envelope) GetMatchJoin() *MatchJoin {
	if x, ok := m.GetMessage().(*Envelope_MatchJoin); ok {
		return x.MatchJoin
	}
	return nil
}

func (m *Envelope) GetMatchLeave() *MatchLeave {
	if x, ok := m.GetMessage().(*Envelope_MatchLeave); ok {
		return x.MatchLeave
	}
	return nil
}

func (m *Envelope) GetMatchPresenceEvent() *MatchPresenceEvent {
	if x, ok := m.GetMessage().(*Envelope_MatchPresenceEvent); ok {
		return x.MatchPresenceEvent
	}
	return nil
}

func (m *Envelope) GetMatchmakerAdd() *MatchmakerAdd {
	if x, ok := m.GetMessage().(*Envelope_MatchmakerAdd); ok {
		return x.MatchmakerAdd
	}
	return nil
}

func (m *Envelope) GetMatchmakerMatched() *MatchmakerMatched {
	if x, ok := m.GetMessage().(*Envelope_MatchmakerMatched); ok {
		return x.MatchmakerMatched
	}
	return nil
}

func (m *Envelope) GetMatchmakerRemove() *MatchmakerRemove {
	if x, ok := m.GetMessage().(*Envelope_MatchmakerRemove); ok {
		return x.MatchmakerRemove
	}
	return nil
}

func (m *Envelope) GetMatchmakerTicket() *MatchmakerTicket {
	if x, ok := m.GetMessage().(*Envelope_MatchmakerTicket); ok {
		return x.MatchmakerTicket
	}
	return nil
}

func (m *Envelope) GetNotifications() *Notifications {
	if x, ok := m.GetMessage().(*Envelope_Notifications); ok {
		return x.Notifications
	}
	return nil
}

func (m *Envelope) GetRpc() *api.Rpc {
	if x, ok := m.GetMessage().(*Envelope_Rpc); ok {
		return x.Rpc
	}
	return nil
}

func (m *Envelope) GetStatus() *Status {
	if x, ok := m.GetMessage().(*Envelope_Status); ok {
		return x.Status
	}
	return nil
}

func (m *Envelope) GetStatusFollow() *StatusFollow {
	if x, ok := m.GetMessage().(*Envelope_StatusFollow); ok {
		return x.StatusFollow
	}
	return nil
}

func (m *Envelope) GetStatusPresenceEvent() *StatusPresenceEvent {
	if x, ok := m.GetMessage().(*Envelope_StatusPresenceEvent); ok {
		return x.StatusPresenceEvent
	}
	return nil
}

func (m *Envelope) GetStatusUnfollow() *StatusUnfollow {
	if x, ok := m.GetMessage().(*Envelope_StatusUnfollow); ok {
		return x.StatusUnfollow
	}
	return nil
}

func (m *Envelope) GetStatusUpdate() *StatusUpdate {
	if x, ok := m.GetMessage().(*Envelope_StatusUpdate); ok {
		return x.StatusUpdate
	}
	return nil
}

func (m *Envelope) GetStreamData() *StreamData {
	if x, ok := m.GetMessage().(*Envelope_StreamData); ok {
		return x.StreamData
	}
	return nil
}

func (m *Envelope) GetStreamPresenceEvent() *StreamPresenceEvent {
	if x, ok := m.GetMessage().(*Envelope_StreamPresenceEvent); ok {
		return x.StreamPresenceEvent
	}
	return nil
}

func (m *Envelope) GetPing() *Ping {
	if x, ok := m.GetMessage().(*Envelope_Ping); ok {
		return x.Ping
	}
	return nil
}

func (m *Envelope) GetPong() *Pong {
	if x, ok := m.GetMessage().(*Envelope_Pong); ok {
		return x.Pong
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Envelope) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Envelope_Channel)(nil),
		(*Envelope_ChannelJoin)(nil),
		(*Envelope_ChannelLeave)(nil),
		(*Envelope_ChannelMessage)(nil),
		(*Envelope_ChannelMessageAck)(nil),
		(*Envelope_ChannelMessageSend)(nil),
		(*Envelope_ChannelMessageUpdate)(nil),
		(*Envelope_ChannelMessageRemove)(nil),
		(*Envelope_ChannelPresenceEvent)(nil),
		(*Envelope_Error)(nil),
		(*Envelope_Match)(nil),
		(*Envelope_MatchCreate)(nil),
		(*Envelope_MatchData)(nil),
		(*Envelope_MatchDataSend)(nil),
		(*Envelope_MatchJoin)(nil),
		(*Envelope_MatchLeave)(nil),
		(*Envelope_MatchPresenceEvent)(nil),
		(*Envelope_MatchmakerAdd)(nil),
		(*Envelope_MatchmakerMatched)(nil),
		(*Envelope_MatchmakerRemove)(nil),
		(*Envelope_MatchmakerTicket)(nil),
		(*Envelope_Notifications)(nil),
		(*Envelope_Rpc)(nil),
		(*Envelope_Status)(nil),
		(*Envelope_StatusFollow)(nil),
		(*Envelope_StatusPresenceEvent)(nil),
		(*Envelope_StatusUnfollow)(nil),
		(*Envelope_StatusUpdate)(nil),
		(*Envelope_StreamData)(nil),
		(*Envelope_StreamPresenceEvent)(nil),
		(*Envelope_Ping)(nil),
		(*Envelope_Pong)(nil),
	}
}

// A realtime chat channel.
type Channel struct {
	// The ID of the channel.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The users currently in the channel.
	Presences []*UserPresence `protobuf:"bytes,2,rep,name=presences,proto3" json:"presences,omitempty"`
	// A reference to the current user's presence in the channel.
	Self *UserPresence `protobuf:"bytes,3,opt,name=self,proto3" json:"self,omitempty"`
	// The name of the chat room, or an empty string if this message was not sent through a chat room.
	RoomName string `protobuf:"bytes,4,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	// The ID of the group, or an empty string if this message was not sent through a group channel.
	GroupId string `protobuf:"bytes,5,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// The ID of the first DM user, or an empty string if this message was not sent through a DM chat.
	UserIdOne string `protobuf:"bytes,6,opt,name=user_id_one,json=userIdOne,proto3" json:"user_id_one,omitempty"`
	// The ID of the second DM user, or an empty string if this message was not sent through a DM chat.
	UserIdTwo            string   `protobuf:"bytes,7,opt,name=user_id_two,json=userIdTwo,proto3" json:"user_id_two,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Channel) Reset()         { *m = Channel{} }
func (m *Channel) String() string { return proto.CompactTextString(m) }
func (*Channel) ProtoMessage()    {}
func (*Channel) Descriptor() ([]byte, []int) {
	return fileDescriptor_0163624496220f8c, []int{1}
}

func (m *Channel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Channel.Unmarshal(m, b)
}
func (m *Channel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Channel.Marshal(b, m, deterministic)
}
func (m *Channel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Channel.Merge(m, src)
}
func (m *Channel) XXX_Size() int {
	return xxx_messageInfo_Channel.Size(m)
}
func (m *Channel) XXX_DiscardUnknown() {
	xxx_messageInfo_Channel.DiscardUnknown(m)
}

var xxx_messageInfo_Channel proto.InternalMessageInfo

func (m *Channel) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Channel) GetPresences() []*UserPresence {
	if m != nil {
		return m.Presences
	}
	return nil
}

func (m *Channel) GetSelf() *UserPresence {
	if m != nil {
		return m.Self
	}
	return nil
}

func (m *Channel) GetRoomName() string {
	if m != nil {
		return m.RoomName
	}
	return ""
}

func (m *Channel) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *Channel) GetUserIdOne() string {
	if m != nil {
		return m.UserIdOne
	}
	return ""
}

func (m *Channel) GetUserIdTwo() string {
	if m != nil {
		return m.UserIdTwo
	}
	return ""
}

// Join operation for a realtime chat channel.
type ChannelJoin struct {
	// The user ID to DM with, group ID to chat with, or room channel name to join.
	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// The type of the chat channel.
	Type int32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	// Whether messages sent on this channel should be persistent.
	Persistence *wrappers.BoolValue `protobuf:"bytes,3,opt,name=persistence,proto3" json:"persistence,omitempty"`
	// Whether the user should appear in the channel's presence list and events.
	Hidden               *wrappers.BoolValue `protobuf:"bytes,4,opt,name=hidden,proto3" json:"hidden,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ChannelJoin) Reset()         { *m = ChannelJoin{} }
func (m *ChannelJoin) String() string { return proto.CompactTextString(m) }
func (*ChannelJoin) ProtoMessage()    {}
func (*ChannelJoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_0163624496220f8c, []int{2}
}

func (m *ChannelJoin) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelJoin.Unmarshal(m, b)
}
func (m *ChannelJoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelJoin.Marshal(b, m, deterministic)
}
func (m *ChannelJoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelJoin.Merge(m, src)
}
func (m *ChannelJoin) XXX_Size() int {
	return xxx_messageInfo_ChannelJoin.Size(m)
}
func (m *ChannelJoin) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelJoin.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelJoin proto.InternalMessageInfo

func (m *ChannelJoin) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *ChannelJoin) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ChannelJoin) GetPersistence() *wrappers.BoolValue {
	if m != nil {
		return m.Persistence
	}
	return nil
}

func (m *ChannelJoin) GetHidden() *wrappers.BoolValue {
	if m != nil {
		return m.Hidden
	}
	return nil
}

// Leave a realtime channel.
type ChannelLeave struct {
	// The ID of the channel to leave.
	ChannelId            string   `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelLeave) Reset()         { *m = ChannelLeave{} }
func (m *ChannelLeave) String() string { return proto.CompactTextString(m) }
func (*ChannelLeave) ProtoMessage()    {}
func (*ChannelLeave) Descriptor() ([]byte, []int) {
	return fileDescriptor_0163624496220f8c, []int{3}
}

func (m *ChannelLeave) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelLeave.Unmarshal(m, b)
}
func (m *ChannelLeave) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelLeave.Marshal(b, m, deterministic)
}
func (m *ChannelLeave) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelLeave.Merge(m, src)
}
func (m *ChannelLeave) XXX_Size() int {
	return xxx_messageInfo_ChannelLeave.Size(m)
}
func (m *ChannelLeave) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelLeave.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelLeave proto.InternalMessageInfo

func (m *ChannelLeave) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

// A receipt reply from a channel message send operation.
type ChannelMessageAck struct {
	// The channel the message was sent to.
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// The unique ID assigned to the message.
	MessageId string `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// The code representing a message type or category.
	Code *wrappers.Int32Value `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	// Username of the message sender.
	Username string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	// The UNIX time when the message was created.
	CreateTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The UNIX time when the message was last updated.
	UpdateTime *timestamp.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// True if the message was persisted to the channel's history, false otherwise.
	Persistent *wrappers.BoolValue `protobuf:"bytes,7,opt,name=persistent,proto3" json:"persistent,omitempty"`
	// The name of the chat room, or an empty string if this message was not sent through a chat room.
	RoomName string `protobuf:"bytes,8,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	// The ID of the group, or an empty string if this message was not sent through a group channel.
	GroupId string `protobuf:"bytes,9,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// The ID of the first DM user, or an empty string if this message was not sent through a DM chat.
	UserIdOne string `protobuf:"bytes,10,opt,name=user_id_one,json=userIdOne,proto3" json:"user_id_one,omitempty"`
	// The ID of the second DM user, or an empty string if this message was not sent through a DM chat.
	UserIdTwo            string   `protobuf:"bytes,11,opt,name=user_id_two,json=userIdTwo,proto3" json:"user_id_two,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelMessageAck) Reset()         { *m = ChannelMessageAck{} }
func (m *ChannelMessageAck) String() string { return proto.CompactTextString(m) }
func (*ChannelMessageAck) ProtoMessage()    {}
func (*ChannelMessageAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_0163624496220f8c, []int{4}
}

func (m *ChannelMessageAck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelMessageAck.Unmarshal(m, b)
}
func (m *ChannelMessageAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelMessageAck.Marshal(b, m, deterministic)
}
func (m *ChannelMessageAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelMessageAck.Merge(m, src)
}
func (m *ChannelMessageAck) XXX_Size() int {
	return xxx_messageInfo_ChannelMessageAck.Size(m)
}
func (m *ChannelMessageAck) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelMessageAck.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelMessageAck proto.InternalMessageInfo

func (m *ChannelMessageAck) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *ChannelMessageAck) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *ChannelMessageAck) GetCode() *wrappers.Int32Value {
	if m != nil {
		return m.Code
	}
	return nil
}

func (m *ChannelMessageAck) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ChannelMessageAck) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *ChannelMessageAck) GetUpdateTime() *timestamp.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

func (m *ChannelMessageAck) GetPersistent() *wrappers.BoolValue {
	if m != nil {
		return m.Persistent
	}
	return nil
}

func (m *ChannelMessageAck) GetRoomName() string {
	if m != nil {
		return m.RoomName
	}
	return ""
}

func (m *ChannelMessageAck) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *ChannelMessageAck) GetUserIdOne() string {
	if m != nil {
		return m.UserIdOne
	}
	return ""
}

func (m *ChannelMessageAck) GetUserIdTwo() string {
	if m != nil {
		return m.UserIdTwo
	}
	return ""
}

// Send a message to a realtime channel.
type ChannelMessageSend struct {
	// The channel to sent to.
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// Message content.
	Content              string   `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelMessageSend) Reset()         { *m = ChannelMessageSend{} }
func (m *ChannelMessageSend) String() string { return proto.CompactTextString(m) }
func (*ChannelMessageSend) ProtoMessage()    {}
func (*ChannelMessageSend) Descriptor() ([]byte, []int) {
	return fileDescriptor_0163624496220f8c, []int{5}
}

func (m *ChannelMessageSend) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelMessageSend.Unmarshal(m, b)
}
func (m *ChannelMessageSend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelMessageSend.Marshal(b, m, deterministic)
}
func (m *ChannelMessageSend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelMessageSend.Merge(m, src)
}
func (m *ChannelMessageSend) XXX_Size() int {
	return xxx_messageInfo_ChannelMessageSend.Size(m)
}
func (m *ChannelMessageSend) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelMessageSend.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelMessageSend proto.InternalMessageInfo

func (m *ChannelMessageSend) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *ChannelMessageSend) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

// Update a message previously sent to a realtime channel.
type ChannelMessageUpdate struct {
	// The channel the message was sent to.
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// The ID assigned to the message to update.
	MessageId string `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// New message content.
	Content              string   `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelMessageUpdate) Reset()         { *m = ChannelMessageUpdate{} }
func (m *ChannelMessageUpdate) String() string { return proto.CompactTextString(m) }
func (*ChannelMessageUpdate) ProtoMessage()    {}
func (*ChannelMessageUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0163624496220f8c, []int{6}
}

func (m *ChannelMessageUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelMessageUpdate.Unmarshal(m, b)
}
func (m *ChannelMessageUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelMessageUpdate.Marshal(b, m, deterministic)
}
func (m *ChannelMessageUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelMessageUpdate.Merge(m, src)
}
func (m *ChannelMessageUpdate) XXX_Size() int {
	return xxx_messageInfo_ChannelMessageUpdate.Size(m)
}
func (m *ChannelMessageUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelMessageUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelMessageUpdate proto.InternalMessageInfo

func (m *ChannelMessageUpdate) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *ChannelMessageUpdate) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *ChannelMessageUpdate) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

// Remove a message previously sent to a realtime channel.
type ChannelMessageRemove struct {
	// The channel the message was sent to.
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// The ID assigned to the message to update.
	MessageId            string   `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelMessageRemove) Reset()         { *m = ChannelMessageRemove{} }
func (m *ChannelMessageRemove) String() string { return proto.CompactTextString(m) }
func (*ChannelMessageRemove) ProtoMessage()    {}
func (*ChannelMessageRemove) Descriptor() ([]byte, []int) {
	return fileDescriptor_0163624496220f8c, []int{7}
}

func (m *ChannelMessageRemove) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelMessageRemove.Unmarshal(m, b)
}
func (m *ChannelMessageRemove) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelMessageRemove.Marshal(b, m, deterministic)
}
func (m *ChannelMessageRemove) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelMessageRemove.Merge(m, src)
}
func (m *ChannelMessageRemove) XXX_Size() int {
	return xxx_messageInfo_ChannelMessageRemove.Size(m)
}
func (m *ChannelMessageRemove) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelMessageRemove.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelMessageRemove proto.InternalMessageInfo

func (m *ChannelMessageRemove) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *ChannelMessageRemove) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

// A set of joins and leaves on a particular channel.
type ChannelPresenceEvent struct {
	// The channel identifier this event is for.
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// Presences joining the channel as part of this event, if any.
	Joins []*UserPresence `protobuf:"bytes,2,rep,name=joins,proto3" json:"joins,omitempty"`
	// Presences leaving the channel as part of this event, if any.
	Leaves []*UserPresence `protobuf:"bytes,3,rep,name=leaves,proto3" json:"leaves,omitempty"`
	// The name of the chat room, or an empty string if this message was not sent through a chat room.
	RoomName string `protobuf:"bytes,4,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	// The ID of the group, or an empty string if this message was not sent through a group channel.
	GroupId string `protobuf:"bytes,5,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// The ID of the first DM user, or an empty string if this message was not sent through a DM chat.
	UserIdOne string `protobuf:"bytes,6,opt,name=user_id_one,json=userIdOne,proto3" json:"user_id_one,omitempty"`
	// The ID of the second DM user, or an empty string if this message was not sent through a DM chat.
	UserIdTwo            string   `protobuf:"bytes,7,opt,name=user_id_two,json=userIdTwo,proto3" json:"user_id_two,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelPresenceEvent) Reset()         { *m = ChannelPresenceEvent{} }
func (m *ChannelPresenceEvent) String() string { return proto.CompactTextString(m) }
func (*ChannelPresenceEvent) ProtoMessage()    {}
func (*ChannelPresenceEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_0163624496220f8c, []int{8}
}

func (m *ChannelPresenceEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelPresenceEvent.Unmarshal(m, b)
}
func (m *ChannelPresenceEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelPresenceEvent.Marshal(b, m, deterministic)
}
func (m *ChannelPresenceEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelPresenceEvent.Merge(m, src)
}
func (m *ChannelPresenceEvent) XXX_Size() int {
	return xxx_messageInfo_ChannelPresenceEvent.Size(m)
}
func (m *ChannelPresenceEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelPresenceEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelPresenceEvent proto.InternalMessageInfo

func (m *ChannelPresenceEvent) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *ChannelPresenceEvent) GetJoins() []*UserPresence {
	if m != nil {
		return m.Joins
	}
	return nil
}

func (m *ChannelPresenceEvent) GetLeaves() []*UserPresence {
	if m != nil {
		return m.Leaves
	}
	return nil
}

func (m *ChannelPresenceEvent) GetRoomName() string {
	if m != nil {
		return m.RoomName
	}
	return ""
}

func (m *ChannelPresenceEvent) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *ChannelPresenceEvent) GetUserIdOne() string {
	if m != nil {
		return m.UserIdOne
	}
	return ""
}

func (m *ChannelPresenceEvent) GetUserIdTwo() string {
	if m != nil {
		return m.UserIdTwo
	}
	return ""
}

// A logical error which may occur on the server.
type Error struct {
	// The error code which should be one of "Error.Code" enums.
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// A message in English to help developers debug the response.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Additional error details which may be different for each response.
	Context              map[string]string `protobuf:"bytes,3,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_0163624496220f8c, []int{9}
}

func (m *Error) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Error.Unmarshal(m, b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Error.Marshal(b, m, deterministic)
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return xxx_messageInfo_Error.Size(m)
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Error) GetContext() map[string]string {
	if m != nil {
		return m.Context
	}
	return nil
}

// A realtime match.
type Match struct {
	// The match unique ID.
	MatchId string `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	// True if it's an server-managed authoritative match, false otherwise.
	Authoritative bool `protobuf:"varint,2,opt,name=authoritative,proto3" json:"authoritative,omitempty"`
	// Match label, if any.
	Label *wrappers.StringValue `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	// The number of users currently in the match.
	Size int32 `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	// The users currently in the match.
	Presences []*UserPresence `protobuf:"bytes,5,rep,name=presences,proto3" json:"presences,omitempty"`
	// A reference to the current user's presence in the match.
	Self                 *UserPresence `protobuf:"bytes,6,opt,name=self,proto3" json:"self,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Match) Reset()         { *m = Match{} }
func (m *Match) String() string { return proto.CompactTextString(m) }
func (*Match) ProtoMessage()    {}
func (*Match) Descriptor() ([]byte, []int) {
	return fileDescriptor_0163624496220f8c, []int{10}
}

func (m *Match) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Match.Unmarshal(m, b)
}
func (m *Match) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Match.Marshal(b, m, deterministic)
}
func (m *Match) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Match.Merge(m, src)
}
func (m *Match) XXX_Size() int {
	return xxx_messageInfo_Match.Size(m)
}
func (m *Match) XXX_DiscardUnknown() {
	xxx_messageInfo_Match.DiscardUnknown(m)
}

var xxx_messageInfo_Match proto.InternalMessageInfo

func (m *Match) GetMatchId() string {
	if m != nil {
		return m.MatchId
	}
	return ""
}

func (m *Match) GetAuthoritative() bool {
	if m != nil {
		return m.Authoritative
	}
	return false
}

func (m *Match) GetLabel() *wrappers.StringValue {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *Match) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Match) GetPresences() []*UserPresence {
	if m != nil {
		return m.Presences
	}
	return nil
}

func (m *Match) GetSelf() *UserPresence {
	if m != nil {
		return m.Self
	}
	return nil
}

// Create a new realtime match.
type MatchCreate struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MatchCreate) Reset()         { *m = MatchCreate{} }
func (m *MatchCreate) String() string { return proto.CompactTextString(m) }
func (*MatchCreate) ProtoMessage()    {}
func (*MatchCreate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0163624496220f8c, []int{11}
}

func (m *MatchCreate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchCreate.Unmarshal(m, b)
}
func (m *MatchCreate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchCreate.Marshal(b, m, deterministic)
}
func (m *MatchCreate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchCreate.Merge(m, src)
}
func (m *MatchCreate) XXX_Size() int {
	return xxx_messageInfo_MatchCreate.Size(m)
}
func (m *MatchCreate) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchCreate.DiscardUnknown(m)
}

var xxx_messageInfo_MatchCreate proto.InternalMessageInfo

// Realtime match data received from the server.
type MatchData struct {
	// The match unique ID.
	MatchId string `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	// A reference to the user presence that sent this data, if any.
	Presence *UserPresence `protobuf:"bytes,2,opt,name=presence,proto3" json:"presence,omitempty"`
	// Op code value.
	OpCode int64 `protobuf:"varint,3,opt,name=op_code,json=opCode,proto3" json:"op_code,omitempty"`
	// Data payload, if any.
	Data []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	// True if this data was delivered reliably, false otherwise.
	Reliable             bool     `protobuf:"varint,5,opt,name=reliable,proto3" json:"reliable,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MatchData) Reset()         { *m = MatchData{} }
func (m *MatchData) String() string { return proto.CompactTextString(m) }
func (*MatchData) ProtoMessage()    {}
func (*MatchData) Descriptor() ([]byte, []int) {
	return fileDescriptor_0163624496220f8c, []int{12}
}

func (m *MatchData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchData.Unmarshal(m, b)
}
func (m *MatchData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchData.Marshal(b, m, deterministic)
}
func (m *MatchData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchData.Merge(m, src)
}
func (m *MatchData) XXX_Size() int {
	return xxx_messageInfo_MatchData.Size(m)
}
func (m *MatchData) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchData.DiscardUnknown(m)
}

var xxx_messageInfo_MatchData proto.InternalMessageInfo

func (m *MatchData) GetMatchId() string {
	if m != nil {
		return m.MatchId
	}
	return ""
}

func (m *MatchData) GetPresence() *UserPresence {
	if m != nil {
		return m.Presence
	}
	return nil
}

func (m *MatchData) GetOpCode() int64 {
	if m != nil {
		return m.OpCode
	}
	return 0
}

func (m *MatchData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *MatchData) GetReliable() bool {
	if m != nil {
		return m.Reliable
	}
	return false
}

// Send realtime match data to the server.
type MatchDataSend struct {
	// The match unique ID.
	MatchId string `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	// Op code value.
	OpCode int64 `protobuf:"varint,2,opt,name=op_code,json=opCode,proto3" json:"op_code,omitempty"`
	// Data payload, if any.
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// List of presences in the match to deliver to, if filtering is required. Otherwise deliver to everyone in the match.
	Presences []*UserPresence `protobuf:"bytes,4,rep,name=presences,proto3" json:"presences,omitempty"`
	// True if the data should be sent reliably, false otherwise.
	Reliable             bool     `protobuf:"varint,5,opt,name=reliable,proto3" json:"reliable,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MatchDataSend) Reset()         { *m = MatchDataSend{} }
func (m *MatchDataSend) String() string { return proto.CompactTextString(m) }
func (*MatchDataSend) ProtoMessage()    {}
func (*MatchDataSend) Descriptor() ([]byte, []int) {
	return fileDescriptor_0163624496220f8c, []int{13}
}

func (m *MatchDataSend) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchDataSend.Unmarshal(m, b)
}
func (m *MatchDataSend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchDataSend.Marshal(b, m, deterministic)
}
func (m *MatchDataSend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchDataSend.Merge(m, src)
}
func (m *MatchDataSend) XXX_Size() int {
	return xxx_messageInfo_MatchDataSend.Size(m)
}
func (m *MatchDataSend) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchDataSend.DiscardUnknown(m)
}

var xxx_messageInfo_MatchDataSend proto.InternalMessageInfo

func (m *MatchDataSend) GetMatchId() string {
	if m != nil {
		return m.MatchId
	}
	return ""
}

func (m *MatchDataSend) GetOpCode() int64 {
	if m != nil {
		return m.OpCode
	}
	return 0
}

func (m *MatchDataSend) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *MatchDataSend) GetPresences() []*UserPresence {
	if m != nil {
		return m.Presences
	}
	return nil
}

func (m *MatchDataSend) GetReliable() bool {
	if m != nil {
		return m.Reliable
	}
	return false
}

// Join an existing realtime match.
type MatchJoin struct {
	// Types that are valid to be assigned to Id:
	//	*MatchJoin_MatchId
	//	*MatchJoin_Token
	Id isMatchJoin_Id `protobuf_oneof:"id"`
	// An optional set of key-value metadata pairs to be passed to the match handler, if any.
	Metadata             map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MatchJoin) Reset()         { *m = MatchJoin{} }
func (m *MatchJoin) String() string { return proto.CompactTextString(m) }
func (*MatchJoin) ProtoMessage()    {}
func (*MatchJoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_0163624496220f8c, []int{14}
}

func (m *MatchJoin) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchJoin.Unmarshal(m, b)
}
func (m *MatchJoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchJoin.Marshal(b, m, deterministic)
}
func (m *MatchJoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchJoin.Merge(m, src)
}
func (m *MatchJoin) XXX_Size() int {
	return xxx_messageInfo_MatchJoin.Size(m)
}
func (m *MatchJoin) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchJoin.DiscardUnknown(m)
}

var xxx_messageInfo_MatchJoin proto.InternalMessageInfo

type isMatchJoin_Id interface {
	isMatchJoin_Id()
}

type MatchJoin_MatchId struct {
	MatchId string `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3,oneof"`
}

type MatchJoin_Token struct {
	Token string `protobuf:"bytes,2,opt,name=token,proto3,oneof"`
}

func (*MatchJoin_MatchId) isMatchJoin_Id() {}

func (*MatchJoin_Token) isMatchJoin_Id() {}

func (m *MatchJoin) GetId() isMatchJoin_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *MatchJoin) GetMatchId() string {
	if x, ok := m.GetId().(*MatchJoin_MatchId); ok {
		return x.MatchId
	}
	return ""
}

func (m *MatchJoin) GetToken() string {
	if x, ok := m.GetId().(*MatchJoin_Token); ok {
		return x.Token
	}
	return ""
}

func (m *MatchJoin) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MatchJoin) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MatchJoin_MatchId)(nil),
		(*MatchJoin_Token)(nil),
	}
}

// Leave a realtime match.
type MatchLeave struct {
	// The match unique ID.
	MatchId              string   `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MatchLeave) Reset()         { *m = MatchLeave{} }
func (m *MatchLeave) String() string { return proto.CompactTextString(m) }
func (*MatchLeave) ProtoMessage()    {}
func (*MatchLeave) Descriptor() ([]byte, []int) {
	return fileDescriptor_0163624496220f8c, []int{15}
}

func (m *MatchLeave) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchLeave.Unmarshal(m, b)
}
func (m *MatchLeave) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchLeave.Marshal(b, m, deterministic)
}
func (m *MatchLeave) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchLeave.Merge(m, src)
}
func (m *MatchLeave) XXX_Size() int {
	return xxx_messageInfo_MatchLeave.Size(m)
}
func (m *MatchLeave) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchLeave.DiscardUnknown(m)
}

var xxx_messageInfo_MatchLeave proto.InternalMessageInfo

func (m *MatchLeave) GetMatchId() string {
	if m != nil {
		return m.MatchId
	}
	return ""
}

// A set of joins and leaves on a particular realtime match.
type MatchPresenceEvent struct {
	// The match unique ID.
	MatchId string `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	// User presences that have just joined the match.
	Joins []*UserPresence `protobuf:"bytes,2,rep,name=joins,proto3" json:"joins,omitempty"`
	// User presences that have just left the match.
	Leaves               []*UserPresence `protobuf:"bytes,3,rep,name=leaves,proto3" json:"leaves,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *MatchPresenceEvent) Reset()         { *m = MatchPresenceEvent{} }
func (m *MatchPresenceEvent) String() string { return proto.CompactTextString(m) }
func (*MatchPresenceEvent) ProtoMessage()    {}
func (*MatchPresenceEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_0163624496220f8c, []int{16}
}

func (m *MatchPresenceEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchPresenceEvent.Unmarshal(m, b)
}
func (m *MatchPresenceEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchPresenceEvent.Marshal(b, m, deterministic)
}
func (m *MatchPresenceEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchPresenceEvent.Merge(m, src)
}
func (m *MatchPresenceEvent) XXX_Size() int {
	return xxx_messageInfo_MatchPresenceEvent.Size(m)
}
func (m *MatchPresenceEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchPresenceEvent.DiscardUnknown(m)
}

var xxx_messageInfo_MatchPresenceEvent proto.InternalMessageInfo

func (m *MatchPresenceEvent) GetMatchId() string {
	if m != nil {
		return m.MatchId
	}
	return ""
}

func (m *MatchPresenceEvent) GetJoins() []*UserPresence {
	if m != nil {
		return m.Joins
	}
	return nil
}

func (m *MatchPresenceEvent) GetLeaves() []*UserPresence {
	if m != nil {
		return m.Leaves
	}
	return nil
}

// Start a new matchmaking process.
type MatchmakerAdd struct {
	// Minimum total user count to match together.
	MinCount int32 `protobuf:"varint,1,opt,name=min_count,json=minCount,proto3" json:"min_count,omitempty"`
	// Maximum total user count to match together.
	MaxCount int32 `protobuf:"varint,2,opt,name=max_count,json=maxCount,proto3" json:"max_count,omitempty"`
	// Filter query used to identify suitable users.
	Query string `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	// String properties.
	StringProperties map[string]string `protobuf:"bytes,4,rep,name=string_properties,json=stringProperties,proto3" json:"string_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Numeric properties.
	NumericProperties    map[string]float64 `protobuf:"bytes,5,rep,name=numeric_properties,json=numericProperties,proto3" json:"numeric_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *MatchmakerAdd) Reset()         { *m = MatchmakerAdd{} }
func (m *MatchmakerAdd) String() string { return proto.CompactTextString(m) }
func (*MatchmakerAdd) ProtoMessage()    {}
func (*MatchmakerAdd) Descriptor() ([]byte, []int) {
	return fileDescriptor_0163624496220f8c, []int{17}
}

func (m *MatchmakerAdd) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchmakerAdd.Unmarshal(m, b)
}
func (m *MatchmakerAdd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchmakerAdd.Marshal(b, m, deterministic)
}
func (m *MatchmakerAdd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchmakerAdd.Merge(m, src)
}
func (m *MatchmakerAdd) XXX_Size() int {
	return xxx_messageInfo_MatchmakerAdd.Size(m)
}
func (m *MatchmakerAdd) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchmakerAdd.DiscardUnknown(m)
}

var xxx_messageInfo_MatchmakerAdd proto.InternalMessageInfo

func (m *MatchmakerAdd) GetMinCount() int32 {
	if m != nil {
		return m.MinCount
	}
	return 0
}

func (m *MatchmakerAdd) GetMaxCount() int32 {
	if m != nil {
		return m.MaxCount
	}
	return 0
}

func (m *MatchmakerAdd) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *MatchmakerAdd) GetStringProperties() map[string]string {
	if m != nil {
		return m.StringProperties
	}
	return nil
}

func (m *MatchmakerAdd) GetNumericProperties() map[string]float64 {
	if m != nil {
		return m.NumericProperties
	}
	return nil
}

// A successful matchmaking result.
type MatchmakerMatched struct {
	// The matchmaking ticket that has completed.
	Ticket string `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
	// The match token or match ID to join.
	//
	// Types that are valid to be assigned to Id:
	//	*MatchmakerMatched_MatchId
	//	*MatchmakerMatched_Token
	Id isMatchmakerMatched_Id `protobuf_oneof:"id"`
	// The users that have been matched together, and information about their matchmaking data.
	Users []*MatchmakerMatched_MatchmakerUser `protobuf:"bytes,4,rep,name=users,proto3" json:"users,omitempty"`
	// A reference to the current user and their properties.
	Self                 *MatchmakerMatched_MatchmakerUser `protobuf:"bytes,5,opt,name=self,proto3" json:"self,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *MatchmakerMatched) Reset()         { *m = MatchmakerMatched{} }
func (m *MatchmakerMatched) String() string { return proto.CompactTextString(m) }
func (*MatchmakerMatched) ProtoMessage()    {}
func (*MatchmakerMatched) Descriptor() ([]byte, []int) {
	return fileDescriptor_0163624496220f8c, []int{18}
}

func (m *MatchmakerMatched) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchmakerMatched.Unmarshal(m, b)
}
func (m *MatchmakerMatched) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchmakerMatched.Marshal(b, m, deterministic)
}
func (m *MatchmakerMatched) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchmakerMatched.Merge(m, src)
}
func (m *MatchmakerMatched) XXX_Size() int {
	return xxx_messageInfo_MatchmakerMatched.Size(m)
}
func (m *MatchmakerMatched) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchmakerMatched.DiscardUnknown(m)
}

var xxx_messageInfo_MatchmakerMatched proto.InternalMessageInfo

func (m *MatchmakerMatched) GetTicket() string {
	if m != nil {
		return m.Ticket
	}
	return ""
}

type isMatchmakerMatched_Id interface {
	isMatchmakerMatched_Id()
}

type MatchmakerMatched_MatchId struct {
	MatchId string `protobuf:"bytes,2,opt,name=match_id,json=matchId,proto3,oneof"`
}

type MatchmakerMatched_Token struct {
	Token string `protobuf:"bytes,3,opt,name=token,proto3,oneof"`
}

func (*MatchmakerMatched_MatchId) isMatchmakerMatched_Id() {}

func (*MatchmakerMatched_Token) isMatchmakerMatched_Id() {}

func (m *MatchmakerMatched) GetId() isMatchmakerMatched_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *MatchmakerMatched) GetMatchId() string {
	if x, ok := m.GetId().(*MatchmakerMatched_MatchId); ok {
		return x.MatchId
	}
	return ""
}

func (m *MatchmakerMatched) GetToken() string {
	if x, ok := m.GetId().(*MatchmakerMatched_Token); ok {
		return x.Token
	}
	return ""
}

func (m *MatchmakerMatched) GetUsers() []*MatchmakerMatched_MatchmakerUser {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *MatchmakerMatched) GetSelf() *MatchmakerMatched_MatchmakerUser {
	if m != nil {
		return m.Self
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MatchmakerMatched) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MatchmakerMatched_MatchId)(nil),
		(*MatchmakerMatched_Token)(nil),
	}
}

type MatchmakerMatched_MatchmakerUser struct {
	// User info.
	Presence *UserPresence `protobuf:"bytes,1,opt,name=presence,proto3" json:"presence,omitempty"`
	// String properties.
	StringProperties map[string]string `protobuf:"bytes,5,rep,name=string_properties,json=stringProperties,proto3" json:"string_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Numeric properties.
	NumericProperties    map[string]float64 `protobuf:"bytes,6,rep,name=numeric_properties,json=numericProperties,proto3" json:"numeric_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *MatchmakerMatched_MatchmakerUser) Reset()         { *m = MatchmakerMatched_MatchmakerUser{} }
func (m *MatchmakerMatched_MatchmakerUser) String() string { return proto.CompactTextString(m) }
func (*MatchmakerMatched_MatchmakerUser) ProtoMessage()    {}
func (*MatchmakerMatched_MatchmakerUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_0163624496220f8c, []int{18, 0}
}

func (m *MatchmakerMatched_MatchmakerUser) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchmakerMatched_MatchmakerUser.Unmarshal(m, b)
}
func (m *MatchmakerMatched_MatchmakerUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchmakerMatched_MatchmakerUser.Marshal(b, m, deterministic)
}
func (m *MatchmakerMatched_MatchmakerUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchmakerMatched_MatchmakerUser.Merge(m, src)
}
func (m *MatchmakerMatched_MatchmakerUser) XXX_Size() int {
	return xxx_messageInfo_MatchmakerMatched_MatchmakerUser.Size(m)
}
func (m *MatchmakerMatched_MatchmakerUser) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchmakerMatched_MatchmakerUser.DiscardUnknown(m)
}

var xxx_messageInfo_MatchmakerMatched_MatchmakerUser proto.InternalMessageInfo

func (m *MatchmakerMatched_MatchmakerUser) GetPresence() *UserPresence {
	if m != nil {
		return m.Presence
	}
	return nil
}

func (m *MatchmakerMatched_MatchmakerUser) GetStringProperties() map[string]string {
	if m != nil {
		return m.StringProperties
	}
	return nil
}

func (m *MatchmakerMatched_MatchmakerUser) GetNumericProperties() map[string]float64 {
	if m != nil {
		return m.NumericProperties
	}
	return nil
}

// Cancel an existing ongoing matchmaking process.
type MatchmakerRemove struct {
	// The ticket to cancel.
	Ticket               string   `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MatchmakerRemove) Reset()         { *m = MatchmakerRemove{} }
func (m *MatchmakerRemove) String() string { return proto.CompactTextString(m) }
func (*MatchmakerRemove) ProtoMessage()    {}
func (*MatchmakerRemove) Descriptor() ([]byte, []int) {
	return fileDescriptor_0163624496220f8c, []int{19}
}

func (m *MatchmakerRemove) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchmakerRemove.Unmarshal(m, b)
}
func (m *MatchmakerRemove) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchmakerRemove.Marshal(b, m, deterministic)
}
func (m *MatchmakerRemove) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchmakerRemove.Merge(m, src)
}
func (m *MatchmakerRemove) XXX_Size() int {
	return xxx_messageInfo_MatchmakerRemove.Size(m)
}
func (m *MatchmakerRemove) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchmakerRemove.DiscardUnknown(m)
}

var xxx_messageInfo_MatchmakerRemove proto.InternalMessageInfo

func (m *MatchmakerRemove) GetTicket() string {
	if m != nil {
		return m.Ticket
	}
	return ""
}

// A ticket representing a new matchmaking process.
type MatchmakerTicket struct {
	// The ticket that can be used to cancel matchmaking.
	Ticket               string   `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MatchmakerTicket) Reset()         { *m = MatchmakerTicket{} }
func (m *MatchmakerTicket) String() string { return proto.CompactTextString(m) }
func (*MatchmakerTicket) ProtoMessage()    {}
func (*MatchmakerTicket) Descriptor() ([]byte, []int) {
	return fileDescriptor_0163624496220f8c, []int{20}
}

func (m *MatchmakerTicket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchmakerTicket.Unmarshal(m, b)
}
func (m *MatchmakerTicket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchmakerTicket.Marshal(b, m, deterministic)
}
func (m *MatchmakerTicket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchmakerTicket.Merge(m, src)
}
func (m *MatchmakerTicket) XXX_Size() int {
	return xxx_messageInfo_MatchmakerTicket.Size(m)
}
func (m *MatchmakerTicket) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchmakerTicket.DiscardUnknown(m)
}

var xxx_messageInfo_MatchmakerTicket proto.InternalMessageInfo

func (m *MatchmakerTicket) GetTicket() string {
	if m != nil {
		return m.Ticket
	}
	return ""
}

// A collection of zero or more notifications.
type Notifications struct {
	// Collection of notifications.
	Notifications        []*api.Notification `protobuf:"bytes,1,rep,name=notifications,proto3" json:"notifications,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Notifications) Reset()         { *m = Notifications{} }
func (m *Notifications) String() string { return proto.CompactTextString(m) }
func (*Notifications) ProtoMessage()    {}
func (*Notifications) Descriptor() ([]byte, []int) {
	return fileDescriptor_0163624496220f8c, []int{21}
}

func (m *Notifications) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Notifications.Unmarshal(m, b)
}
func (m *Notifications) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Notifications.Marshal(b, m, deterministic)
}
func (m *Notifications) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Notifications.Merge(m, src)
}
func (m *Notifications) XXX_Size() int {
	return xxx_messageInfo_Notifications.Size(m)
}
func (m *Notifications) XXX_DiscardUnknown() {
	xxx_messageInfo_Notifications.DiscardUnknown(m)
}

var xxx_messageInfo_Notifications proto.InternalMessageInfo

func (m *Notifications) GetNotifications() []*api.Notification {
	if m != nil {
		return m.Notifications
	}
	return nil
}

// Application-level heartbeat and connection check.
type Ping struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ping) Reset()         { *m = Ping{} }
func (m *Ping) String() string { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()    {}
func (*Ping) Descriptor() ([]byte, []int) {
	return fileDescriptor_0163624496220f8c, []int{22}
}

func (m *Ping) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ping.Unmarshal(m, b)
}
func (m *Ping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ping.Marshal(b, m, deterministic)
}
func (m *Ping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ping.Merge(m, src)
}
func (m *Ping) XXX_Size() int {
	return xxx_messageInfo_Ping.Size(m)
}
func (m *Ping) XXX_DiscardUnknown() {
	xxx_messageInfo_Ping.DiscardUnknown(m)
}

var xxx_messageInfo_Ping proto.InternalMessageInfo

// Application-level heartbeat and connection check response.
type Pong struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pong) Reset()         { *m = Pong{} }
func (m *Pong) String() string { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()    {}
func (*Pong) Descriptor() ([]byte, []int) {
	return fileDescriptor_0163624496220f8c, []int{23}
}

func (m *Pong) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pong.Unmarshal(m, b)
}
func (m *Pong) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pong.Marshal(b, m, deterministic)
}
func (m *Pong) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pong.Merge(m, src)
}
func (m *Pong) XXX_Size() int {
	return xxx_messageInfo_Pong.Size(m)
}
func (m *Pong) XXX_DiscardUnknown() {
	xxx_messageInfo_Pong.DiscardUnknown(m)
}

var xxx_messageInfo_Pong proto.InternalMessageInfo

// A snapshot of statuses for some set of users.
type Status struct {
	// User statuses.
	Presences            []*UserPresence `protobuf:"bytes,1,rep,name=presences,proto3" json:"presences,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_0163624496220f8c, []int{24}
}

func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetPresences() []*UserPresence {
	if m != nil {
		return m.Presences
	}
	return nil
}

// Start receiving status updates for some set of users.
type StatusFollow struct {
	// User IDs to follow.
	UserIds []string `protobuf:"bytes,1,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	// Usernames to follow.
	Usernames            []string `protobuf:"bytes,2,rep,name=usernames,proto3" json:"usernames,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusFollow) Reset()         { *m = StatusFollow{} }
func (m *StatusFollow) String() string { return proto.CompactTextString(m) }
func (*StatusFollow) ProtoMessage()    {}
func (*StatusFollow) Descriptor() ([]byte, []int) {
	return fileDescriptor_0163624496220f8c, []int{25}
}

func (m *StatusFollow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatusFollow.Unmarshal(m, b)
}
func (m *StatusFollow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatusFollow.Marshal(b, m, deterministic)
}
func (m *StatusFollow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusFollow.Merge(m, src)
}
func (m *StatusFollow) XXX_Size() int {
	return xxx_messageInfo_StatusFollow.Size(m)
}
func (m *StatusFollow) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusFollow.DiscardUnknown(m)
}

var xxx_messageInfo_StatusFollow proto.InternalMessageInfo

func (m *StatusFollow) GetUserIds() []string {
	if m != nil {
		return m.UserIds
	}
	return nil
}

func (m *StatusFollow) GetUsernames() []string {
	if m != nil {
		return m.Usernames
	}
	return nil
}

// A batch of status updates for a given user.
type StatusPresenceEvent struct {
	// New statuses for the user.
	Joins []*UserPresence `protobuf:"bytes,2,rep,name=joins,proto3" json:"joins,omitempty"`
	// Previous statuses for the user.
	Leaves               []*UserPresence `protobuf:"bytes,3,rep,name=leaves,proto3" json:"leaves,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *StatusPresenceEvent) Reset()         { *m = StatusPresenceEvent{} }
func (m *StatusPresenceEvent) String() string { return proto.CompactTextString(m) }
func (*StatusPresenceEvent) ProtoMessage()    {}
func (*StatusPresenceEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_0163624496220f8c, []int{26}
}

func (m *StatusPresenceEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatusPresenceEvent.Unmarshal(m, b)
}
func (m *StatusPresenceEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatusPresenceEvent.Marshal(b, m, deterministic)
}
func (m *StatusPresenceEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusPresenceEvent.Merge(m, src)
}
func (m *StatusPresenceEvent) XXX_Size() int {
	return xxx_messageInfo_StatusPresenceEvent.Size(m)
}
func (m *StatusPresenceEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusPresenceEvent.DiscardUnknown(m)
}

var xxx_messageInfo_StatusPresenceEvent proto.InternalMessageInfo

func (m *StatusPresenceEvent) GetJoins() []*UserPresence {
	if m != nil {
		return m.Joins
	}
	return nil
}

func (m *StatusPresenceEvent) GetLeaves() []*UserPresence {
	if m != nil {
		return m.Leaves
	}
	return nil
}

// Stop receiving status updates for some set of users.
type StatusUnfollow struct {
	// Users to unfollow.
	UserIds              []string `protobuf:"bytes,1,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusUnfollow) Reset()         { *m = StatusUnfollow{} }
func (m *StatusUnfollow) String() string { return proto.CompactTextString(m) }
func (*StatusUnfollow) ProtoMessage()    {}
func (*StatusUnfollow) Descriptor() ([]byte, []int) {
	return fileDescriptor_0163624496220f8c, []int{27}
}

func (m *StatusUnfollow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatusUnfollow.Unmarshal(m, b)
}
func (m *StatusUnfollow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatusUnfollow.Marshal(b, m, deterministic)
}
func (m *StatusUnfollow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusUnfollow.Merge(m, src)
}
func (m *StatusUnfollow) XXX_Size() int {
	return xxx_messageInfo_StatusUnfollow.Size(m)
}
func (m *StatusUnfollow) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusUnfollow.DiscardUnknown(m)
}

var xxx_messageInfo_StatusUnfollow proto.InternalMessageInfo

func (m *StatusUnfollow) GetUserIds() []string {
	if m != nil {
		return m.UserIds
	}
	return nil
}

// Set the user's own status.
type StatusUpdate struct {
	// Status string to set, if not present the user will appear offline.
	Status               *wrappers.StringValue `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *StatusUpdate) Reset()         { *m = StatusUpdate{} }
func (m *StatusUpdate) String() string { return proto.CompactTextString(m) }
func (*StatusUpdate) ProtoMessage()    {}
func (*StatusUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0163624496220f8c, []int{28}
}

func (m *StatusUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatusUpdate.Unmarshal(m, b)
}
func (m *StatusUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatusUpdate.Marshal(b, m, deterministic)
}
func (m *StatusUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusUpdate.Merge(m, src)
}
func (m *StatusUpdate) XXX_Size() int {
	return xxx_messageInfo_StatusUpdate.Size(m)
}
func (m *StatusUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_StatusUpdate proto.InternalMessageInfo

func (m *StatusUpdate) GetStatus() *wrappers.StringValue {
	if m != nil {
		return m.Status
	}
	return nil
}

// Represents identifying information for a stream.
type Stream struct {
	// Mode identifies the type of stream.
	Mode int32 `protobuf:"varint,1,opt,name=mode,proto3" json:"mode,omitempty"`
	// Subject is the primary identifier, if any.
	Subject string `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	// Subcontext is a secondary identifier, if any.
	Subcontext string `protobuf:"bytes,3,opt,name=subcontext,proto3" json:"subcontext,omitempty"`
	// The label is an arbitrary identifying string, if the stream has one.
	Label                string   `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Stream) Reset()         { *m = Stream{} }
func (m *Stream) String() string { return proto.CompactTextString(m) }
func (*Stream) ProtoMessage()    {}
func (*Stream) Descriptor() ([]byte, []int) {
	return fileDescriptor_0163624496220f8c, []int{29}
}

func (m *Stream) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Stream.Unmarshal(m, b)
}
func (m *Stream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Stream.Marshal(b, m, deterministic)
}
func (m *Stream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stream.Merge(m, src)
}
func (m *Stream) XXX_Size() int {
	return xxx_messageInfo_Stream.Size(m)
}
func (m *Stream) XXX_DiscardUnknown() {
	xxx_messageInfo_Stream.DiscardUnknown(m)
}

var xxx_messageInfo_Stream proto.InternalMessageInfo

func (m *Stream) GetMode() int32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *Stream) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *Stream) GetSubcontext() string {
	if m != nil {
		return m.Subcontext
	}
	return ""
}

func (m *Stream) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

// A data message delivered over a stream.
type StreamData struct {
	// The stream this data message relates to.
	Stream *Stream `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	// The sender, if any.
	Sender *UserPresence `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	// Arbitrary contents of the data message.
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// True if this data was delivered reliably, false otherwise.
	Reliable             bool     `protobuf:"varint,4,opt,name=reliable,proto3" json:"reliable,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamData) Reset()         { *m = StreamData{} }
func (m *StreamData) String() string { return proto.CompactTextString(m) }
func (*StreamData) ProtoMessage()    {}
func (*StreamData) Descriptor() ([]byte, []int) {
	return fileDescriptor_0163624496220f8c, []int{30}
}

func (m *StreamData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamData.Unmarshal(m, b)
}
func (m *StreamData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamData.Marshal(b, m, deterministic)
}
func (m *StreamData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamData.Merge(m, src)
}
func (m *StreamData) XXX_Size() int {
	return xxx_messageInfo_StreamData.Size(m)
}
func (m *StreamData) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamData.DiscardUnknown(m)
}

var xxx_messageInfo_StreamData proto.InternalMessageInfo

func (m *StreamData) GetStream() *Stream {
	if m != nil {
		return m.Stream
	}
	return nil
}

func (m *StreamData) GetSender() *UserPresence {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *StreamData) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *StreamData) GetReliable() bool {
	if m != nil {
		return m.Reliable
	}
	return false
}

// A set of joins and leaves on a particular stream.
type StreamPresenceEvent struct {
	// The stream this event relates to.
	Stream *Stream `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	// Presences joining the stream as part of this event, if any.
	Joins []*UserPresence `protobuf:"bytes,2,rep,name=joins,proto3" json:"joins,omitempty"`
	// Presences leaving the stream as part of this event, if any.
	Leaves               []*UserPresence `protobuf:"bytes,3,rep,name=leaves,proto3" json:"leaves,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *StreamPresenceEvent) Reset()         { *m = StreamPresenceEvent{} }
func (m *StreamPresenceEvent) String() string { return proto.CompactTextString(m) }
func (*StreamPresenceEvent) ProtoMessage()    {}
func (*StreamPresenceEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_0163624496220f8c, []int{31}
}

func (m *StreamPresenceEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamPresenceEvent.Unmarshal(m, b)
}
func (m *StreamPresenceEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamPresenceEvent.Marshal(b, m, deterministic)
}
func (m *StreamPresenceEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamPresenceEvent.Merge(m, src)
}
func (m *StreamPresenceEvent) XXX_Size() int {
	return xxx_messageInfo_StreamPresenceEvent.Size(m)
}
func (m *StreamPresenceEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamPresenceEvent.DiscardUnknown(m)
}

var xxx_messageInfo_StreamPresenceEvent proto.InternalMessageInfo

func (m *StreamPresenceEvent) GetStream() *Stream {
	if m != nil {
		return m.Stream
	}
	return nil
}

func (m *StreamPresenceEvent) GetJoins() []*UserPresence {
	if m != nil {
		return m.Joins
	}
	return nil
}

func (m *StreamPresenceEvent) GetLeaves() []*UserPresence {
	if m != nil {
		return m.Leaves
	}
	return nil
}

// A user session associated to a stream, usually through a list operation or a join/leave event.
type UserPresence struct {
	// The user this presence belongs to.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// A unique session ID identifying the particular connection, because the user may have many.
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// The username for display purposes.
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	// Whether this presence generates persistent data/messages, if applicable for the stream type.
	Persistence bool `protobuf:"varint,4,opt,name=persistence,proto3" json:"persistence,omitempty"`
	// A user-set status message for this stream, if applicable.
	Status               *wrappers.StringValue `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UserPresence) Reset()         { *m = UserPresence{} }
func (m *UserPresence) String() string { return proto.CompactTextString(m) }
func (*UserPresence) ProtoMessage()    {}
func (*UserPresence) Descriptor() ([]byte, []int) {
	return fileDescriptor_0163624496220f8c, []int{32}
}

func (m *UserPresence) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserPresence.Unmarshal(m, b)
}
func (m *UserPresence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserPresence.Marshal(b, m, deterministic)
}
func (m *UserPresence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserPresence.Merge(m, src)
}
func (m *UserPresence) XXX_Size() int {
	return xxx_messageInfo_UserPresence.Size(m)
}
func (m *UserPresence) XXX_DiscardUnknown() {
	xxx_messageInfo_UserPresence.DiscardUnknown(m)
}

var xxx_messageInfo_UserPresence proto.InternalMessageInfo

func (m *UserPresence) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UserPresence) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *UserPresence) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UserPresence) GetPersistence() bool {
	if m != nil {
		return m.Persistence
	}
	return false
}

func (m *UserPresence) GetStatus() *wrappers.StringValue {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterEnum("nakama.realtime.ChannelJoin_Type", ChannelJoin_Type_name, ChannelJoin_Type_value)
	proto.RegisterEnum("nakama.realtime.Error_Code", Error_Code_name, Error_Code_value)
	proto.RegisterType((*Envelope)(nil), "nakama.realtime.Envelope")
	proto.RegisterType((*Channel)(nil), "nakama.realtime.Channel")
	proto.RegisterType((*ChannelJoin)(nil), "nakama.realtime.ChannelJoin")
	proto.RegisterType((*ChannelLeave)(nil), "nakama.realtime.ChannelLeave")
	proto.RegisterType((*ChannelMessageAck)(nil), "nakama.realtime.ChannelMessageAck")
	proto.RegisterType((*ChannelMessageSend)(nil), "nakama.realtime.ChannelMessageSend")
	proto.RegisterType((*ChannelMessageUpdate)(nil), "nakama.realtime.ChannelMessageUpdate")
	proto.RegisterType((*ChannelMessageRemove)(nil), "nakama.realtime.ChannelMessageRemove")
	proto.RegisterType((*ChannelPresenceEvent)(nil), "nakama.realtime.ChannelPresenceEvent")
	proto.RegisterType((*Error)(nil), "nakama.realtime.Error")
	proto.RegisterMapType((map[string]string)(nil), "nakama.realtime.Error.ContextEntry")
	proto.RegisterType((*Match)(nil), "nakama.realtime.Match")
	proto.RegisterType((*MatchCreate)(nil), "nakama.realtime.MatchCreate")
	proto.RegisterType((*MatchData)(nil), "nakama.realtime.MatchData")
	proto.RegisterType((*MatchDataSend)(nil), "nakama.realtime.MatchDataSend")
	proto.RegisterType((*MatchJoin)(nil), "nakama.realtime.MatchJoin")
	proto.RegisterMapType((map[string]string)(nil), "nakama.realtime.MatchJoin.MetadataEntry")
	proto.RegisterType((*MatchLeave)(nil), "nakama.realtime.MatchLeave")
	proto.RegisterType((*MatchPresenceEvent)(nil), "nakama.realtime.MatchPresenceEvent")
	proto.RegisterType((*MatchmakerAdd)(nil), "nakama.realtime.MatchmakerAdd")
	proto.RegisterMapType((map[string]float64)(nil), "nakama.realtime.MatchmakerAdd.NumericPropertiesEntry")
	proto.RegisterMapType((map[string]string)(nil), "nakama.realtime.MatchmakerAdd.StringPropertiesEntry")
	proto.RegisterType((*MatchmakerMatched)(nil), "nakama.realtime.MatchmakerMatched")
	proto.RegisterType((*MatchmakerMatched_MatchmakerUser)(nil), "nakama.realtime.MatchmakerMatched.MatchmakerUser")
	proto.RegisterMapType((map[string]float64)(nil), "nakama.realtime.MatchmakerMatched.MatchmakerUser.NumericPropertiesEntry")
	proto.RegisterMapType((map[string]string)(nil), "nakama.realtime.MatchmakerMatched.MatchmakerUser.StringPropertiesEntry")
	proto.RegisterType((*MatchmakerRemove)(nil), "nakama.realtime.MatchmakerRemove")
	proto.RegisterType((*MatchmakerTicket)(nil), "nakama.realtime.MatchmakerTicket")
	proto.RegisterType((*Notifications)(nil), "nakama.realtime.Notifications")
	proto.RegisterType((*Ping)(nil), "nakama.realtime.Ping")
	proto.RegisterType((*Pong)(nil), "nakama.realtime.Pong")
	proto.RegisterType((*Status)(nil), "nakama.realtime.Status")
	proto.RegisterType((*StatusFollow)(nil), "nakama.realtime.StatusFollow")
	proto.RegisterType((*StatusPresenceEvent)(nil), "nakama.realtime.StatusPresenceEvent")
	proto.RegisterType((*StatusUnfollow)(nil), "nakama.realtime.StatusUnfollow")
	proto.RegisterType((*StatusUpdate)(nil), "nakama.realtime.StatusUpdate")
	proto.RegisterType((*Stream)(nil), "nakama.realtime.Stream")
	proto.RegisterType((*StreamData)(nil), "nakama.realtime.StreamData")
	proto.RegisterType((*StreamPresenceEvent)(nil), "nakama.realtime.StreamPresenceEvent")
	proto.RegisterType((*UserPresence)(nil), "nakama.realtime.UserPresence")
}

func init() { proto.RegisterFile("rtapi/realtime.proto", fileDescriptor_0163624496220f8c) }

var fileDescriptor_0163624496220f8c = []byte{
	// 2320 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x59, 0x4b, 0x6f, 0xdb, 0xd8,
	0xf5, 0x17, 0xf5, 0xb2, 0x78, 0xfc, 0x92, 0xaf, 0x1d, 0x87, 0x23, 0x27, 0x4e, 0x86, 0x99, 0x3f,
	0xfe, 0x41, 0x07, 0x23, 0x23, 0x8f, 0x01, 0xda, 0xa4, 0x0d, 0x60, 0x4b, 0xb4, 0xa5, 0x74, 0x2c,
	0x09, 0xb4, 0xd4, 0xe9, 0x04, 0x28, 0x08, 0x9a, 0xbc, 0x91, 0x39, 0x16, 0x49, 0x95, 0xa4, 0x9c,
	0xb8, 0xab, 0xce, 0xa2, 0x1f, 0xa2, 0xe8, 0xae, 0xe8, 0x6a, 0x56, 0x45, 0xbb, 0xeb, 0xa2, 0xbb,
	0x2e, 0x06, 0xe8, 0xa7, 0xe9, 0xba, 0x8b, 0xe2, 0x3e, 0x48, 0x91, 0x94, 0x28, 0xd9, 0x33, 0x40,
	0x8a, 0xae, 0xc4, 0x7b, 0xee, 0xef, 0xfc, 0xee, 0xeb, 0xdc, 0x73, 0xcf, 0x39, 0x82, 0x1d, 0x2f,
	0xd0, 0xc7, 0xd6, 0x81, 0x87, 0xf5, 0x51, 0x60, 0xd9, 0xb8, 0x3e, 0xf6, 0xdc, 0xc0, 0x45, 0x9b,
	0x8e, 0x7e, 0xa9, 0xdb, 0x7a, 0x3d, 0x14, 0xd7, 0x1e, 0x0c, 0x5d, 0x77, 0x38, 0xc2, 0x07, 0xb4,
	0xfb, 0x7c, 0xf2, 0xf6, 0x80, 0x48, 0xfd, 0x40, 0xb7, 0xc7, 0x4c, 0xa3, 0xb6, 0x9f, 0x06, 0xbc,
	0xf3, 0xf4, 0xf1, 0x18, 0x7b, 0x3e, 0xef, 0x7f, 0x32, 0xb4, 0x82, 0x8b, 0xc9, 0x79, 0xdd, 0x70,
	0xed, 0x83, 0x0b, 0xec, 0xb9, 0x96, 0x31, 0xd2, 0xcf, 0xfd, 0x03, 0x36, 0xce, 0x67, 0x86, 0x6b,
	0xdb, 0xae, 0x73, 0x40, 0x66, 0xa2, 0x8f, 0x2d, 0xa6, 0x22, 0xff, 0x0e, 0x41, 0x45, 0x71, 0xae,
	0xf0, 0xc8, 0x1d, 0x63, 0x54, 0x85, 0x82, 0x61, 0x99, 0x92, 0xf0, 0x50, 0x78, 0x2c, 0xaa, 0xe4,
	0x13, 0x3d, 0x87, 0x15, 0xe3, 0x42, 0x77, 0x1c, 0x3c, 0x92, 0xf2, 0x0f, 0x85, 0xc7, 0xab, 0x4f,
	0xa5, 0x7a, 0x6a, 0xd6, 0xf5, 0x06, 0xeb, 0x6f, 0xe5, 0xd4, 0x10, 0x8a, 0x0e, 0x61, 0x8d, 0x7f,
	0x6a, 0x5f, 0xbb, 0x96, 0x23, 0x15, 0xa8, 0xea, 0xbd, 0x2c, 0xd5, 0xd7, 0xae, 0xe5, 0xb4, 0x72,
	0xea, 0xaa, 0x31, 0x6d, 0xa2, 0x26, 0xac, 0x87, 0x14, 0x23, 0xac, 0x5f, 0x61, 0xa9, 0x48, 0x39,
	0xee, 0x67, 0x71, 0x7c, 0x41, 0x40, 0xad, 0x9c, 0x1a, 0x0e, 0x4c, 0xdb, 0x48, 0x81, 0xcd, 0x90,
	0xc5, 0xc6, 0xbe, 0xaf, 0x0f, 0xb1, 0x54, 0xa2, 0x3c, 0xb5, 0x90, 0x87, 0xec, 0x04, 0xa7, 0x38,
	0x65, 0x88, 0x56, 0x4e, 0xdd, 0x30, 0x12, 0x12, 0xd4, 0x87, 0xed, 0x14, 0x8d, 0xa6, 0x1b, 0x97,
	0x52, 0x99, 0x52, 0xc9, 0x59, 0x53, 0xe2, 0xda, 0x87, 0xc6, 0x65, 0x2b, 0xa7, 0x6e, 0x19, 0x69,
	0x21, 0xfa, 0x12, 0x76, 0xd2, 0xac, 0x3e, 0x76, 0x4c, 0x69, 0x85, 0xd2, 0x3e, 0x5a, 0x42, 0x7b,
	0x86, 0x1d, 0xb3, 0x95, 0x53, 0x91, 0x31, 0x23, 0x45, 0xbf, 0x82, 0xdd, 0x34, 0xf1, 0x64, 0x6c,
	0xea, 0x01, 0x96, 0x2a, 0x94, 0xfa, 0xff, 0x96, 0x50, 0x0f, 0x28, 0xb8, 0x95, 0x53, 0x77, 0x8c,
	0x39, 0xf2, 0x79, 0xf4, 0x1e, 0xb6, 0xdd, 0x2b, 0x2c, 0x89, 0x37, 0xa2, 0x57, 0x29, 0x78, 0x96,
	0x9e, 0xc9, 0xe3, 0xf4, 0x63, 0x0f, 0xfb, 0xd8, 0x31, 0xb0, 0x86, 0xaf, 0xb0, 0x13, 0x48, 0xb0,
	0x98, 0xbe, 0xc7, 0xd1, 0x0a, 0x01, 0xc7, 0xe8, 0x13, 0x72, 0x54, 0x87, 0x12, 0xf6, 0x3c, 0xd7,
	0x93, 0x56, 0x29, 0xdb, 0xee, 0x0c, 0x9b, 0x42, 0x7a, 0x5b, 0x39, 0x95, 0xc1, 0x08, 0xde, 0xd6,
	0x03, 0xe3, 0x42, 0x5a, 0xcb, 0xc0, 0x9f, 0x92, 0x5e, 0x82, 0xa7, 0x30, 0x62, 0xfb, 0xf4, 0x43,
	0x33, 0x3c, 0x4c, 0xb6, 0x7c, 0x3d, 0xc3, 0xf6, 0xa9, 0x5a, 0x83, 0x62, 0x88, 0xed, 0xdb, 0xd3,
	0x26, 0x7a, 0x09, 0xc0, 0x28, 0x4c, 0x3d, 0xd0, 0xa5, 0x8d, 0xa4, 0xc1, 0x26, 0x09, 0x9a, 0x7a,
	0xa0, 0xb7, 0x72, 0xaa, 0x68, 0x87, 0x0d, 0xd4, 0x82, 0xcd, 0xa9, 0x32, 0x33, 0xa8, 0x4d, 0xca,
	0xb0, 0x9f, 0xcd, 0xc0, 0x6d, 0x69, 0xdd, 0x8e, 0x0b, 0xa6, 0xd3, 0xa0, 0x77, 0xb8, 0xba, 0x68,
	0x1a, 0xfc, 0x06, 0xb3, 0x69, 0xd0, 0xfb, 0xfb, 0x0a, 0xd8, 0x92, 0xf8, 0xed, 0xdd, 0xa2, 0xda,
	0x7b, 0xf3, 0xb5, 0xc3, 0xbb, 0xcb, 0x86, 0x63, 0x37, 0xf7, 0x4b, 0xd8, 0x61, 0xfa, 0x29, 0x1b,
	0x40, 0x19, 0x97, 0x83, 0x12, 0xa5, 0x2d, 0x00, 0xd9, 0x33, 0x52, 0x74, 0x02, 0x1b, 0x54, 0x6a,
	0xeb, 0x97, 0xd8, 0xd3, 0x74, 0xd3, 0x94, 0xb6, 0x17, 0x6d, 0x0f, 0x85, 0x1d, 0x9a, 0xd3, 0xed,
	0x09, 0x05, 0xe8, 0x0c, 0x50, 0x8c, 0x88, 0x7e, 0x62, 0x53, 0xda, 0xc9, 0xf0, 0x09, 0x53, 0xb2,
	0x53, 0x86, 0x24, 0x3e, 0xc1, 0x4e, 0x0b, 0x51, 0x0f, 0x62, 0xc2, 0xf0, 0x5a, 0xdd, 0xa1, 0x9c,
	0x1f, 0x2f, 0xe0, 0x8c, 0xae, 0x54, 0xd5, 0x4e, 0xc9, 0x52, 0x8c, 0x81, 0x65, 0x5c, 0xe2, 0x40,
	0xda, 0x5d, 0xca, 0xd8, 0xa7, 0xc0, 0x24, 0x23, 0x93, 0xa1, 0x63, 0x58, 0x77, 0xdc, 0xc0, 0x7a,
	0x6b, 0x19, 0x7a, 0x60, 0xb9, 0x8e, 0x2f, 0xdd, 0xcd, 0xd8, 0xc0, 0x4e, 0x1c, 0x45, 0x36, 0x30,
	0xa1, 0x86, 0x1e, 0x41, 0xc1, 0x1b, 0x1b, 0x92, 0x44, 0xb5, 0x37, 0xe3, 0x0e, 0x59, 0x1d, 0x1b,
	0xad, 0x9c, 0x4a, 0x7a, 0xd1, 0x13, 0x28, 0xfb, 0x81, 0x1e, 0x4c, 0x7c, 0xe9, 0x23, 0x8a, 0xbb,
	0x3b, 0x33, 0xca, 0x19, 0xed, 0x6e, 0xe5, 0x54, 0x0e, 0x24, 0x4f, 0x07, 0xfb, 0xd2, 0xde, 0xba,
	0xa3, 0x91, 0xfb, 0x4e, 0xaa, 0x65, 0x3c, 0x1d, 0x4c, 0xf3, 0x98, 0x82, 0xc8, 0xd3, 0xe1, 0xc7,
	0xda, 0xe8, 0x0d, 0xdc, 0xe1, 0x2c, 0x29, 0x0b, 0xdc, 0xa3, 0x6c, 0x9f, 0x64, 0xb0, 0xa5, 0x4d,
	0x70, 0xdb, 0x9f, 0x15, 0xa3, 0xd7, 0xb0, 0xc9, 0xb9, 0x27, 0x0e, 0x9f, 0xe3, 0x3d, 0xca, 0xfa,
	0x20, 0x83, 0x75, 0xc0, 0x61, 0xe4, 0x6d, 0xf2, 0x13, 0x92, 0xd8, 0x6a, 0xb9, 0x8f, 0xbf, 0xbf,
	0x70, 0xb5, 0x91, 0x6f, 0xe7, 0xab, 0xe5, 0x3e, 0xfd, 0x15, 0xac, 0xfa, 0x81, 0x87, 0x75, 0x9b,
	0xf9, 0x9c, 0xfd, 0x8c, 0xeb, 0x7a, 0x46, 0x31, 0xdc, 0xe9, 0x80, 0x1f, 0xb5, 0xd8, 0x6e, 0x51,
	0xfd, 0xd4, 0x6e, 0x3d, 0xc8, 0xdc, 0x2d, 0x82, 0x9e, 0xb3, 0x5b, 0x33, 0x62, 0xf4, 0x29, 0x14,
	0xc7, 0x96, 0x33, 0x94, 0x1e, 0x52, 0xaa, 0x3b, 0x33, 0x54, 0x3d, 0xcb, 0x19, 0xb6, 0x72, 0x2a,
	0x05, 0x51, 0xb0, 0xeb, 0x0c, 0xa5, 0x8f, 0xb3, 0xc0, 0x2e, 0x07, 0xbb, 0xce, 0xf0, 0x48, 0x84,
	0x15, 0xfe, 0x82, 0xc9, 0xdf, 0xe4, 0x61, 0x85, 0xbf, 0x23, 0x68, 0x03, 0xf2, 0x51, 0x14, 0x94,
	0xb7, 0x88, 0x23, 0x14, 0xc3, 0x55, 0xf9, 0x52, 0xfe, 0x61, 0x61, 0xee, 0xf6, 0x0e, 0x7c, 0xec,
	0x85, 0xf3, 0x56, 0xa7, 0x78, 0xf4, 0x04, 0x8a, 0x3e, 0x1e, 0xbd, 0xe5, 0x31, 0xd0, 0x12, 0x3d,
	0x0a, 0x45, 0x7b, 0x20, 0x7a, 0xae, 0x6b, 0x6b, 0x8e, 0x6e, 0xb3, 0xb8, 0x47, 0x54, 0x2b, 0x44,
	0xd0, 0xd1, 0x6d, 0x8c, 0x3e, 0x82, 0xca, 0xd0, 0x73, 0x27, 0x63, 0xcd, 0x32, 0x69, 0x2c, 0x23,
	0xaa, 0x2b, 0xb4, 0xdd, 0x36, 0xd1, 0x3e, 0xac, 0x4e, 0x7c, 0xec, 0x69, 0x96, 0xa9, 0xb9, 0x0e,
	0xa6, 0xe1, 0x89, 0xa8, 0x8a, 0x44, 0xd4, 0x36, 0xbb, 0x0e, 0x8e, 0xf7, 0x07, 0xef, 0x5c, 0x1a,
	0x67, 0x44, 0xfd, 0xfd, 0x77, 0xae, 0xfc, 0x2f, 0x01, 0x56, 0x63, 0x21, 0x19, 0xda, 0x85, 0x72,
	0xa0, 0x7b, 0x43, 0x1c, 0xf0, 0xbd, 0xe0, 0x2d, 0x84, 0xa0, 0x18, 0x5c, 0x8f, 0x31, 0x8d, 0x08,
	0x4b, 0x2a, 0xfd, 0x46, 0x3f, 0x85, 0x55, 0x12, 0x88, 0x5a, 0x7e, 0x40, 0x16, 0xc2, 0x57, 0x5b,
	0xab, 0xb3, 0x80, 0xb5, 0x1e, 0x06, 0xac, 0xf5, 0x23, 0xd7, 0x1d, 0xfd, 0x42, 0x1f, 0x4d, 0xb0,
	0x1a, 0x87, 0xa3, 0xa7, 0x50, 0xbe, 0xb0, 0x4c, 0x13, 0x3b, 0x3c, 0xcc, 0x5b, 0xa4, 0xc8, 0x91,
	0xb2, 0x02, 0xc5, 0x3e, 0x19, 0x79, 0x07, 0xaa, 0xfd, 0xaf, 0x7a, 0x8a, 0x36, 0xe8, 0x9c, 0xf5,
	0x94, 0x46, 0xfb, 0xb8, 0xad, 0x34, 0xab, 0x39, 0x54, 0x81, 0xa2, 0xda, 0xed, 0x9e, 0x56, 0x05,
	0x84, 0x60, 0xa3, 0xd9, 0x56, 0x95, 0x46, 0x5f, 0x3b, 0x55, 0xce, 0xce, 0x0e, 0x4f, 0x94, 0x6a,
	0x1e, 0x89, 0x50, 0x3a, 0x51, 0xbb, 0x83, 0x5e, 0xb5, 0x20, 0x7f, 0x06, 0x6b, 0xf1, 0x10, 0x12,
	0xdd, 0x07, 0x08, 0xc3, 0x8f, 0xc8, 0x08, 0x44, 0x2e, 0x69, 0x9b, 0xf2, 0x3f, 0x0b, 0xb0, 0x35,
	0x13, 0xdf, 0x2d, 0x51, 0x22, 0xdd, 0x61, 0xa4, 0x64, 0x99, 0x74, 0xdb, 0x44, 0x55, 0xe4, 0x92,
	0xb6, 0x89, 0x0e, 0xa0, 0x68, 0xb8, 0x66, 0xb8, 0x69, 0x7b, 0x33, 0x6b, 0x6f, 0x3b, 0xc1, 0xb3,
	0xa7, 0x6c, 0xf1, 0x14, 0x88, 0x6a, 0x50, 0x21, 0xa7, 0x16, 0xb7, 0x8f, 0xb0, 0x8d, 0x5e, 0xc2,
	0x2a, 0x8b, 0x3c, 0x34, 0x62, 0x5e, 0x51, 0xb8, 0x9b, 0xe6, 0xec, 0x87, 0xa9, 0x85, 0x0a, 0x0c,
	0x4e, 0x04, 0x44, 0x99, 0x79, 0x11, 0xa6, 0x5c, 0x5e, 0xae, 0xcc, 0xe0, 0x54, 0xf9, 0x05, 0x40,
	0x74, 0xa6, 0x01, 0x8f, 0x62, 0x17, 0x1d, 0x64, 0x0c, 0x9d, 0x34, 0xf9, 0xca, 0x02, 0x93, 0x17,
	0x17, 0x9a, 0x3c, 0x2c, 0x31, 0xf9, 0xd5, 0xb4, 0xc9, 0x9f, 0x02, 0x9a, 0x0d, 0xab, 0x97, 0x1d,
	0xa7, 0x04, 0x2b, 0x86, 0xeb, 0xd0, 0x55, 0xb2, 0xb3, 0x0c, 0x9b, 0xb2, 0x03, 0x3b, 0xf3, 0x42,
	0xe9, 0x1f, 0x68, 0x1f, 0xb1, 0xf1, 0x0a, 0xc9, 0xf1, 0xfa, 0xe9, 0xf1, 0xf8, 0xa3, 0xff, 0x83,
	0xc6, 0x93, 0x7f, 0x9f, 0x8f, 0x68, 0x93, 0x9e, 0x78, 0x09, 0xed, 0x33, 0x28, 0x91, 0x50, 0xf1,
	0x86, 0x3e, 0x92, 0x61, 0xd1, 0xe7, 0x50, 0xa6, 0x21, 0xa2, 0x2f, 0x15, 0x6e, 0xa2, 0xc5, 0xc1,
	0xff, 0x35, 0x1f, 0xf9, 0xef, 0x3c, 0x94, 0x68, 0x86, 0x40, 0xbc, 0x20, 0xbd, 0xb5, 0x02, 0xf3,
	0x82, 0xf4, 0x62, 0x4a, 0xd1, 0x83, 0x12, 0x5a, 0x06, 0x6f, 0xa2, 0x9f, 0xf1, 0x33, 0x7c, 0x1f,
	0xf0, 0x75, 0x3e, 0x9a, 0x9f, 0x78, 0xd4, 0x1b, 0x0c, 0xa5, 0x38, 0x81, 0x77, 0xad, 0x86, 0x3a,
	0xb5, 0x17, 0xb0, 0x16, 0xef, 0x20, 0x99, 0xfa, 0x25, 0xbe, 0x0e, 0x33, 0xf5, 0x4b, 0x7c, 0x8d,
	0x76, 0xa0, 0x74, 0x45, 0xae, 0x15, 0x1f, 0x98, 0x35, 0x5e, 0xe4, 0x7f, 0x2c, 0xc8, 0xdf, 0x09,
	0x50, 0x6c, 0x90, 0xd9, 0xdd, 0x81, 0x2d, 0x75, 0xd0, 0xe9, 0xb7, 0x4f, 0x15, 0x4d, 0xf9, 0x65,
	0x43, 0xe9, 0xf5, 0xdb, 0xdd, 0x4e, 0x35, 0x87, 0x24, 0xd8, 0x19, 0x74, 0x54, 0xa5, 0xd1, 0x3d,
	0xe9, 0xb4, 0xdf, 0x28, 0x4d, 0xad, 0x77, 0xf8, 0xd5, 0x17, 0xdd, 0xc3, 0x66, 0x55, 0x40, 0xdb,
	0xb0, 0x79, 0xda, 0x3e, 0x3b, 0x6b, 0x77, 0x4e, 0x22, 0x61, 0x1e, 0xad, 0x83, 0x78, 0x74, 0xd8,
	0xd4, 0xda, 0x9d, 0xde, 0xa0, 0x5f, 0x2d, 0x50, 0xcc, 0x61, 0xbf, 0xd1, 0xd2, 0x3a, 0xdd, 0xbe,
	0x76, 0xdc, 0x1d, 0x74, 0x9a, 0xd5, 0x22, 0xba, 0x0b, 0xdb, 0x4c, 0xf8, 0xba, 0xdb, 0xee, 0x68,
	0xaa, 0xf2, 0x5a, 0x69, 0xf4, 0x95, 0x66, 0xb5, 0x84, 0xf6, 0xa1, 0x16, 0x4e, 0xe1, 0x78, 0xd0,
	0x69, 0x90, 0x19, 0xc4, 0x14, 0xcb, 0x73, 0xfb, 0xa7, 0x73, 0x5d, 0x91, 0x7f, 0x9b, 0x87, 0x12,
	0x0d, 0x52, 0xc9, 0x19, 0xb3, 0x04, 0x21, 0xb2, 0xc4, 0x15, 0xda, 0x6e, 0x9b, 0xe8, 0x13, 0x58,
	0xd7, 0x27, 0xc1, 0x85, 0xeb, 0x59, 0x81, 0x1e, 0x58, 0x57, 0x6c, 0x4b, 0x2a, 0x6a, 0x52, 0x88,
	0x9e, 0x42, 0x69, 0xa4, 0x9f, 0xe3, 0x51, 0x54, 0x9d, 0x48, 0x7b, 0xaa, 0xb3, 0xc0, 0xb3, 0x9c,
	0x21, 0xf3, 0x55, 0x0c, 0x4a, 0xce, 0xdc, 0xb7, 0x7e, 0xc3, 0x0c, 0xae, 0xa4, 0xd2, 0xef, 0x64,
	0x74, 0x50, 0xfa, 0x9e, 0xd1, 0x41, 0xf9, 0xc6, 0xd1, 0x81, 0xbc, 0x0e, 0xab, 0xb1, 0xdc, 0x51,
	0xfe, 0x56, 0x00, 0x31, 0x4a, 0xe4, 0x16, 0xed, 0xca, 0x4f, 0xa0, 0x12, 0x8e, 0xcb, 0x6b, 0x39,
	0x4b, 0x86, 0x8b, 0xe0, 0xe8, 0x2e, 0xac, 0xb8, 0x63, 0x2d, 0x7a, 0xa3, 0x0a, 0x6a, 0xd9, 0x1d,
	0x53, 0x8b, 0x42, 0x50, 0xa4, 0xf1, 0x22, 0xd9, 0x8f, 0x35, 0x95, 0x7e, 0x93, 0xc7, 0xc9, 0xc3,
	0x23, 0x4b, 0x3f, 0x1f, 0xb1, 0xd7, 0xa7, 0xa2, 0x46, 0x6d, 0xf9, 0xcf, 0x02, 0xac, 0x27, 0xb2,
	0xce, 0x45, 0x13, 0x8e, 0x8d, 0x9a, 0x9f, 0x3b, 0x6a, 0x21, 0x36, 0x6a, 0xe2, 0x14, 0x8a, 0xb7,
	0x3c, 0x85, 0x45, 0x53, 0xfe, 0x2e, 0xdc, 0x5f, 0x1a, 0x12, 0xed, 0xa5, 0xa7, 0xdb, 0xca, 0x4d,
	0x27, 0xbc, 0x0b, 0xa5, 0xc0, 0xbd, 0xc4, 0x0e, 0xbb, 0x82, 0xad, 0x9c, 0xca, 0x9a, 0xa8, 0x09,
	0x15, 0x1b, 0x07, 0x3a, 0x9f, 0x33, 0x99, 0xda, 0xe3, 0xec, 0x34, 0xba, 0x7e, 0xca, 0xa1, 0xcc,
	0x03, 0x44, 0x9a, 0xb5, 0x97, 0xb0, 0x9e, 0xe8, 0xba, 0x8d, 0x0f, 0x38, 0x2a, 0x92, 0x90, 0x56,
	0xfe, 0x7f, 0x80, 0x69, 0xc2, 0xbd, 0x60, 0xeb, 0xe5, 0x3f, 0x08, 0x80, 0x66, 0x33, 0xea, 0x45,
	0x87, 0xf5, 0x01, 0x7d, 0xbf, 0xfc, 0xd7, 0x02, 0xb7, 0xa2, 0x28, 0x17, 0xdf, 0x03, 0xd1, 0xb6,
	0x1c, 0xcd, 0x70, 0x27, 0x4e, 0xc0, 0x1d, 0x72, 0xc5, 0xb6, 0x9c, 0x06, 0x69, 0xd3, 0x4e, 0xfd,
	0x3d, 0xef, 0xcc, 0xf3, 0x4e, 0xfd, 0x3d, 0xeb, 0xdc, 0x81, 0xd2, 0xaf, 0x27, 0xd8, 0xbb, 0xe6,
	0x2f, 0x2b, 0x6b, 0x20, 0x1d, 0xb6, 0x7c, 0x7a, 0xfb, 0xb5, 0xb1, 0xe7, 0x8e, 0xb1, 0x17, 0x58,
	0x91, 0x55, 0x3d, 0x5f, 0x5c, 0x27, 0xe0, 0x5e, 0xa3, 0x17, 0xa9, 0xb1, 0x63, 0xac, 0xfa, 0x29,
	0x31, 0x32, 0x01, 0x39, 0x13, 0x1b, 0x7b, 0x96, 0x11, 0x1f, 0x83, 0xf9, 0x8f, 0xcf, 0x97, 0x8c,
	0xd1, 0x61, 0x8a, 0xe9, 0x41, 0xb6, 0x9c, 0xb4, 0xbc, 0xd6, 0x80, 0x3b, 0x73, 0x27, 0x74, 0x1b,
	0xe3, 0xa9, 0x35, 0x61, 0x77, 0xfe, 0x88, 0xcb, 0x58, 0x84, 0xf8, 0x33, 0xf4, 0xf7, 0x12, 0x6c,
	0xcd, 0x54, 0x41, 0x68, 0x8e, 0xc1, 0x6a, 0x12, 0x61, 0x8e, 0xc1, 0x8a, 0x0c, 0xf1, 0x8b, 0x96,
	0xcf, 0xbc, 0x68, 0x85, 0xe4, 0x45, 0x3b, 0x81, 0x12, 0x79, 0xa9, 0xc3, 0xa3, 0x7a, 0xb2, 0xbc,
	0x0a, 0x13, 0x93, 0x10, 0x53, 0x53, 0x99, 0x3e, 0x52, 0xb8, 0x5b, 0x66, 0xd1, 0xf3, 0xf7, 0xe0,
	0xa1, 0xea, 0xb5, 0x7f, 0x14, 0x60, 0x23, 0xd9, 0x91, 0xf0, 0xc2, 0xc2, 0xed, 0xbc, 0x70, 0x30,
	0xcf, 0x28, 0x99, 0xc1, 0x9c, 0xdc, 0x7a, 0x86, 0x37, 0xb6, 0xd3, 0x77, 0x73, 0xed, 0xb4, 0x4c,
	0x87, 0x6d, 0xdd, 0x7e, 0xd8, 0xff, 0x45, 0xd3, 0xe5, 0xde, 0xf3, 0x47, 0x50, 0x4d, 0x57, 0xdc,
	0xb2, 0xcc, 0x37, 0x89, 0xe5, 0x75, 0xb3, 0x2c, 0x6c, 0x17, 0xd6, 0x13, 0x95, 0x32, 0xf4, 0x2a,
	0x5d, 0x60, 0x13, 0xe8, 0x6e, 0x4b, 0xf1, 0x12, 0x59, 0x5c, 0x23, 0x55, 0x58, 0x93, 0xcb, 0x50,
	0xec, 0x59, 0xce, 0x90, 0xfe, 0xba, 0xce, 0x50, 0x56, 0xa0, 0xcc, 0x8a, 0x3f, 0xc9, 0x57, 0x52,
	0xb8, 0xdd, 0x2b, 0x29, 0x9f, 0xc0, 0x5a, 0xbc, 0x62, 0x46, 0x5e, 0x03, 0x1e, 0x2a, 0x33, 0x2e,
	0x51, 0x5d, 0x61, 0x71, 0xb2, 0x8f, 0xee, 0x81, 0x18, 0x26, 0xa4, 0xec, 0x45, 0xe0, 0x31, 0x34,
	0x15, 0xc8, 0xdf, 0x08, 0xb0, 0x3d, 0xa7, 0x5a, 0xf6, 0x41, 0xdf, 0x90, 0x4f, 0x61, 0x23, 0x59,
	0x5a, 0x5b, 0xb0, 0x1c, 0xb9, 0x19, 0xae, 0x9c, 0xa7, 0x73, 0xcf, 0xa3, 0xa2, 0xa4, 0x70, 0x83,
	0xd8, 0x91, 0x63, 0xe5, 0x11, 0x39, 0x06, 0x0f, 0xeb, 0x36, 0x09, 0x60, 0xec, 0x58, 0xea, 0x60,
	0xf3, 0xd4, 0xc1, 0x9f, 0x9c, 0x7f, 0x8d, 0x8d, 0x28, 0xa9, 0xe4, 0x4d, 0xb4, 0x0f, 0xe0, 0x4f,
	0xce, 0xa7, 0xd9, 0x03, 0xe9, 0x8c, 0x49, 0x88, 0xdd, 0xb2, 0x40, 0x96, 0xa5, 0x41, 0xac, 0x21,
	0xff, 0x49, 0x00, 0x98, 0x96, 0xeb, 0xd0, 0x01, 0x99, 0x32, 0x69, 0xf1, 0x29, 0xdf, 0xcd, 0xa8,
	0xc8, 0xa9, 0x1c, 0x46, 0xf6, 0xd5, 0xc7, 0x8e, 0x89, 0xbd, 0x9b, 0x05, 0x8b, 0x1c, 0x9c, 0x88,
	0xcd, 0xc4, 0x39, 0x11, 0x61, 0x31, 0x15, 0x5e, 0xfd, 0x85, 0xda, 0xc2, 0x6c, 0xd1, 0xef, 0xd6,
	0xf3, 0xfd, 0x90, 0xc6, 0xf3, 0x37, 0x01, 0xd6, 0xe2, 0x1d, 0x24, 0x54, 0xe5, 0xb6, 0x13, 0xde,
	0x6d, 0x66, 0x3a, 0x24, 0x63, 0xf6, 0xb1, 0xef, 0x5b, 0xae, 0x13, 0xcb, 0xb4, 0xb9, 0xa4, 0x6d,
	0x26, 0x0a, 0x39, 0x85, 0x54, 0x21, 0xe7, 0x61, 0xb2, 0xa2, 0xc6, 0x36, 0x2e, 0x51, 0x35, 0x9b,
	0x9a, 0x61, 0xe9, 0xe6, 0x66, 0x78, 0x74, 0x0c, 0x7b, 0x86, 0x6b, 0xd7, 0xa7, 0xff, 0x0f, 0x47,
	0x6b, 0x0e, 0xf4, 0xb1, 0x75, 0xb4, 0xd1, 0xa1, 0x2d, 0x95, 0x6f, 0x40, 0x4f, 0x78, 0x53, 0xa2,
	0x1d, 0x7f, 0xcc, 0x17, 0x3b, 0x3f, 0xef, 0x1d, 0x7d, 0x9b, 0x2f, 0x33, 0xc0, 0x79, 0x99, 0x8e,
	0xf2, 0xec, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x59, 0x54, 0xa0, 0x91, 0xdd, 0x1e, 0x00, 0x00,
}

// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: realtime.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Api.Realtime {

  /// <summary>Holder for reflection information generated from realtime.proto</summary>
  public static partial class RealtimeReflection {

    #region Descriptor
    /// <summary>File descriptor for realtime.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RealtimeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5yZWFsdGltZS5wcm90bxIabmFrYW1hLm5pd3JhZC5hcGkucmVhbHRpbWUa",
            "O2dpdGh1Yi5jb20vbG91aXMwMzAxOTUvcHJvdG9tZXRyeS9hcGkvdmVjdG9y",
            "My92ZWN0b3IzLnByb3RvGkFnaXRodWIuY29tL2xvdWlzMDMwMTk1L3Byb3Rv",
            "bWV0cnkvYXBpL3F1YXRlcm5pb24vcXVhdGVybmlvbi5wcm90bxo5Z2l0aHVi",
            "LmNvbS9sb3VpczAzMDE5NS9wcm90b21ldHJ5L2FwaS92b2x1bWUvdm9sdW1l",
            "LnByb3RvIuMECgZQYWNrZXQSKwoGaW1wYWN0GAQgASgLMhsucHJvdG9tZXRy",
            "eS52ZWN0b3IzLlZlY3RvcjMSOwoKbWF0Y2hfam9pbhgHIAEoCzIlLm5ha2Ft",
            "YS5uaXdyYWQuYXBpLnJlYWx0aW1lLk1hdGNoSm9pbkgAEkcKEHVwZGF0ZV90",
            "cmFuc2Zvcm0YCiABKAsyKy5uYWthbWEubml3cmFkLmFwaS5yZWFsdGltZS5V",
            "cGRhdGVUcmFuc2Zvcm1IABJECg9uYXZfbWVzaF91cGRhdGUYCyABKAsyKS5u",
            "YWthbWEubml3cmFkLmFwaS5yZWFsdGltZS5OYXZNZXNoVXBkYXRlSAASMgoF",
            "c3Bhd24YDyABKAsyIS5uYWthbWEubml3cmFkLmFwaS5yZWFsdGltZS5TcGF3",
            "bkgAEjoKDXJlcXVlc3Rfc3Bhd24YECABKAsyIS5uYWthbWEubml3cmFkLmFw",
            "aS5yZWFsdGltZS5TcGF3bkgAEjYKB2Rlc3Ryb3kYESABKAsyIy5uYWthbWEu",
            "bml3cmFkLmFwaS5yZWFsdGltZS5EZXN0cm95SAASPgoPcmVxdWVzdF9kZXN0",
            "cm95GBIgASgLMiMubmFrYW1hLm5pd3JhZC5hcGkucmVhbHRpbWUuRGVzdHJv",
            "eUgAEjAKBG1lbWUYEyABKAsyIC5uYWthbWEubml3cmFkLmFwaS5yZWFsdGlt",
            "ZS5NZW1lSAASPgoLaW5pdGlhbGl6ZWQYGSABKAsyJy5uYWthbWEubml3cmFk",
            "LmFwaS5yZWFsdGltZS5Jbml0aWFsaXplZEgAQgYKBHR5cGUiQQoJTWF0Y2hK",
            "b2luEiYKBnJlZ2lvbhgBIAEoCzIWLnByb3RvbWV0cnkudm9sdW1lLkJveBIM",
            "CgRzZWVkGAIgASgDIksKD1VwZGF0ZVRyYW5zZm9ybRI4Cgl0cmFuc2Zvcm0Y",
            "ASABKAsyJS5uYWthbWEubml3cmFkLmFwaS5yZWFsdGltZS5UcmFuc2Zvcm0i",
            "TQoNTmF2TWVzaFVwZGF0ZRIKCgJpZBgBIAEoBBIwCgtkZXN0aW5hdGlvbhgC",
            "IAEoCzIbLnByb3RvbWV0cnkudmVjdG9yMy5WZWN0b3IzIq0BCgVTcGF3bhI0",
            "CgNhbnkYASABKAsyJS5uYWthbWEubml3cmFkLmFwaS5yZWFsdGltZS5UcmFu",
            "c2Zvcm1IABIwCgR0cmVlGAIgASgLMiAubmFrYW1hLm5pd3JhZC5hcGkucmVh",
            "bHRpbWUuVHJlZUgAEjQKBmFuaW1hbBgDIAEoCzIiLm5ha2FtYS5uaXdyYWQu",
            "YXBpLnJlYWx0aW1lLkFuaW1hbEgAQgYKBHR5cGUirwEKB0Rlc3Ryb3kSNAoD",
            "YW55GAEgASgLMiUubmFrYW1hLm5pd3JhZC5hcGkucmVhbHRpbWUuVHJhbnNm",
            "b3JtSAASMAoEdHJlZRgCIAEoCzIgLm5ha2FtYS5uaXdyYWQuYXBpLnJlYWx0",
            "aW1lLlRyZWVIABI0CgZhbmltYWwYAyABKAsyIi5uYWthbWEubml3cmFkLmFw",
            "aS5yZWFsdGltZS5BbmltYWxIAEIGCgR0eXBlIiUKBE1lbWUSCgoCaWQYASAB",
            "KAQSEQoJbWVtZV9uYW1lGAIgASgJIg0KC0luaXRpYWxpemVkInsKCVRyYW5z",
            "Zm9ybRIKCgJpZBgBIAEoBBItCghwb3NpdGlvbhgCIAEoCzIbLnByb3RvbWV0",
            "cnkudmVjdG9yMy5WZWN0b3IzEjMKCHJvdGF0aW9uGAMgASgLMiEucHJvdG9t",
            "ZXRyeS5xdWF0ZXJuaW9uLlF1YXRlcm5pb24iQAoEVHJlZRI4Cgl0cmFuc2Zv",
            "cm0YASABKAsyJS5uYWthbWEubml3cmFkLmFwaS5yZWFsdGltZS5UcmFuc2Zv",
            "cm0iQgoGQW5pbWFsEjgKCXRyYW5zZm9ybRgBIAEoCzIlLm5ha2FtYS5uaXdy",
            "YWQuYXBpLnJlYWx0aW1lLlRyYW5zZm9ybSJUChhSZXF1ZXN0VHJhbnNmZXJP",
            "d25lcnNoaXASOAoJdHJhbnNmb3JtGAEgASgLMiUubmFrYW1hLm5pd3JhZC5h",
            "cGkucmVhbHRpbWUuVHJhbnNmb3JtIu4DCg9DaGFyYWN0ZXJpc3RpY3MSEwoL",
            "Y29tcHV0YXRpb24YASABKAISDAoEbGlmZRgCIAEoAhISCgpyb2J1c3RuZXNz",
            "GAMgASgCEg4KBmVuZXJneRgEIAEoAhIZChFyZXByb2R1Y3Rpb25fY29zdBgF",
            "IAEoAhJjChZhbmltYWxfY2hhcmFjdGVyaXN0aWNzGAYgASgLMkEubmFrYW1h",
            "Lm5pd3JhZC5hcGkucmVhbHRpbWUuQ2hhcmFjdGVyaXN0aWNzLkFuaW1hbENo",
            "YXJhY3RlcmlzdGljc0gAEmsKGnZlZ2V0YXRpb25fY2hhcmFjdGVyaXN0aWNz",
            "GAcgASgLMkUubmFrYW1hLm5pd3JhZC5hcGkucmVhbHRpbWUuQ2hhcmFjdGVy",
            "aXN0aWNzLlZlZ2V0YXRpb25DaGFyYWN0ZXJpc3RpY3NIABqBAQoVQW5pbWFs",
            "Q2hhcmFjdGVyaXN0aWNzEg0KBXNwZWVkGAEgASgCEh0KFXJhbmRvbV9tb3Zl",
            "bWVudF9yYW5nZRgCIAEoAhITCgtzaWdodF9yYW5nZRgDIAEoAhIRCgllYXRf",
            "cmFuZ2UYBCABKAISEgoKbWV0YWJvbGlzbRgFIAEoAhobChlWZWdldGF0aW9u",
            "Q2hhcmFjdGVyaXN0aWNzQgYKBHR5cGUi3QQKC0V4cGVyaWVuY2VzEksKFmFu",
            "aW1hbF9jaGFyYWN0ZXJpc3RpY3MYASABKAsyKy5uYWthbWEubml3cmFkLmFw",
            "aS5yZWFsdGltZS5DaGFyYWN0ZXJpc3RpY3MSWwoTYW5pbWFsX2Rpc3RyaWJ1",
            "dGlvbhgCIAEoCzI+Lm5ha2FtYS5uaXdyYWQuYXBpLnJlYWx0aW1lLkV4cGVy",
            "aWVuY2VzLlBvcHVsYXRpb25EaXN0cmlidXRpb24SGwoTaW5jbHVkZV9jYXJu",
            "aXZvcm91cxgDIAEoCBJPChp2ZWdldGF0aW9uX2NoYXJhY3RlcmlzdGljcxgE",
            "IAEoCzIrLm5ha2FtYS5uaXdyYWQuYXBpLnJlYWx0aW1lLkNoYXJhY3Rlcmlz",
            "dGljcxJfChd2ZWdldGF0aW9uX2Rpc3RyaWJ1dGlvbhgFIAEoCzI+Lm5ha2Ft",
            "YS5uaXdyYWQuYXBpLnJlYWx0aW1lLkV4cGVyaWVuY2VzLlBvcHVsYXRpb25E",
            "aXN0cmlidXRpb24aPwoWUG9wdWxhdGlvbkRpc3RyaWJ1dGlvbhIWCg5pbml0",
            "aWFsX2Ftb3VudBgBIAEoAxINCgVzcHJheRgCIAEoAhonCgNNYXASDQoFd2F0",
            "ZXIYASABKAgSEQoJZGl2ZXJzaXR5GAIgASgEGmsKEUdlbmVyYWxQYXJhbWV0",
            "ZXJzEhkKEWluaXRpYWxfdGltZXNjYWxlGAEgASgNEhIKCnRpbWVfbGltaXQY",
            "AiABKA0SDgoGcmVwZWF0GAMgASgIEhcKD3NhdmVfc3RhdGlzdGljcxgEIAEo",
            "CEI0WiNuYWthbWEvbml3cmFkL2FwaS9yZWFsdGltZTtyZWFsdGltZaoCDEFw",
            "aS5SZWFsdGltZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Protometry.Vector3.Vector3Reflection.Descriptor, global::Protometry.Quaternion.QuaternionReflection.Descriptor, global::Protometry.Volume.VolumeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Realtime.Packet), global::Api.Realtime.Packet.Parser, new[]{ "Impact", "MatchJoin", "UpdateTransform", "NavMeshUpdate", "Spawn", "RequestSpawn", "Destroy", "RequestDestroy", "Meme", "Initialized" }, new[]{ "Type" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Realtime.MatchJoin), global::Api.Realtime.MatchJoin.Parser, new[]{ "Region", "Seed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Realtime.UpdateTransform), global::Api.Realtime.UpdateTransform.Parser, new[]{ "Transform" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Realtime.NavMeshUpdate), global::Api.Realtime.NavMeshUpdate.Parser, new[]{ "Id", "Destination" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Realtime.Spawn), global::Api.Realtime.Spawn.Parser, new[]{ "Any", "Tree", "Animal" }, new[]{ "Type" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Realtime.Destroy), global::Api.Realtime.Destroy.Parser, new[]{ "Any", "Tree", "Animal" }, new[]{ "Type" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Realtime.Meme), global::Api.Realtime.Meme.Parser, new[]{ "Id", "MemeName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Realtime.Initialized), global::Api.Realtime.Initialized.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Realtime.Transform), global::Api.Realtime.Transform.Parser, new[]{ "Id", "Position", "Rotation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Realtime.Tree), global::Api.Realtime.Tree.Parser, new[]{ "Transform" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Realtime.Animal), global::Api.Realtime.Animal.Parser, new[]{ "Transform" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Realtime.RequestTransferOwnership), global::Api.Realtime.RequestTransferOwnership.Parser, new[]{ "Transform" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Realtime.Characteristics), global::Api.Realtime.Characteristics.Parser, new[]{ "Computation", "Life", "Robustness", "Energy", "ReproductionCost", "AnimalCharacteristics", "VegetationCharacteristics" }, new[]{ "Type" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Api.Realtime.Characteristics.Types.AnimalCharacteristics), global::Api.Realtime.Characteristics.Types.AnimalCharacteristics.Parser, new[]{ "Speed", "RandomMovementRange", "SightRange", "EatRange", "Metabolism" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Realtime.Characteristics.Types.VegetationCharacteristics), global::Api.Realtime.Characteristics.Types.VegetationCharacteristics.Parser, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Realtime.Experiences), global::Api.Realtime.Experiences.Parser, new[]{ "AnimalCharacteristics", "AnimalDistribution", "IncludeCarnivorous", "VegetationCharacteristics", "VegetationDistribution" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Api.Realtime.Experiences.Types.PopulationDistribution), global::Api.Realtime.Experiences.Types.PopulationDistribution.Parser, new[]{ "InitialAmount", "Spray" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Realtime.Experiences.Types.Map), global::Api.Realtime.Experiences.Types.Map.Parser, new[]{ "Water", "Diversity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Realtime.Experiences.Types.GeneralParameters), global::Api.Realtime.Experiences.Types.GeneralParameters.Parser, new[]{ "InitialTimescale", "TimeLimit", "Repeat", "SaveStatistics" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// TODO: kind of ugly to use same struct for client -> server and server -> client ?
  /// </summary>
  public sealed partial class Packet : pb::IMessage<Packet> {
    private static readonly pb::MessageParser<Packet> _parser = new pb::MessageParser<Packet>(() => new Packet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Packet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.Realtime.RealtimeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Packet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Packet(Packet other) : this() {
      impact_ = other.impact_ != null ? other.impact_.Clone() : null;
      switch (other.TypeCase) {
        case TypeOneofCase.MatchJoin:
          MatchJoin = other.MatchJoin.Clone();
          break;
        case TypeOneofCase.UpdateTransform:
          UpdateTransform = other.UpdateTransform.Clone();
          break;
        case TypeOneofCase.NavMeshUpdate:
          NavMeshUpdate = other.NavMeshUpdate.Clone();
          break;
        case TypeOneofCase.Spawn:
          Spawn = other.Spawn.Clone();
          break;
        case TypeOneofCase.RequestSpawn:
          RequestSpawn = other.RequestSpawn.Clone();
          break;
        case TypeOneofCase.Destroy:
          Destroy = other.Destroy.Clone();
          break;
        case TypeOneofCase.RequestDestroy:
          RequestDestroy = other.RequestDestroy.Clone();
          break;
        case TypeOneofCase.Meme:
          Meme = other.Meme.Clone();
          break;
        case TypeOneofCase.Initialized:
          Initialized = other.Initialized.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Packet Clone() {
      return new Packet(this);
    }

    /// <summary>Field number for the "impact" field.</summary>
    public const int ImpactFieldNumber = 4;
    private global::Protometry.Vector3.Vector3 impact_;
    /// <summary>
    /// TODO: prob will have to switch to a box instead of vector3 later (want to notify before arrival ...)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protometry.Vector3.Vector3 Impact {
      get { return impact_; }
      set {
        impact_ = value;
      }
    }

    /// <summary>Field number for the "match_join" field.</summary>
    public const int MatchJoinFieldNumber = 7;
    /// <summary>
    /// Events
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.MatchJoin MatchJoin {
      get { return typeCase_ == TypeOneofCase.MatchJoin ? (global::Api.Realtime.MatchJoin) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.MatchJoin;
      }
    }

    /// <summary>Field number for the "update_transform" field.</summary>
    public const int UpdateTransformFieldNumber = 10;
    /// <summary>
    /// General physical objects
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.UpdateTransform UpdateTransform {
      get { return typeCase_ == TypeOneofCase.UpdateTransform ? (global::Api.Realtime.UpdateTransform) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.UpdateTransform;
      }
    }

    /// <summary>Field number for the "nav_mesh_update" field.</summary>
    public const int NavMeshUpdateFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.NavMeshUpdate NavMeshUpdate {
      get { return typeCase_ == TypeOneofCase.NavMeshUpdate ? (global::Api.Realtime.NavMeshUpdate) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.NavMeshUpdate;
      }
    }

    /// <summary>Field number for the "spawn" field.</summary>
    public const int SpawnFieldNumber = 15;
    /// <summary>
    /// Evolution
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.Spawn Spawn {
      get { return typeCase_ == TypeOneofCase.Spawn ? (global::Api.Realtime.Spawn) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Spawn;
      }
    }

    /// <summary>Field number for the "request_spawn" field.</summary>
    public const int RequestSpawnFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.Spawn RequestSpawn {
      get { return typeCase_ == TypeOneofCase.RequestSpawn ? (global::Api.Realtime.Spawn) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.RequestSpawn;
      }
    }

    /// <summary>Field number for the "destroy" field.</summary>
    public const int DestroyFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.Destroy Destroy {
      get { return typeCase_ == TypeOneofCase.Destroy ? (global::Api.Realtime.Destroy) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Destroy;
      }
    }

    /// <summary>Field number for the "request_destroy" field.</summary>
    public const int RequestDestroyFieldNumber = 18;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.Destroy RequestDestroy {
      get { return typeCase_ == TypeOneofCase.RequestDestroy ? (global::Api.Realtime.Destroy) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.RequestDestroy;
      }
    }

    /// <summary>Field number for the "meme" field.</summary>
    public const int MemeFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.Meme Meme {
      get { return typeCase_ == TypeOneofCase.Meme ? (global::Api.Realtime.Meme) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Meme;
      }
    }

    /// <summary>Field number for the "initialized" field.</summary>
    public const int InitializedFieldNumber = 25;
    /// <summary>
    /// Player
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.Initialized Initialized {
      get { return typeCase_ == TypeOneofCase.Initialized ? (global::Api.Realtime.Initialized) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Initialized;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      MatchJoin = 7,
      UpdateTransform = 10,
      NavMeshUpdate = 11,
      Spawn = 15,
      RequestSpawn = 16,
      Destroy = 17,
      RequestDestroy = 18,
      Meme = 19,
      Initialized = 25,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Packet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Packet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Impact, other.Impact)) return false;
      if (!object.Equals(MatchJoin, other.MatchJoin)) return false;
      if (!object.Equals(UpdateTransform, other.UpdateTransform)) return false;
      if (!object.Equals(NavMeshUpdate, other.NavMeshUpdate)) return false;
      if (!object.Equals(Spawn, other.Spawn)) return false;
      if (!object.Equals(RequestSpawn, other.RequestSpawn)) return false;
      if (!object.Equals(Destroy, other.Destroy)) return false;
      if (!object.Equals(RequestDestroy, other.RequestDestroy)) return false;
      if (!object.Equals(Meme, other.Meme)) return false;
      if (!object.Equals(Initialized, other.Initialized)) return false;
      if (TypeCase != other.TypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (impact_ != null) hash ^= Impact.GetHashCode();
      if (typeCase_ == TypeOneofCase.MatchJoin) hash ^= MatchJoin.GetHashCode();
      if (typeCase_ == TypeOneofCase.UpdateTransform) hash ^= UpdateTransform.GetHashCode();
      if (typeCase_ == TypeOneofCase.NavMeshUpdate) hash ^= NavMeshUpdate.GetHashCode();
      if (typeCase_ == TypeOneofCase.Spawn) hash ^= Spawn.GetHashCode();
      if (typeCase_ == TypeOneofCase.RequestSpawn) hash ^= RequestSpawn.GetHashCode();
      if (typeCase_ == TypeOneofCase.Destroy) hash ^= Destroy.GetHashCode();
      if (typeCase_ == TypeOneofCase.RequestDestroy) hash ^= RequestDestroy.GetHashCode();
      if (typeCase_ == TypeOneofCase.Meme) hash ^= Meme.GetHashCode();
      if (typeCase_ == TypeOneofCase.Initialized) hash ^= Initialized.GetHashCode();
      hash ^= (int) typeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (impact_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Impact);
      }
      if (typeCase_ == TypeOneofCase.MatchJoin) {
        output.WriteRawTag(58);
        output.WriteMessage(MatchJoin);
      }
      if (typeCase_ == TypeOneofCase.UpdateTransform) {
        output.WriteRawTag(82);
        output.WriteMessage(UpdateTransform);
      }
      if (typeCase_ == TypeOneofCase.NavMeshUpdate) {
        output.WriteRawTag(90);
        output.WriteMessage(NavMeshUpdate);
      }
      if (typeCase_ == TypeOneofCase.Spawn) {
        output.WriteRawTag(122);
        output.WriteMessage(Spawn);
      }
      if (typeCase_ == TypeOneofCase.RequestSpawn) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(RequestSpawn);
      }
      if (typeCase_ == TypeOneofCase.Destroy) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Destroy);
      }
      if (typeCase_ == TypeOneofCase.RequestDestroy) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(RequestDestroy);
      }
      if (typeCase_ == TypeOneofCase.Meme) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Meme);
      }
      if (typeCase_ == TypeOneofCase.Initialized) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(Initialized);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (impact_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Impact);
      }
      if (typeCase_ == TypeOneofCase.MatchJoin) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MatchJoin);
      }
      if (typeCase_ == TypeOneofCase.UpdateTransform) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateTransform);
      }
      if (typeCase_ == TypeOneofCase.NavMeshUpdate) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NavMeshUpdate);
      }
      if (typeCase_ == TypeOneofCase.Spawn) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spawn);
      }
      if (typeCase_ == TypeOneofCase.RequestSpawn) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RequestSpawn);
      }
      if (typeCase_ == TypeOneofCase.Destroy) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Destroy);
      }
      if (typeCase_ == TypeOneofCase.RequestDestroy) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RequestDestroy);
      }
      if (typeCase_ == TypeOneofCase.Meme) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Meme);
      }
      if (typeCase_ == TypeOneofCase.Initialized) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Initialized);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Packet other) {
      if (other == null) {
        return;
      }
      if (other.impact_ != null) {
        if (impact_ == null) {
          impact_ = new global::Protometry.Vector3.Vector3();
        }
        Impact.MergeFrom(other.Impact);
      }
      switch (other.TypeCase) {
        case TypeOneofCase.MatchJoin:
          if (MatchJoin == null) {
            MatchJoin = new global::Api.Realtime.MatchJoin();
          }
          MatchJoin.MergeFrom(other.MatchJoin);
          break;
        case TypeOneofCase.UpdateTransform:
          if (UpdateTransform == null) {
            UpdateTransform = new global::Api.Realtime.UpdateTransform();
          }
          UpdateTransform.MergeFrom(other.UpdateTransform);
          break;
        case TypeOneofCase.NavMeshUpdate:
          if (NavMeshUpdate == null) {
            NavMeshUpdate = new global::Api.Realtime.NavMeshUpdate();
          }
          NavMeshUpdate.MergeFrom(other.NavMeshUpdate);
          break;
        case TypeOneofCase.Spawn:
          if (Spawn == null) {
            Spawn = new global::Api.Realtime.Spawn();
          }
          Spawn.MergeFrom(other.Spawn);
          break;
        case TypeOneofCase.RequestSpawn:
          if (RequestSpawn == null) {
            RequestSpawn = new global::Api.Realtime.Spawn();
          }
          RequestSpawn.MergeFrom(other.RequestSpawn);
          break;
        case TypeOneofCase.Destroy:
          if (Destroy == null) {
            Destroy = new global::Api.Realtime.Destroy();
          }
          Destroy.MergeFrom(other.Destroy);
          break;
        case TypeOneofCase.RequestDestroy:
          if (RequestDestroy == null) {
            RequestDestroy = new global::Api.Realtime.Destroy();
          }
          RequestDestroy.MergeFrom(other.RequestDestroy);
          break;
        case TypeOneofCase.Meme:
          if (Meme == null) {
            Meme = new global::Api.Realtime.Meme();
          }
          Meme.MergeFrom(other.Meme);
          break;
        case TypeOneofCase.Initialized:
          if (Initialized == null) {
            Initialized = new global::Api.Realtime.Initialized();
          }
          Initialized.MergeFrom(other.Initialized);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 34: {
            if (impact_ == null) {
              impact_ = new global::Protometry.Vector3.Vector3();
            }
            input.ReadMessage(impact_);
            break;
          }
          case 58: {
            global::Api.Realtime.MatchJoin subBuilder = new global::Api.Realtime.MatchJoin();
            if (typeCase_ == TypeOneofCase.MatchJoin) {
              subBuilder.MergeFrom(MatchJoin);
            }
            input.ReadMessage(subBuilder);
            MatchJoin = subBuilder;
            break;
          }
          case 82: {
            global::Api.Realtime.UpdateTransform subBuilder = new global::Api.Realtime.UpdateTransform();
            if (typeCase_ == TypeOneofCase.UpdateTransform) {
              subBuilder.MergeFrom(UpdateTransform);
            }
            input.ReadMessage(subBuilder);
            UpdateTransform = subBuilder;
            break;
          }
          case 90: {
            global::Api.Realtime.NavMeshUpdate subBuilder = new global::Api.Realtime.NavMeshUpdate();
            if (typeCase_ == TypeOneofCase.NavMeshUpdate) {
              subBuilder.MergeFrom(NavMeshUpdate);
            }
            input.ReadMessage(subBuilder);
            NavMeshUpdate = subBuilder;
            break;
          }
          case 122: {
            global::Api.Realtime.Spawn subBuilder = new global::Api.Realtime.Spawn();
            if (typeCase_ == TypeOneofCase.Spawn) {
              subBuilder.MergeFrom(Spawn);
            }
            input.ReadMessage(subBuilder);
            Spawn = subBuilder;
            break;
          }
          case 130: {
            global::Api.Realtime.Spawn subBuilder = new global::Api.Realtime.Spawn();
            if (typeCase_ == TypeOneofCase.RequestSpawn) {
              subBuilder.MergeFrom(RequestSpawn);
            }
            input.ReadMessage(subBuilder);
            RequestSpawn = subBuilder;
            break;
          }
          case 138: {
            global::Api.Realtime.Destroy subBuilder = new global::Api.Realtime.Destroy();
            if (typeCase_ == TypeOneofCase.Destroy) {
              subBuilder.MergeFrom(Destroy);
            }
            input.ReadMessage(subBuilder);
            Destroy = subBuilder;
            break;
          }
          case 146: {
            global::Api.Realtime.Destroy subBuilder = new global::Api.Realtime.Destroy();
            if (typeCase_ == TypeOneofCase.RequestDestroy) {
              subBuilder.MergeFrom(RequestDestroy);
            }
            input.ReadMessage(subBuilder);
            RequestDestroy = subBuilder;
            break;
          }
          case 154: {
            global::Api.Realtime.Meme subBuilder = new global::Api.Realtime.Meme();
            if (typeCase_ == TypeOneofCase.Meme) {
              subBuilder.MergeFrom(Meme);
            }
            input.ReadMessage(subBuilder);
            Meme = subBuilder;
            break;
          }
          case 202: {
            global::Api.Realtime.Initialized subBuilder = new global::Api.Realtime.Initialized();
            if (typeCase_ == TypeOneofCase.Initialized) {
              subBuilder.MergeFrom(Initialized);
            }
            input.ReadMessage(subBuilder);
            Initialized = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class MatchJoin : pb::IMessage<MatchJoin> {
    private static readonly pb::MessageParser<MatchJoin> _parser = new pb::MessageParser<MatchJoin>(() => new MatchJoin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchJoin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.Realtime.RealtimeReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchJoin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchJoin(MatchJoin other) : this() {
      region_ = other.region_ != null ? other.region_.Clone() : null;
      seed_ = other.seed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchJoin Clone() {
      return new MatchJoin(this);
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 1;
    private global::Protometry.Volume.Box region_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protometry.Volume.Box Region {
      get { return region_; }
      set {
        region_ = value;
      }
    }

    /// <summary>Field number for the "seed" field.</summary>
    public const int SeedFieldNumber = 2;
    private long seed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Seed {
      get { return seed_; }
      set {
        seed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchJoin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchJoin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Region, other.Region)) return false;
      if (Seed != other.Seed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (region_ != null) hash ^= Region.GetHashCode();
      if (Seed != 0L) hash ^= Seed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (region_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Region);
      }
      if (Seed != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Seed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (region_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Region);
      }
      if (Seed != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Seed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchJoin other) {
      if (other == null) {
        return;
      }
      if (other.region_ != null) {
        if (region_ == null) {
          region_ = new global::Protometry.Volume.Box();
        }
        Region.MergeFrom(other.Region);
      }
      if (other.Seed != 0L) {
        Seed = other.Seed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (region_ == null) {
              region_ = new global::Protometry.Volume.Box();
            }
            input.ReadMessage(region_);
            break;
          }
          case 16: {
            Seed = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// General purpose transform update typically shared by several different types of objects
  /// </summary>
  public sealed partial class UpdateTransform : pb::IMessage<UpdateTransform> {
    private static readonly pb::MessageParser<UpdateTransform> _parser = new pb::MessageParser<UpdateTransform>(() => new UpdateTransform());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateTransform> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.Realtime.RealtimeReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTransform() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTransform(UpdateTransform other) : this() {
      transform_ = other.transform_ != null ? other.transform_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTransform Clone() {
      return new UpdateTransform(this);
    }

    /// <summary>Field number for the "transform" field.</summary>
    public const int TransformFieldNumber = 1;
    private global::Api.Realtime.Transform transform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.Transform Transform {
      get { return transform_; }
      set {
        transform_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateTransform);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateTransform other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Transform, other.Transform)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (transform_ != null) hash ^= Transform.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (transform_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Transform);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (transform_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transform);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateTransform other) {
      if (other == null) {
        return;
      }
      if (other.transform_ != null) {
        if (transform_ == null) {
          transform_ = new global::Api.Realtime.Transform();
        }
        Transform.MergeFrom(other.Transform);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (transform_ == null) {
              transform_ = new global::Api.Realtime.Transform();
            }
            input.ReadMessage(transform_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NavMeshUpdate : pb::IMessage<NavMeshUpdate> {
    private static readonly pb::MessageParser<NavMeshUpdate> _parser = new pb::MessageParser<NavMeshUpdate>(() => new NavMeshUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NavMeshUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.Realtime.RealtimeReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavMeshUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavMeshUpdate(NavMeshUpdate other) : this() {
      id_ = other.id_;
      destination_ = other.destination_ != null ? other.destination_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavMeshUpdate Clone() {
      return new NavMeshUpdate(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "destination" field.</summary>
    public const int DestinationFieldNumber = 2;
    private global::Protometry.Vector3.Vector3 destination_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protometry.Vector3.Vector3 Destination {
      get { return destination_; }
      set {
        destination_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NavMeshUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NavMeshUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Destination, other.Destination)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (destination_ != null) hash ^= Destination.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (destination_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Destination);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (destination_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Destination);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NavMeshUpdate other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.destination_ != null) {
        if (destination_ == null) {
          destination_ = new global::Protometry.Vector3.Vector3();
        }
        Destination.MergeFrom(other.Destination);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 18: {
            if (destination_ == null) {
              destination_ = new global::Protometry.Vector3.Vector3();
            }
            input.ReadMessage(destination_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Spawn : pb::IMessage<Spawn> {
    private static readonly pb::MessageParser<Spawn> _parser = new pb::MessageParser<Spawn>(() => new Spawn());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Spawn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.Realtime.RealtimeReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Spawn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Spawn(Spawn other) : this() {
      switch (other.TypeCase) {
        case TypeOneofCase.Any:
          Any = other.Any.Clone();
          break;
        case TypeOneofCase.Tree:
          Tree = other.Tree.Clone();
          break;
        case TypeOneofCase.Animal:
          Animal = other.Animal.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Spawn Clone() {
      return new Spawn(this);
    }

    /// <summary>Field number for the "any" field.</summary>
    public const int AnyFieldNumber = 1;
    /// <summary>
    /// Any object, no special behaviour
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.Transform Any {
      get { return typeCase_ == TypeOneofCase.Any ? (global::Api.Realtime.Transform) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Any;
      }
    }

    /// <summary>Field number for the "tree" field.</summary>
    public const int TreeFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.Tree Tree {
      get { return typeCase_ == TypeOneofCase.Tree ? (global::Api.Realtime.Tree) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Tree;
      }
    }

    /// <summary>Field number for the "animal" field.</summary>
    public const int AnimalFieldNumber = 3;
    /// <summary>
    /// TODO: other ?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.Animal Animal {
      get { return typeCase_ == TypeOneofCase.Animal ? (global::Api.Realtime.Animal) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Animal;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      Any = 1,
      Tree = 2,
      Animal = 3,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Spawn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Spawn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Any, other.Any)) return false;
      if (!object.Equals(Tree, other.Tree)) return false;
      if (!object.Equals(Animal, other.Animal)) return false;
      if (TypeCase != other.TypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (typeCase_ == TypeOneofCase.Any) hash ^= Any.GetHashCode();
      if (typeCase_ == TypeOneofCase.Tree) hash ^= Tree.GetHashCode();
      if (typeCase_ == TypeOneofCase.Animal) hash ^= Animal.GetHashCode();
      hash ^= (int) typeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (typeCase_ == TypeOneofCase.Any) {
        output.WriteRawTag(10);
        output.WriteMessage(Any);
      }
      if (typeCase_ == TypeOneofCase.Tree) {
        output.WriteRawTag(18);
        output.WriteMessage(Tree);
      }
      if (typeCase_ == TypeOneofCase.Animal) {
        output.WriteRawTag(26);
        output.WriteMessage(Animal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (typeCase_ == TypeOneofCase.Any) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Any);
      }
      if (typeCase_ == TypeOneofCase.Tree) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tree);
      }
      if (typeCase_ == TypeOneofCase.Animal) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Animal);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Spawn other) {
      if (other == null) {
        return;
      }
      switch (other.TypeCase) {
        case TypeOneofCase.Any:
          if (Any == null) {
            Any = new global::Api.Realtime.Transform();
          }
          Any.MergeFrom(other.Any);
          break;
        case TypeOneofCase.Tree:
          if (Tree == null) {
            Tree = new global::Api.Realtime.Tree();
          }
          Tree.MergeFrom(other.Tree);
          break;
        case TypeOneofCase.Animal:
          if (Animal == null) {
            Animal = new global::Api.Realtime.Animal();
          }
          Animal.MergeFrom(other.Animal);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Api.Realtime.Transform subBuilder = new global::Api.Realtime.Transform();
            if (typeCase_ == TypeOneofCase.Any) {
              subBuilder.MergeFrom(Any);
            }
            input.ReadMessage(subBuilder);
            Any = subBuilder;
            break;
          }
          case 18: {
            global::Api.Realtime.Tree subBuilder = new global::Api.Realtime.Tree();
            if (typeCase_ == TypeOneofCase.Tree) {
              subBuilder.MergeFrom(Tree);
            }
            input.ReadMessage(subBuilder);
            Tree = subBuilder;
            break;
          }
          case 26: {
            global::Api.Realtime.Animal subBuilder = new global::Api.Realtime.Animal();
            if (typeCase_ == TypeOneofCase.Animal) {
              subBuilder.MergeFrom(Animal);
            }
            input.ReadMessage(subBuilder);
            Animal = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class Destroy : pb::IMessage<Destroy> {
    private static readonly pb::MessageParser<Destroy> _parser = new pb::MessageParser<Destroy>(() => new Destroy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Destroy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.Realtime.RealtimeReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Destroy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Destroy(Destroy other) : this() {
      switch (other.TypeCase) {
        case TypeOneofCase.Any:
          Any = other.Any.Clone();
          break;
        case TypeOneofCase.Tree:
          Tree = other.Tree.Clone();
          break;
        case TypeOneofCase.Animal:
          Animal = other.Animal.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Destroy Clone() {
      return new Destroy(this);
    }

    /// <summary>Field number for the "any" field.</summary>
    public const int AnyFieldNumber = 1;
    /// <summary>
    /// Any object, no special behaviour
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.Transform Any {
      get { return typeCase_ == TypeOneofCase.Any ? (global::Api.Realtime.Transform) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Any;
      }
    }

    /// <summary>Field number for the "tree" field.</summary>
    public const int TreeFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.Tree Tree {
      get { return typeCase_ == TypeOneofCase.Tree ? (global::Api.Realtime.Tree) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Tree;
      }
    }

    /// <summary>Field number for the "animal" field.</summary>
    public const int AnimalFieldNumber = 3;
    /// <summary>
    /// TODO: other ?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.Animal Animal {
      get { return typeCase_ == TypeOneofCase.Animal ? (global::Api.Realtime.Animal) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Animal;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      Any = 1,
      Tree = 2,
      Animal = 3,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Destroy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Destroy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Any, other.Any)) return false;
      if (!object.Equals(Tree, other.Tree)) return false;
      if (!object.Equals(Animal, other.Animal)) return false;
      if (TypeCase != other.TypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (typeCase_ == TypeOneofCase.Any) hash ^= Any.GetHashCode();
      if (typeCase_ == TypeOneofCase.Tree) hash ^= Tree.GetHashCode();
      if (typeCase_ == TypeOneofCase.Animal) hash ^= Animal.GetHashCode();
      hash ^= (int) typeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (typeCase_ == TypeOneofCase.Any) {
        output.WriteRawTag(10);
        output.WriteMessage(Any);
      }
      if (typeCase_ == TypeOneofCase.Tree) {
        output.WriteRawTag(18);
        output.WriteMessage(Tree);
      }
      if (typeCase_ == TypeOneofCase.Animal) {
        output.WriteRawTag(26);
        output.WriteMessage(Animal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (typeCase_ == TypeOneofCase.Any) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Any);
      }
      if (typeCase_ == TypeOneofCase.Tree) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tree);
      }
      if (typeCase_ == TypeOneofCase.Animal) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Animal);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Destroy other) {
      if (other == null) {
        return;
      }
      switch (other.TypeCase) {
        case TypeOneofCase.Any:
          if (Any == null) {
            Any = new global::Api.Realtime.Transform();
          }
          Any.MergeFrom(other.Any);
          break;
        case TypeOneofCase.Tree:
          if (Tree == null) {
            Tree = new global::Api.Realtime.Tree();
          }
          Tree.MergeFrom(other.Tree);
          break;
        case TypeOneofCase.Animal:
          if (Animal == null) {
            Animal = new global::Api.Realtime.Animal();
          }
          Animal.MergeFrom(other.Animal);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Api.Realtime.Transform subBuilder = new global::Api.Realtime.Transform();
            if (typeCase_ == TypeOneofCase.Any) {
              subBuilder.MergeFrom(Any);
            }
            input.ReadMessage(subBuilder);
            Any = subBuilder;
            break;
          }
          case 18: {
            global::Api.Realtime.Tree subBuilder = new global::Api.Realtime.Tree();
            if (typeCase_ == TypeOneofCase.Tree) {
              subBuilder.MergeFrom(Tree);
            }
            input.ReadMessage(subBuilder);
            Tree = subBuilder;
            break;
          }
          case 26: {
            global::Api.Realtime.Animal subBuilder = new global::Api.Realtime.Animal();
            if (typeCase_ == TypeOneofCase.Animal) {
              subBuilder.MergeFrom(Animal);
            }
            input.ReadMessage(subBuilder);
            Animal = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class Meme : pb::IMessage<Meme> {
    private static readonly pb::MessageParser<Meme> _parser = new pb::MessageParser<Meme>(() => new Meme());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Meme> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.Realtime.RealtimeReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Meme() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Meme(Meme other) : this() {
      id_ = other.id_;
      memeName_ = other.memeName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Meme Clone() {
      return new Meme(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "meme_name" field.</summary>
    public const int MemeNameFieldNumber = 2;
    private string memeName_ = "";
    /// <summary>
    /// Not really efficient but ok
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MemeName {
      get { return memeName_; }
      set {
        memeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Meme);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Meme other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (MemeName != other.MemeName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (MemeName.Length != 0) hash ^= MemeName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (MemeName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MemeName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (MemeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MemeName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Meme other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.MemeName.Length != 0) {
        MemeName = other.MemeName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 18: {
            MemeName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Client notifying being ready to handle gameplay
  /// </summary>
  public sealed partial class Initialized : pb::IMessage<Initialized> {
    private static readonly pb::MessageParser<Initialized> _parser = new pb::MessageParser<Initialized>(() => new Initialized());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Initialized> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.Realtime.RealtimeReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Initialized() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Initialized(Initialized other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Initialized Clone() {
      return new Initialized(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Initialized);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Initialized other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Initialized other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// TODO: is it worthwhile to add like "owner_id" ... ?
  /// </summary>
  public sealed partial class Transform : pb::IMessage<Transform> {
    private static readonly pb::MessageParser<Transform> _parser = new pb::MessageParser<Transform>(() => new Transform());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Transform> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.Realtime.RealtimeReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform(Transform other) : this() {
      id_ = other.id_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform Clone() {
      return new Transform(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::Protometry.Vector3.Vector3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protometry.Vector3.Vector3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 3;
    private global::Protometry.Quaternion.Quaternion rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protometry.Quaternion.Quaternion Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Transform);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Transform other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (rotation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Rotation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Transform other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Protometry.Vector3.Vector3();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          rotation_ = new global::Protometry.Quaternion.Quaternion();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 18: {
            if (position_ == null) {
              position_ = new global::Protometry.Vector3.Vector3();
            }
            input.ReadMessage(position_);
            break;
          }
          case 26: {
            if (rotation_ == null) {
              rotation_ = new global::Protometry.Quaternion.Quaternion();
            }
            input.ReadMessage(rotation_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Tree : pb::IMessage<Tree> {
    private static readonly pb::MessageParser<Tree> _parser = new pb::MessageParser<Tree>(() => new Tree());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Tree> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.Realtime.RealtimeReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tree() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tree(Tree other) : this() {
      transform_ = other.transform_ != null ? other.transform_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tree Clone() {
      return new Tree(this);
    }

    /// <summary>Field number for the "transform" field.</summary>
    public const int TransformFieldNumber = 1;
    private global::Api.Realtime.Transform transform_;
    /// <summary>
    /// TODO: other stats
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.Transform Transform {
      get { return transform_; }
      set {
        transform_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Tree);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Tree other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Transform, other.Transform)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (transform_ != null) hash ^= Transform.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (transform_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Transform);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (transform_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transform);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Tree other) {
      if (other == null) {
        return;
      }
      if (other.transform_ != null) {
        if (transform_ == null) {
          transform_ = new global::Api.Realtime.Transform();
        }
        Transform.MergeFrom(other.Transform);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (transform_ == null) {
              transform_ = new global::Api.Realtime.Transform();
            }
            input.ReadMessage(transform_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Animal : pb::IMessage<Animal> {
    private static readonly pb::MessageParser<Animal> _parser = new pb::MessageParser<Animal>(() => new Animal());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Animal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.Realtime.RealtimeReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Animal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Animal(Animal other) : this() {
      transform_ = other.transform_ != null ? other.transform_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Animal Clone() {
      return new Animal(this);
    }

    /// <summary>Field number for the "transform" field.</summary>
    public const int TransformFieldNumber = 1;
    private global::Api.Realtime.Transform transform_;
    /// <summary>
    /// TODO: other stats
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.Transform Transform {
      get { return transform_; }
      set {
        transform_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Animal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Animal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Transform, other.Transform)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (transform_ != null) hash ^= Transform.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (transform_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Transform);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (transform_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transform);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Animal other) {
      if (other == null) {
        return;
      }
      if (other.transform_ != null) {
        if (transform_ == null) {
          transform_ = new global::Api.Realtime.Transform();
        }
        Transform.MergeFrom(other.Transform);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (transform_ == null) {
              transform_ = new global::Api.Realtime.Transform();
            }
            input.ReadMessage(transform_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Ask a logic server to transfer ownership of an object
  /// </summary>
  public sealed partial class RequestTransferOwnership : pb::IMessage<RequestTransferOwnership> {
    private static readonly pb::MessageParser<RequestTransferOwnership> _parser = new pb::MessageParser<RequestTransferOwnership>(() => new RequestTransferOwnership());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestTransferOwnership> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.Realtime.RealtimeReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestTransferOwnership() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestTransferOwnership(RequestTransferOwnership other) : this() {
      transform_ = other.transform_ != null ? other.transform_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestTransferOwnership Clone() {
      return new RequestTransferOwnership(this);
    }

    /// <summary>Field number for the "transform" field.</summary>
    public const int TransformFieldNumber = 1;
    private global::Api.Realtime.Transform transform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.Transform Transform {
      get { return transform_; }
      set {
        transform_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestTransferOwnership);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestTransferOwnership other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Transform, other.Transform)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (transform_ != null) hash ^= Transform.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (transform_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Transform);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (transform_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transform);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestTransferOwnership other) {
      if (other == null) {
        return;
      }
      if (other.transform_ != null) {
        if (transform_ == null) {
          transform_ = new global::Api.Realtime.Transform();
        }
        Transform.MergeFrom(other.Transform);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (transform_ == null) {
              transform_ = new global::Api.Realtime.Transform();
            }
            input.ReadMessage(transform_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Real time characteristics of a living being
  /// </summary>
  public sealed partial class Characteristics : pb::IMessage<Characteristics> {
    private static readonly pb::MessageParser<Characteristics> _parser = new pb::MessageParser<Characteristics>(() => new Characteristics());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Characteristics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.Realtime.RealtimeReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Characteristics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Characteristics(Characteristics other) : this() {
      computation_ = other.computation_;
      life_ = other.life_;
      robustness_ = other.robustness_;
      energy_ = other.energy_;
      reproductionCost_ = other.reproductionCost_;
      switch (other.TypeCase) {
        case TypeOneofCase.AnimalCharacteristics:
          AnimalCharacteristics = other.AnimalCharacteristics.Clone();
          break;
        case TypeOneofCase.VegetationCharacteristics:
          VegetationCharacteristics = other.VegetationCharacteristics.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Characteristics Clone() {
      return new Characteristics(this);
    }

    /// <summary>Field number for the "computation" field.</summary>
    public const int ComputationFieldNumber = 1;
    private float computation_;
    /// <summary>
    /// E.g. more = more decisions, less delay, more reactive ...
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Computation {
      get { return computation_; }
      set {
        computation_ = value;
      }
    }

    /// <summary>Field number for the "life" field.</summary>
    public const int LifeFieldNumber = 2;
    private float life_;
    /// <summary>
    /// 0 = dead, highly related to energy
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Life {
      get { return life_; }
      set {
        life_ = value;
      }
    }

    /// <summary>Field number for the "robustness" field.</summary>
    public const int RobustnessFieldNumber = 3;
    private float robustness_;
    /// <summary>
    /// ? Resistance, anti fragility ?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Robustness {
      get { return robustness_; }
      set {
        robustness_ = value;
      }
    }

    /// <summary>Field number for the "energy" field.</summary>
    public const int EnergyFieldNumber = 4;
    private float energy_;
    /// <summary>
    /// Current energy
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Energy {
      get { return energy_; }
      set {
        energy_ = value;
      }
    }

    /// <summary>Field number for the "reproduction_cost" field.</summary>
    public const int ReproductionCostFieldNumber = 5;
    private float reproductionCost_;
    /// <summary>
    /// Cost in energy
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ReproductionCost {
      get { return reproductionCost_; }
      set {
        reproductionCost_ = value;
      }
    }

    /// <summary>Field number for the "animal_characteristics" field.</summary>
    public const int AnimalCharacteristicsFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.Characteristics.Types.AnimalCharacteristics AnimalCharacteristics {
      get { return typeCase_ == TypeOneofCase.AnimalCharacteristics ? (global::Api.Realtime.Characteristics.Types.AnimalCharacteristics) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.AnimalCharacteristics;
      }
    }

    /// <summary>Field number for the "vegetation_characteristics" field.</summary>
    public const int VegetationCharacteristicsFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.Characteristics.Types.VegetationCharacteristics VegetationCharacteristics {
      get { return typeCase_ == TypeOneofCase.VegetationCharacteristics ? (global::Api.Realtime.Characteristics.Types.VegetationCharacteristics) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.VegetationCharacteristics;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      AnimalCharacteristics = 6,
      VegetationCharacteristics = 7,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Characteristics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Characteristics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Computation, other.Computation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Life, other.Life)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Robustness, other.Robustness)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Energy, other.Energy)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ReproductionCost, other.ReproductionCost)) return false;
      if (!object.Equals(AnimalCharacteristics, other.AnimalCharacteristics)) return false;
      if (!object.Equals(VegetationCharacteristics, other.VegetationCharacteristics)) return false;
      if (TypeCase != other.TypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Computation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Computation);
      if (Life != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Life);
      if (Robustness != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Robustness);
      if (Energy != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Energy);
      if (ReproductionCost != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ReproductionCost);
      if (typeCase_ == TypeOneofCase.AnimalCharacteristics) hash ^= AnimalCharacteristics.GetHashCode();
      if (typeCase_ == TypeOneofCase.VegetationCharacteristics) hash ^= VegetationCharacteristics.GetHashCode();
      hash ^= (int) typeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Computation != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Computation);
      }
      if (Life != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Life);
      }
      if (Robustness != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Robustness);
      }
      if (Energy != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Energy);
      }
      if (ReproductionCost != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(ReproductionCost);
      }
      if (typeCase_ == TypeOneofCase.AnimalCharacteristics) {
        output.WriteRawTag(50);
        output.WriteMessage(AnimalCharacteristics);
      }
      if (typeCase_ == TypeOneofCase.VegetationCharacteristics) {
        output.WriteRawTag(58);
        output.WriteMessage(VegetationCharacteristics);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Computation != 0F) {
        size += 1 + 4;
      }
      if (Life != 0F) {
        size += 1 + 4;
      }
      if (Robustness != 0F) {
        size += 1 + 4;
      }
      if (Energy != 0F) {
        size += 1 + 4;
      }
      if (ReproductionCost != 0F) {
        size += 1 + 4;
      }
      if (typeCase_ == TypeOneofCase.AnimalCharacteristics) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AnimalCharacteristics);
      }
      if (typeCase_ == TypeOneofCase.VegetationCharacteristics) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VegetationCharacteristics);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Characteristics other) {
      if (other == null) {
        return;
      }
      if (other.Computation != 0F) {
        Computation = other.Computation;
      }
      if (other.Life != 0F) {
        Life = other.Life;
      }
      if (other.Robustness != 0F) {
        Robustness = other.Robustness;
      }
      if (other.Energy != 0F) {
        Energy = other.Energy;
      }
      if (other.ReproductionCost != 0F) {
        ReproductionCost = other.ReproductionCost;
      }
      switch (other.TypeCase) {
        case TypeOneofCase.AnimalCharacteristics:
          if (AnimalCharacteristics == null) {
            AnimalCharacteristics = new global::Api.Realtime.Characteristics.Types.AnimalCharacteristics();
          }
          AnimalCharacteristics.MergeFrom(other.AnimalCharacteristics);
          break;
        case TypeOneofCase.VegetationCharacteristics:
          if (VegetationCharacteristics == null) {
            VegetationCharacteristics = new global::Api.Realtime.Characteristics.Types.VegetationCharacteristics();
          }
          VegetationCharacteristics.MergeFrom(other.VegetationCharacteristics);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Computation = input.ReadFloat();
            break;
          }
          case 21: {
            Life = input.ReadFloat();
            break;
          }
          case 29: {
            Robustness = input.ReadFloat();
            break;
          }
          case 37: {
            Energy = input.ReadFloat();
            break;
          }
          case 45: {
            ReproductionCost = input.ReadFloat();
            break;
          }
          case 50: {
            global::Api.Realtime.Characteristics.Types.AnimalCharacteristics subBuilder = new global::Api.Realtime.Characteristics.Types.AnimalCharacteristics();
            if (typeCase_ == TypeOneofCase.AnimalCharacteristics) {
              subBuilder.MergeFrom(AnimalCharacteristics);
            }
            input.ReadMessage(subBuilder);
            AnimalCharacteristics = subBuilder;
            break;
          }
          case 58: {
            global::Api.Realtime.Characteristics.Types.VegetationCharacteristics subBuilder = new global::Api.Realtime.Characteristics.Types.VegetationCharacteristics();
            if (typeCase_ == TypeOneofCase.VegetationCharacteristics) {
              subBuilder.MergeFrom(VegetationCharacteristics);
            }
            input.ReadMessage(subBuilder);
            VegetationCharacteristics = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Characteristics message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class AnimalCharacteristics : pb::IMessage<AnimalCharacteristics> {
        private static readonly pb::MessageParser<AnimalCharacteristics> _parser = new pb::MessageParser<AnimalCharacteristics>(() => new AnimalCharacteristics());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AnimalCharacteristics> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Api.Realtime.Characteristics.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnimalCharacteristics() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnimalCharacteristics(AnimalCharacteristics other) : this() {
          speed_ = other.speed_;
          randomMovementRange_ = other.randomMovementRange_;
          sightRange_ = other.sightRange_;
          eatRange_ = other.eatRange_;
          metabolism_ = other.metabolism_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnimalCharacteristics Clone() {
          return new AnimalCharacteristics(this);
        }

        /// <summary>Field number for the "speed" field.</summary>
        public const int SpeedFieldNumber = 1;
        private float speed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Speed {
          get { return speed_; }
          set {
            speed_ = value;
          }
        }

        /// <summary>Field number for the "random_movement_range" field.</summary>
        public const int RandomMovementRangeFieldNumber = 2;
        private float randomMovementRange_;
        /// <summary>
        /// these are very hard coded chars ?
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float RandomMovementRange {
          get { return randomMovementRange_; }
          set {
            randomMovementRange_ = value;
          }
        }

        /// <summary>Field number for the "sight_range" field.</summary>
        public const int SightRangeFieldNumber = 3;
        private float sightRange_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float SightRange {
          get { return sightRange_; }
          set {
            sightRange_ = value;
          }
        }

        /// <summary>Field number for the "eat_range" field.</summary>
        public const int EatRangeFieldNumber = 4;
        private float eatRange_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float EatRange {
          get { return eatRange_; }
          set {
            eatRange_ = value;
          }
        }

        /// <summary>Field number for the "metabolism" field.</summary>
        public const int MetabolismFieldNumber = 5;
        private float metabolism_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Metabolism {
          get { return metabolism_; }
          set {
            metabolism_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AnimalCharacteristics);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AnimalCharacteristics other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Speed, other.Speed)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RandomMovementRange, other.RandomMovementRange)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SightRange, other.SightRange)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EatRange, other.EatRange)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Metabolism, other.Metabolism)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Speed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Speed);
          if (RandomMovementRange != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RandomMovementRange);
          if (SightRange != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SightRange);
          if (EatRange != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EatRange);
          if (Metabolism != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Metabolism);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Speed != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(Speed);
          }
          if (RandomMovementRange != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(RandomMovementRange);
          }
          if (SightRange != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(SightRange);
          }
          if (EatRange != 0F) {
            output.WriteRawTag(37);
            output.WriteFloat(EatRange);
          }
          if (Metabolism != 0F) {
            output.WriteRawTag(45);
            output.WriteFloat(Metabolism);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Speed != 0F) {
            size += 1 + 4;
          }
          if (RandomMovementRange != 0F) {
            size += 1 + 4;
          }
          if (SightRange != 0F) {
            size += 1 + 4;
          }
          if (EatRange != 0F) {
            size += 1 + 4;
          }
          if (Metabolism != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AnimalCharacteristics other) {
          if (other == null) {
            return;
          }
          if (other.Speed != 0F) {
            Speed = other.Speed;
          }
          if (other.RandomMovementRange != 0F) {
            RandomMovementRange = other.RandomMovementRange;
          }
          if (other.SightRange != 0F) {
            SightRange = other.SightRange;
          }
          if (other.EatRange != 0F) {
            EatRange = other.EatRange;
          }
          if (other.Metabolism != 0F) {
            Metabolism = other.Metabolism;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                Speed = input.ReadFloat();
                break;
              }
              case 21: {
                RandomMovementRange = input.ReadFloat();
                break;
              }
              case 29: {
                SightRange = input.ReadFloat();
                break;
              }
              case 37: {
                EatRange = input.ReadFloat();
                break;
              }
              case 45: {
                Metabolism = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

      public sealed partial class VegetationCharacteristics : pb::IMessage<VegetationCharacteristics> {
        private static readonly pb::MessageParser<VegetationCharacteristics> _parser = new pb::MessageParser<VegetationCharacteristics>(() => new VegetationCharacteristics());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<VegetationCharacteristics> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Api.Realtime.Characteristics.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VegetationCharacteristics() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VegetationCharacteristics(VegetationCharacteristics other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VegetationCharacteristics Clone() {
          return new VegetationCharacteristics(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as VegetationCharacteristics);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(VegetationCharacteristics other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(VegetationCharacteristics other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class Experiences : pb::IMessage<Experiences> {
    private static readonly pb::MessageParser<Experiences> _parser = new pb::MessageParser<Experiences>(() => new Experiences());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Experiences> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.Realtime.RealtimeReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Experiences() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Experiences(Experiences other) : this() {
      animalCharacteristics_ = other.animalCharacteristics_ != null ? other.animalCharacteristics_.Clone() : null;
      animalDistribution_ = other.animalDistribution_ != null ? other.animalDistribution_.Clone() : null;
      includeCarnivorous_ = other.includeCarnivorous_;
      vegetationCharacteristics_ = other.vegetationCharacteristics_ != null ? other.vegetationCharacteristics_.Clone() : null;
      vegetationDistribution_ = other.vegetationDistribution_ != null ? other.vegetationDistribution_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Experiences Clone() {
      return new Experiences(this);
    }

    /// <summary>Field number for the "animal_characteristics" field.</summary>
    public const int AnimalCharacteristicsFieldNumber = 1;
    private global::Api.Realtime.Characteristics animalCharacteristics_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.Characteristics AnimalCharacteristics {
      get { return animalCharacteristics_; }
      set {
        animalCharacteristics_ = value;
      }
    }

    /// <summary>Field number for the "animal_distribution" field.</summary>
    public const int AnimalDistributionFieldNumber = 2;
    private global::Api.Realtime.Experiences.Types.PopulationDistribution animalDistribution_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.Experiences.Types.PopulationDistribution AnimalDistribution {
      get { return animalDistribution_; }
      set {
        animalDistribution_ = value;
      }
    }

    /// <summary>Field number for the "include_carnivorous" field.</summary>
    public const int IncludeCarnivorousFieldNumber = 3;
    private bool includeCarnivorous_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeCarnivorous {
      get { return includeCarnivorous_; }
      set {
        includeCarnivorous_ = value;
      }
    }

    /// <summary>Field number for the "vegetation_characteristics" field.</summary>
    public const int VegetationCharacteristicsFieldNumber = 4;
    private global::Api.Realtime.Characteristics vegetationCharacteristics_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.Characteristics VegetationCharacteristics {
      get { return vegetationCharacteristics_; }
      set {
        vegetationCharacteristics_ = value;
      }
    }

    /// <summary>Field number for the "vegetation_distribution" field.</summary>
    public const int VegetationDistributionFieldNumber = 5;
    private global::Api.Realtime.Experiences.Types.PopulationDistribution vegetationDistribution_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.Experiences.Types.PopulationDistribution VegetationDistribution {
      get { return vegetationDistribution_; }
      set {
        vegetationDistribution_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Experiences);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Experiences other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AnimalCharacteristics, other.AnimalCharacteristics)) return false;
      if (!object.Equals(AnimalDistribution, other.AnimalDistribution)) return false;
      if (IncludeCarnivorous != other.IncludeCarnivorous) return false;
      if (!object.Equals(VegetationCharacteristics, other.VegetationCharacteristics)) return false;
      if (!object.Equals(VegetationDistribution, other.VegetationDistribution)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (animalCharacteristics_ != null) hash ^= AnimalCharacteristics.GetHashCode();
      if (animalDistribution_ != null) hash ^= AnimalDistribution.GetHashCode();
      if (IncludeCarnivorous != false) hash ^= IncludeCarnivorous.GetHashCode();
      if (vegetationCharacteristics_ != null) hash ^= VegetationCharacteristics.GetHashCode();
      if (vegetationDistribution_ != null) hash ^= VegetationDistribution.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (animalCharacteristics_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AnimalCharacteristics);
      }
      if (animalDistribution_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AnimalDistribution);
      }
      if (IncludeCarnivorous != false) {
        output.WriteRawTag(24);
        output.WriteBool(IncludeCarnivorous);
      }
      if (vegetationCharacteristics_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(VegetationCharacteristics);
      }
      if (vegetationDistribution_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(VegetationDistribution);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (animalCharacteristics_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AnimalCharacteristics);
      }
      if (animalDistribution_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AnimalDistribution);
      }
      if (IncludeCarnivorous != false) {
        size += 1 + 1;
      }
      if (vegetationCharacteristics_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VegetationCharacteristics);
      }
      if (vegetationDistribution_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VegetationDistribution);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Experiences other) {
      if (other == null) {
        return;
      }
      if (other.animalCharacteristics_ != null) {
        if (animalCharacteristics_ == null) {
          animalCharacteristics_ = new global::Api.Realtime.Characteristics();
        }
        AnimalCharacteristics.MergeFrom(other.AnimalCharacteristics);
      }
      if (other.animalDistribution_ != null) {
        if (animalDistribution_ == null) {
          animalDistribution_ = new global::Api.Realtime.Experiences.Types.PopulationDistribution();
        }
        AnimalDistribution.MergeFrom(other.AnimalDistribution);
      }
      if (other.IncludeCarnivorous != false) {
        IncludeCarnivorous = other.IncludeCarnivorous;
      }
      if (other.vegetationCharacteristics_ != null) {
        if (vegetationCharacteristics_ == null) {
          vegetationCharacteristics_ = new global::Api.Realtime.Characteristics();
        }
        VegetationCharacteristics.MergeFrom(other.VegetationCharacteristics);
      }
      if (other.vegetationDistribution_ != null) {
        if (vegetationDistribution_ == null) {
          vegetationDistribution_ = new global::Api.Realtime.Experiences.Types.PopulationDistribution();
        }
        VegetationDistribution.MergeFrom(other.VegetationDistribution);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (animalCharacteristics_ == null) {
              animalCharacteristics_ = new global::Api.Realtime.Characteristics();
            }
            input.ReadMessage(animalCharacteristics_);
            break;
          }
          case 18: {
            if (animalDistribution_ == null) {
              animalDistribution_ = new global::Api.Realtime.Experiences.Types.PopulationDistribution();
            }
            input.ReadMessage(animalDistribution_);
            break;
          }
          case 24: {
            IncludeCarnivorous = input.ReadBool();
            break;
          }
          case 34: {
            if (vegetationCharacteristics_ == null) {
              vegetationCharacteristics_ = new global::Api.Realtime.Characteristics();
            }
            input.ReadMessage(vegetationCharacteristics_);
            break;
          }
          case 42: {
            if (vegetationDistribution_ == null) {
              vegetationDistribution_ = new global::Api.Realtime.Experiences.Types.PopulationDistribution();
            }
            input.ReadMessage(vegetationDistribution_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Experiences message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// How should we spawn hosts, tons grouped on a specific point or sprayed far away ... ?
      /// </summary>
      public sealed partial class PopulationDistribution : pb::IMessage<PopulationDistribution> {
        private static readonly pb::MessageParser<PopulationDistribution> _parser = new pb::MessageParser<PopulationDistribution>(() => new PopulationDistribution());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PopulationDistribution> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Api.Realtime.Experiences.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PopulationDistribution() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PopulationDistribution(PopulationDistribution other) : this() {
          initialAmount_ = other.initialAmount_;
          spray_ = other.spray_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PopulationDistribution Clone() {
          return new PopulationDistribution(this);
        }

        /// <summary>Field number for the "initial_amount" field.</summary>
        public const int InitialAmountFieldNumber = 1;
        private long initialAmount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long InitialAmount {
          get { return initialAmount_; }
          set {
            initialAmount_ = value;
          }
        }

        /// <summary>Field number for the "spray" field.</summary>
        public const int SprayFieldNumber = 2;
        private float spray_;
        /// <summary>
        /// ...
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Spray {
          get { return spray_; }
          set {
            spray_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PopulationDistribution);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PopulationDistribution other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (InitialAmount != other.InitialAmount) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Spray, other.Spray)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (InitialAmount != 0L) hash ^= InitialAmount.GetHashCode();
          if (Spray != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Spray);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (InitialAmount != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(InitialAmount);
          }
          if (Spray != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(Spray);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (InitialAmount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(InitialAmount);
          }
          if (Spray != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PopulationDistribution other) {
          if (other == null) {
            return;
          }
          if (other.InitialAmount != 0L) {
            InitialAmount = other.InitialAmount;
          }
          if (other.Spray != 0F) {
            Spray = other.Spray;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                InitialAmount = input.ReadInt64();
                break;
              }
              case 21: {
                Spray = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Initial proc gen traits
      /// </summary>
      public sealed partial class Map : pb::IMessage<Map> {
        private static readonly pb::MessageParser<Map> _parser = new pb::MessageParser<Map>(() => new Map());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Map> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Api.Realtime.Experiences.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Map() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Map(Map other) : this() {
          water_ = other.water_;
          diversity_ = other.diversity_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Map Clone() {
          return new Map(this);
        }

        /// <summary>Field number for the "water" field.</summary>
        public const int WaterFieldNumber = 1;
        private bool water_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Water {
          get { return water_; }
          set {
            water_ = value;
          }
        }

        /// <summary>Field number for the "diversity" field.</summary>
        public const int DiversityFieldNumber = 2;
        private ulong diversity_;
        /// <summary>
        /// linear scale: desert, mountains ...
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Diversity {
          get { return diversity_; }
          set {
            diversity_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Map);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Map other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Water != other.Water) return false;
          if (Diversity != other.Diversity) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Water != false) hash ^= Water.GetHashCode();
          if (Diversity != 0UL) hash ^= Diversity.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Water != false) {
            output.WriteRawTag(8);
            output.WriteBool(Water);
          }
          if (Diversity != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(Diversity);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Water != false) {
            size += 1 + 1;
          }
          if (Diversity != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Diversity);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Map other) {
          if (other == null) {
            return;
          }
          if (other.Water != false) {
            Water = other.Water;
          }
          if (other.Diversity != 0UL) {
            Diversity = other.Diversity;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Water = input.ReadBool();
                break;
              }
              case 16: {
                Diversity = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class GeneralParameters : pb::IMessage<GeneralParameters> {
        private static readonly pb::MessageParser<GeneralParameters> _parser = new pb::MessageParser<GeneralParameters>(() => new GeneralParameters());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GeneralParameters> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Api.Realtime.Experiences.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GeneralParameters() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GeneralParameters(GeneralParameters other) : this() {
          initialTimescale_ = other.initialTimescale_;
          timeLimit_ = other.timeLimit_;
          repeat_ = other.repeat_;
          saveStatistics_ = other.saveStatistics_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GeneralParameters Clone() {
          return new GeneralParameters(this);
        }

        /// <summary>Field number for the "initial_timescale" field.</summary>
        public const int InitialTimescaleFieldNumber = 1;
        private uint initialTimescale_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint InitialTimescale {
          get { return initialTimescale_; }
          set {
            initialTimescale_ = value;
          }
        }

        /// <summary>Field number for the "time_limit" field.</summary>
        public const int TimeLimitFieldNumber = 2;
        private uint timeLimit_;
        /// <summary>
        /// Stop experience after x time
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TimeLimit {
          get { return timeLimit_; }
          set {
            timeLimit_ = value;
          }
        }

        /// <summary>Field number for the "repeat" field.</summary>
        public const int RepeatFieldNumber = 3;
        private bool repeat_;
        /// <summary>
        /// Repeat experience ?
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Repeat {
          get { return repeat_; }
          set {
            repeat_ = value;
          }
        }

        /// <summary>Field number for the "save_statistics" field.</summary>
        public const int SaveStatisticsFieldNumber = 4;
        private bool saveStatistics_;
        /// <summary>
        /// [Regularly] save characteristics statistics ?
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool SaveStatistics {
          get { return saveStatistics_; }
          set {
            saveStatistics_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GeneralParameters);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GeneralParameters other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (InitialTimescale != other.InitialTimescale) return false;
          if (TimeLimit != other.TimeLimit) return false;
          if (Repeat != other.Repeat) return false;
          if (SaveStatistics != other.SaveStatistics) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (InitialTimescale != 0) hash ^= InitialTimescale.GetHashCode();
          if (TimeLimit != 0) hash ^= TimeLimit.GetHashCode();
          if (Repeat != false) hash ^= Repeat.GetHashCode();
          if (SaveStatistics != false) hash ^= SaveStatistics.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (InitialTimescale != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(InitialTimescale);
          }
          if (TimeLimit != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(TimeLimit);
          }
          if (Repeat != false) {
            output.WriteRawTag(24);
            output.WriteBool(Repeat);
          }
          if (SaveStatistics != false) {
            output.WriteRawTag(32);
            output.WriteBool(SaveStatistics);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (InitialTimescale != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InitialTimescale);
          }
          if (TimeLimit != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeLimit);
          }
          if (Repeat != false) {
            size += 1 + 1;
          }
          if (SaveStatistics != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GeneralParameters other) {
          if (other == null) {
            return;
          }
          if (other.InitialTimescale != 0) {
            InitialTimescale = other.InitialTimescale;
          }
          if (other.TimeLimit != 0) {
            TimeLimit = other.TimeLimit;
          }
          if (other.Repeat != false) {
            Repeat = other.Repeat;
          }
          if (other.SaveStatistics != false) {
            SaveStatistics = other.SaveStatistics;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                InitialTimescale = input.ReadUInt32();
                break;
              }
              case 16: {
                TimeLimit = input.ReadUInt32();
                break;
              }
              case 24: {
                Repeat = input.ReadBool();
                break;
              }
              case 32: {
                SaveStatistics = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code

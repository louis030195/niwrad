syntax = "proto3";

package nakama.niwrad.api.rpc;

option csharp_namespace = "Api.Rpc";
option go_package = "nakama/niwrad/api/rpc;rpc";
// import "github.com/heroiclabs/nakama-common/rtapi/realtime.proto";
// import "realtime.proto";


message CreateMatchRequest {
}

enum CreateMatchCompletionResult {
	createMatchCompletionResultUnknownInternalFailure        = 0;
	createMatchCompletionResultSucceeded                     = 1;
	createMatchCompletionResultUnknownClientFailure          = -100;
	createMatchCompletionResultAlreadyInMatchOfSpecifiedType = -99;
	createMatchCompletionResultAlreadyCreatingMatch          = -98;
	createMatchCompletionResultAlreadyInMatch                = -97;
	createMatchCompletionResultFailedToCreateMucRoom         = -96;
	createMatchCompletionResultNoResponse                    = -95;
	createMatchCompletionResultLoggedOut                     = -94;
}

message CreateMatchResponse {
    string match_id = 1;
    CreateMatchCompletionResult result = 2;
}

message StopMatchRequest {
	string match_id = 1;
}

enum StopMatchCompletionResult {
	stopServerCompletionResultUnknownInternalFailure        = 0;
	stopServerCompletionResultSucceeded                     = 1;
}

message StopMatchResponse {
	StopMatchCompletionResult result = 1;
}

message DeleteUsersRequest {
}

enum DeleteUsersCompletionResult {
	deleteUsersCompletionResultUnknownInternalFailure        = 0;
	deleteUsersCompletionResultSucceeded                     = 1;
}

	message DeleteUsersResponse {
		DeleteUsersCompletionResult result = 1;
	}

message ListMatchesResponse {
	repeated string matches_id = 1;
}

// Naive leaderboard record that reward the one with the biggest computer ;)
message NaiveLeaderboardRequest {
    int64 hosts = 1;
} // No response

// message ShareExperienceRequest {
//     realtime.Experience experience = 1;
// }

// enum ShareExperienceCompletionResult {
// 	shareExperienceCompletionResultUnknownInternalFailure        = 0; // TODO: maybe case user spamming share, refusal
// 	shareExperienceCompletionResultSucceeded                     = 1;
// 	shareExperienceCompletionResultInvalidName          = -100;
// }

// message ShareExperienceResponse {
//     ShareExperienceCompletionResult result = 1;
// }

// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: realtime.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Api.Realtime {

  /// <summary>Holder for reflection information generated from realtime.proto</summary>
  public static partial class RealtimeReflection {

    #region Descriptor
    /// <summary>File descriptor for realtime.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RealtimeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5yZWFsdGltZS5wcm90bxIabmFrYW1hLm5pd3JhZC5hcGkucmVhbHRpbWUa",
            "O2dpdGh1Yi5jb20vbG91aXMwMzAxOTUvcHJvdG9tZXRyeS9hcGkvdmVjdG9y",
            "My92ZWN0b3IzLnByb3RvGkFnaXRodWIuY29tL2xvdWlzMDMwMTk1L3Byb3Rv",
            "bWV0cnkvYXBpL3F1YXRlcm5pb24vcXVhdGVybmlvbi5wcm90bxo5Z2l0aHVi",
            "LmNvbS9sb3VpczAzMDE5NS9wcm90b21ldHJ5L2FwaS92b2x1bWUvdm9sdW1l",
            "LnByb3RvIpMFCgZQYWNrZXQSKwoGaW1wYWN0GAQgASgLMhsucHJvdG9tZXRy",
            "eS52ZWN0b3IzLlZlY3RvcjMSOwoKbWF0Y2hfam9pbhgHIAEoCzIlLm5ha2Ft",
            "YS5uaXdyYWQuYXBpLnJlYWx0aW1lLk1hdGNoSm9pbkgAEi4KA21hcBgIIAEo",
            "CzIfLm5ha2FtYS5uaXdyYWQuYXBpLnJlYWx0aW1lLk1hcEgAEkcKEHVwZGF0",
            "ZV90cmFuc2Zvcm0YCiABKAsyKy5uYWthbWEubml3cmFkLmFwaS5yZWFsdGlt",
            "ZS5VcGRhdGVUcmFuc2Zvcm1IABJECg9uYXZfbWVzaF91cGRhdGUYCyABKAsy",
            "KS5uYWthbWEubml3cmFkLmFwaS5yZWFsdGltZS5OYXZNZXNoVXBkYXRlSAAS",
            "MgoFc3Bhd24YDyABKAsyIS5uYWthbWEubml3cmFkLmFwaS5yZWFsdGltZS5T",
            "cGF3bkgAEjoKDXJlcXVlc3Rfc3Bhd24YECABKAsyIS5uYWthbWEubml3cmFk",
            "LmFwaS5yZWFsdGltZS5TcGF3bkgAEjYKB2Rlc3Ryb3kYESABKAsyIy5uYWth",
            "bWEubml3cmFkLmFwaS5yZWFsdGltZS5EZXN0cm95SAASPgoPcmVxdWVzdF9k",
            "ZXN0cm95GBIgASgLMiMubmFrYW1hLm5pd3JhZC5hcGkucmVhbHRpbWUuRGVz",
            "dHJveUgAEjAKBG1lbWUYEyABKAsyIC5uYWthbWEubml3cmFkLmFwaS5yZWFs",
            "dGltZS5NZW1lSAASPgoLaW5pdGlhbGl6ZWQYGSABKAsyJy5uYWthbWEubml3",
            "cmFkLmFwaS5yZWFsdGltZS5Jbml0aWFsaXplZEgAQgYKBHR5cGUiQQoJTWF0",
            "Y2hKb2luEiYKBnJlZ2lvbhgBIAEoCzIWLnByb3RvbWV0cnkudm9sdW1lLkJv",
            "eBIMCgRzZWVkGAIgASgDIlYKA01hcBIOCgZ4X2Jhc2UYASABKAMSDgoGeV9i",
            "YXNlGAIgASgDEi8KA21hcBgDIAEoCzIiLm5ha2FtYS5uaXdyYWQuYXBpLnJl",
            "YWx0aW1lLk1hdHJpeCI5CgZNYXRyaXgSLwoEcm93cxgBIAMoCzIhLm5ha2Ft",
            "YS5uaXdyYWQuYXBpLnJlYWx0aW1lLkFycmF5IhkKBUFycmF5EhAKBGNvbHMY",
            "ASADKAFCAhABIksKD1VwZGF0ZVRyYW5zZm9ybRI4Cgl0cmFuc2Zvcm0YASAB",
            "KAsyJS5uYWthbWEubml3cmFkLmFwaS5yZWFsdGltZS5UcmFuc2Zvcm0iTQoN",
            "TmF2TWVzaFVwZGF0ZRIKCgJpZBgBIAEoBBIwCgtkZXN0aW5hdGlvbhgCIAEo",
            "CzIbLnByb3RvbWV0cnkudmVjdG9yMy5WZWN0b3IzIq0BCgVTcGF3bhI0CgNh",
            "bnkYASABKAsyJS5uYWthbWEubml3cmFkLmFwaS5yZWFsdGltZS5UcmFuc2Zv",
            "cm1IABIwCgR0cmVlGAIgASgLMiAubmFrYW1hLm5pd3JhZC5hcGkucmVhbHRp",
            "bWUuVHJlZUgAEjQKBmFuaW1hbBgDIAEoCzIiLm5ha2FtYS5uaXdyYWQuYXBp",
            "LnJlYWx0aW1lLkFuaW1hbEgAQgYKBHR5cGUirwEKB0Rlc3Ryb3kSNAoDYW55",
            "GAEgASgLMiUubmFrYW1hLm5pd3JhZC5hcGkucmVhbHRpbWUuVHJhbnNmb3Jt",
            "SAASMAoEdHJlZRgCIAEoCzIgLm5ha2FtYS5uaXdyYWQuYXBpLnJlYWx0aW1l",
            "LlRyZWVIABI0CgZhbmltYWwYAyABKAsyIi5uYWthbWEubml3cmFkLmFwaS5y",
            "ZWFsdGltZS5BbmltYWxIAEIGCgR0eXBlIiUKBE1lbWUSCgoCaWQYASABKAQS",
            "EQoJbWVtZV9uYW1lGAIgASgJIg0KC0luaXRpYWxpemVkInsKCVRyYW5zZm9y",
            "bRIKCgJpZBgBIAEoBBItCghwb3NpdGlvbhgCIAEoCzIbLnByb3RvbWV0cnku",
            "dmVjdG9yMy5WZWN0b3IzEjMKCHJvdGF0aW9uGAMgASgLMiEucHJvdG9tZXRy",
            "eS5xdWF0ZXJuaW9uLlF1YXRlcm5pb24iQAoEVHJlZRI4Cgl0cmFuc2Zvcm0Y",
            "ASABKAsyJS5uYWthbWEubml3cmFkLmFwaS5yZWFsdGltZS5UcmFuc2Zvcm0i",
            "QgoGQW5pbWFsEjgKCXRyYW5zZm9ybRgBIAEoCzIlLm5ha2FtYS5uaXdyYWQu",
            "YXBpLnJlYWx0aW1lLlRyYW5zZm9ybSJUChhSZXF1ZXN0VHJhbnNmZXJPd25l",
            "cnNoaXASOAoJdHJhbnNmb3JtGAEgASgLMiUubmFrYW1hLm5pd3JhZC5hcGku",
            "cmVhbHRpbWUuVHJhbnNmb3JtQjRaI25ha2FtYS9uaXdyYWQvYXBpL3JlYWx0",
            "aW1lO3JlYWx0aW1lqgIMQXBpLlJlYWx0aW1lYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Protometry.Vector3.Vector3Reflection.Descriptor, global::Protometry.Quaternion.QuaternionReflection.Descriptor, global::Protometry.Volume.VolumeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Realtime.Packet), global::Api.Realtime.Packet.Parser, new[]{ "Impact", "MatchJoin", "Map", "UpdateTransform", "NavMeshUpdate", "Spawn", "RequestSpawn", "Destroy", "RequestDestroy", "Meme", "Initialized" }, new[]{ "Type" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Realtime.MatchJoin), global::Api.Realtime.MatchJoin.Parser, new[]{ "Region", "Seed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Realtime.Map), global::Api.Realtime.Map.Parser, new[]{ "XBase", "YBase", "Map_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Realtime.Matrix), global::Api.Realtime.Matrix.Parser, new[]{ "Rows" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Realtime.Array), global::Api.Realtime.Array.Parser, new[]{ "Cols" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Realtime.UpdateTransform), global::Api.Realtime.UpdateTransform.Parser, new[]{ "Transform" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Realtime.NavMeshUpdate), global::Api.Realtime.NavMeshUpdate.Parser, new[]{ "Id", "Destination" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Realtime.Spawn), global::Api.Realtime.Spawn.Parser, new[]{ "Any", "Tree", "Animal" }, new[]{ "Type" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Realtime.Destroy), global::Api.Realtime.Destroy.Parser, new[]{ "Any", "Tree", "Animal" }, new[]{ "Type" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Realtime.Meme), global::Api.Realtime.Meme.Parser, new[]{ "Id", "MemeName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Realtime.Initialized), global::Api.Realtime.Initialized.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Realtime.Transform), global::Api.Realtime.Transform.Parser, new[]{ "Id", "Position", "Rotation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Realtime.Tree), global::Api.Realtime.Tree.Parser, new[]{ "Transform" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Realtime.Animal), global::Api.Realtime.Animal.Parser, new[]{ "Transform" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Realtime.RequestTransferOwnership), global::Api.Realtime.RequestTransferOwnership.Parser, new[]{ "Transform" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// TODO: kind of ugly to use same struct for client -> server and server -> client ?
  /// </summary>
  public sealed partial class Packet : pb::IMessage<Packet> {
    private static readonly pb::MessageParser<Packet> _parser = new pb::MessageParser<Packet>(() => new Packet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Packet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.Realtime.RealtimeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Packet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Packet(Packet other) : this() {
      impact_ = other.impact_ != null ? other.impact_.Clone() : null;
      switch (other.TypeCase) {
        case TypeOneofCase.MatchJoin:
          MatchJoin = other.MatchJoin.Clone();
          break;
        case TypeOneofCase.Map:
          Map = other.Map.Clone();
          break;
        case TypeOneofCase.UpdateTransform:
          UpdateTransform = other.UpdateTransform.Clone();
          break;
        case TypeOneofCase.NavMeshUpdate:
          NavMeshUpdate = other.NavMeshUpdate.Clone();
          break;
        case TypeOneofCase.Spawn:
          Spawn = other.Spawn.Clone();
          break;
        case TypeOneofCase.RequestSpawn:
          RequestSpawn = other.RequestSpawn.Clone();
          break;
        case TypeOneofCase.Destroy:
          Destroy = other.Destroy.Clone();
          break;
        case TypeOneofCase.RequestDestroy:
          RequestDestroy = other.RequestDestroy.Clone();
          break;
        case TypeOneofCase.Meme:
          Meme = other.Meme.Clone();
          break;
        case TypeOneofCase.Initialized:
          Initialized = other.Initialized.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Packet Clone() {
      return new Packet(this);
    }

    /// <summary>Field number for the "impact" field.</summary>
    public const int ImpactFieldNumber = 4;
    private global::Protometry.Vector3.Vector3 impact_;
    /// <summary>
    /// TODO: prob will have to switch to a box instead of vector3 later (want to notify before arrival ...)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protometry.Vector3.Vector3 Impact {
      get { return impact_; }
      set {
        impact_ = value;
      }
    }

    /// <summary>Field number for the "match_join" field.</summary>
    public const int MatchJoinFieldNumber = 7;
    /// <summary>
    /// Events
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.MatchJoin MatchJoin {
      get { return typeCase_ == TypeOneofCase.MatchJoin ? (global::Api.Realtime.MatchJoin) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.MatchJoin;
      }
    }

    /// <summary>Field number for the "map" field.</summary>
    public const int MapFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.Map Map {
      get { return typeCase_ == TypeOneofCase.Map ? (global::Api.Realtime.Map) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Map;
      }
    }

    /// <summary>Field number for the "update_transform" field.</summary>
    public const int UpdateTransformFieldNumber = 10;
    /// <summary>
    /// General physical objects
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.UpdateTransform UpdateTransform {
      get { return typeCase_ == TypeOneofCase.UpdateTransform ? (global::Api.Realtime.UpdateTransform) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.UpdateTransform;
      }
    }

    /// <summary>Field number for the "nav_mesh_update" field.</summary>
    public const int NavMeshUpdateFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.NavMeshUpdate NavMeshUpdate {
      get { return typeCase_ == TypeOneofCase.NavMeshUpdate ? (global::Api.Realtime.NavMeshUpdate) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.NavMeshUpdate;
      }
    }

    /// <summary>Field number for the "spawn" field.</summary>
    public const int SpawnFieldNumber = 15;
    /// <summary>
    /// Evolution
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.Spawn Spawn {
      get { return typeCase_ == TypeOneofCase.Spawn ? (global::Api.Realtime.Spawn) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Spawn;
      }
    }

    /// <summary>Field number for the "request_spawn" field.</summary>
    public const int RequestSpawnFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.Spawn RequestSpawn {
      get { return typeCase_ == TypeOneofCase.RequestSpawn ? (global::Api.Realtime.Spawn) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.RequestSpawn;
      }
    }

    /// <summary>Field number for the "destroy" field.</summary>
    public const int DestroyFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.Destroy Destroy {
      get { return typeCase_ == TypeOneofCase.Destroy ? (global::Api.Realtime.Destroy) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Destroy;
      }
    }

    /// <summary>Field number for the "request_destroy" field.</summary>
    public const int RequestDestroyFieldNumber = 18;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.Destroy RequestDestroy {
      get { return typeCase_ == TypeOneofCase.RequestDestroy ? (global::Api.Realtime.Destroy) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.RequestDestroy;
      }
    }

    /// <summary>Field number for the "meme" field.</summary>
    public const int MemeFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.Meme Meme {
      get { return typeCase_ == TypeOneofCase.Meme ? (global::Api.Realtime.Meme) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Meme;
      }
    }

    /// <summary>Field number for the "initialized" field.</summary>
    public const int InitializedFieldNumber = 25;
    /// <summary>
    /// Player
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.Initialized Initialized {
      get { return typeCase_ == TypeOneofCase.Initialized ? (global::Api.Realtime.Initialized) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Initialized;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      MatchJoin = 7,
      Map = 8,
      UpdateTransform = 10,
      NavMeshUpdate = 11,
      Spawn = 15,
      RequestSpawn = 16,
      Destroy = 17,
      RequestDestroy = 18,
      Meme = 19,
      Initialized = 25,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Packet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Packet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Impact, other.Impact)) return false;
      if (!object.Equals(MatchJoin, other.MatchJoin)) return false;
      if (!object.Equals(Map, other.Map)) return false;
      if (!object.Equals(UpdateTransform, other.UpdateTransform)) return false;
      if (!object.Equals(NavMeshUpdate, other.NavMeshUpdate)) return false;
      if (!object.Equals(Spawn, other.Spawn)) return false;
      if (!object.Equals(RequestSpawn, other.RequestSpawn)) return false;
      if (!object.Equals(Destroy, other.Destroy)) return false;
      if (!object.Equals(RequestDestroy, other.RequestDestroy)) return false;
      if (!object.Equals(Meme, other.Meme)) return false;
      if (!object.Equals(Initialized, other.Initialized)) return false;
      if (TypeCase != other.TypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (impact_ != null) hash ^= Impact.GetHashCode();
      if (typeCase_ == TypeOneofCase.MatchJoin) hash ^= MatchJoin.GetHashCode();
      if (typeCase_ == TypeOneofCase.Map) hash ^= Map.GetHashCode();
      if (typeCase_ == TypeOneofCase.UpdateTransform) hash ^= UpdateTransform.GetHashCode();
      if (typeCase_ == TypeOneofCase.NavMeshUpdate) hash ^= NavMeshUpdate.GetHashCode();
      if (typeCase_ == TypeOneofCase.Spawn) hash ^= Spawn.GetHashCode();
      if (typeCase_ == TypeOneofCase.RequestSpawn) hash ^= RequestSpawn.GetHashCode();
      if (typeCase_ == TypeOneofCase.Destroy) hash ^= Destroy.GetHashCode();
      if (typeCase_ == TypeOneofCase.RequestDestroy) hash ^= RequestDestroy.GetHashCode();
      if (typeCase_ == TypeOneofCase.Meme) hash ^= Meme.GetHashCode();
      if (typeCase_ == TypeOneofCase.Initialized) hash ^= Initialized.GetHashCode();
      hash ^= (int) typeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (impact_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Impact);
      }
      if (typeCase_ == TypeOneofCase.MatchJoin) {
        output.WriteRawTag(58);
        output.WriteMessage(MatchJoin);
      }
      if (typeCase_ == TypeOneofCase.Map) {
        output.WriteRawTag(66);
        output.WriteMessage(Map);
      }
      if (typeCase_ == TypeOneofCase.UpdateTransform) {
        output.WriteRawTag(82);
        output.WriteMessage(UpdateTransform);
      }
      if (typeCase_ == TypeOneofCase.NavMeshUpdate) {
        output.WriteRawTag(90);
        output.WriteMessage(NavMeshUpdate);
      }
      if (typeCase_ == TypeOneofCase.Spawn) {
        output.WriteRawTag(122);
        output.WriteMessage(Spawn);
      }
      if (typeCase_ == TypeOneofCase.RequestSpawn) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(RequestSpawn);
      }
      if (typeCase_ == TypeOneofCase.Destroy) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Destroy);
      }
      if (typeCase_ == TypeOneofCase.RequestDestroy) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(RequestDestroy);
      }
      if (typeCase_ == TypeOneofCase.Meme) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Meme);
      }
      if (typeCase_ == TypeOneofCase.Initialized) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(Initialized);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (impact_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Impact);
      }
      if (typeCase_ == TypeOneofCase.MatchJoin) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MatchJoin);
      }
      if (typeCase_ == TypeOneofCase.Map) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Map);
      }
      if (typeCase_ == TypeOneofCase.UpdateTransform) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateTransform);
      }
      if (typeCase_ == TypeOneofCase.NavMeshUpdate) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NavMeshUpdate);
      }
      if (typeCase_ == TypeOneofCase.Spawn) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spawn);
      }
      if (typeCase_ == TypeOneofCase.RequestSpawn) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RequestSpawn);
      }
      if (typeCase_ == TypeOneofCase.Destroy) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Destroy);
      }
      if (typeCase_ == TypeOneofCase.RequestDestroy) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RequestDestroy);
      }
      if (typeCase_ == TypeOneofCase.Meme) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Meme);
      }
      if (typeCase_ == TypeOneofCase.Initialized) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Initialized);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Packet other) {
      if (other == null) {
        return;
      }
      if (other.impact_ != null) {
        if (impact_ == null) {
          Impact = new global::Protometry.Vector3.Vector3();
        }
        Impact.MergeFrom(other.Impact);
      }
      switch (other.TypeCase) {
        case TypeOneofCase.MatchJoin:
          if (MatchJoin == null) {
            MatchJoin = new global::Api.Realtime.MatchJoin();
          }
          MatchJoin.MergeFrom(other.MatchJoin);
          break;
        case TypeOneofCase.Map:
          if (Map == null) {
            Map = new global::Api.Realtime.Map();
          }
          Map.MergeFrom(other.Map);
          break;
        case TypeOneofCase.UpdateTransform:
          if (UpdateTransform == null) {
            UpdateTransform = new global::Api.Realtime.UpdateTransform();
          }
          UpdateTransform.MergeFrom(other.UpdateTransform);
          break;
        case TypeOneofCase.NavMeshUpdate:
          if (NavMeshUpdate == null) {
            NavMeshUpdate = new global::Api.Realtime.NavMeshUpdate();
          }
          NavMeshUpdate.MergeFrom(other.NavMeshUpdate);
          break;
        case TypeOneofCase.Spawn:
          if (Spawn == null) {
            Spawn = new global::Api.Realtime.Spawn();
          }
          Spawn.MergeFrom(other.Spawn);
          break;
        case TypeOneofCase.RequestSpawn:
          if (RequestSpawn == null) {
            RequestSpawn = new global::Api.Realtime.Spawn();
          }
          RequestSpawn.MergeFrom(other.RequestSpawn);
          break;
        case TypeOneofCase.Destroy:
          if (Destroy == null) {
            Destroy = new global::Api.Realtime.Destroy();
          }
          Destroy.MergeFrom(other.Destroy);
          break;
        case TypeOneofCase.RequestDestroy:
          if (RequestDestroy == null) {
            RequestDestroy = new global::Api.Realtime.Destroy();
          }
          RequestDestroy.MergeFrom(other.RequestDestroy);
          break;
        case TypeOneofCase.Meme:
          if (Meme == null) {
            Meme = new global::Api.Realtime.Meme();
          }
          Meme.MergeFrom(other.Meme);
          break;
        case TypeOneofCase.Initialized:
          if (Initialized == null) {
            Initialized = new global::Api.Realtime.Initialized();
          }
          Initialized.MergeFrom(other.Initialized);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 34: {
            if (impact_ == null) {
              Impact = new global::Protometry.Vector3.Vector3();
            }
            input.ReadMessage(Impact);
            break;
          }
          case 58: {
            global::Api.Realtime.MatchJoin subBuilder = new global::Api.Realtime.MatchJoin();
            if (typeCase_ == TypeOneofCase.MatchJoin) {
              subBuilder.MergeFrom(MatchJoin);
            }
            input.ReadMessage(subBuilder);
            MatchJoin = subBuilder;
            break;
          }
          case 66: {
            global::Api.Realtime.Map subBuilder = new global::Api.Realtime.Map();
            if (typeCase_ == TypeOneofCase.Map) {
              subBuilder.MergeFrom(Map);
            }
            input.ReadMessage(subBuilder);
            Map = subBuilder;
            break;
          }
          case 82: {
            global::Api.Realtime.UpdateTransform subBuilder = new global::Api.Realtime.UpdateTransform();
            if (typeCase_ == TypeOneofCase.UpdateTransform) {
              subBuilder.MergeFrom(UpdateTransform);
            }
            input.ReadMessage(subBuilder);
            UpdateTransform = subBuilder;
            break;
          }
          case 90: {
            global::Api.Realtime.NavMeshUpdate subBuilder = new global::Api.Realtime.NavMeshUpdate();
            if (typeCase_ == TypeOneofCase.NavMeshUpdate) {
              subBuilder.MergeFrom(NavMeshUpdate);
            }
            input.ReadMessage(subBuilder);
            NavMeshUpdate = subBuilder;
            break;
          }
          case 122: {
            global::Api.Realtime.Spawn subBuilder = new global::Api.Realtime.Spawn();
            if (typeCase_ == TypeOneofCase.Spawn) {
              subBuilder.MergeFrom(Spawn);
            }
            input.ReadMessage(subBuilder);
            Spawn = subBuilder;
            break;
          }
          case 130: {
            global::Api.Realtime.Spawn subBuilder = new global::Api.Realtime.Spawn();
            if (typeCase_ == TypeOneofCase.RequestSpawn) {
              subBuilder.MergeFrom(RequestSpawn);
            }
            input.ReadMessage(subBuilder);
            RequestSpawn = subBuilder;
            break;
          }
          case 138: {
            global::Api.Realtime.Destroy subBuilder = new global::Api.Realtime.Destroy();
            if (typeCase_ == TypeOneofCase.Destroy) {
              subBuilder.MergeFrom(Destroy);
            }
            input.ReadMessage(subBuilder);
            Destroy = subBuilder;
            break;
          }
          case 146: {
            global::Api.Realtime.Destroy subBuilder = new global::Api.Realtime.Destroy();
            if (typeCase_ == TypeOneofCase.RequestDestroy) {
              subBuilder.MergeFrom(RequestDestroy);
            }
            input.ReadMessage(subBuilder);
            RequestDestroy = subBuilder;
            break;
          }
          case 154: {
            global::Api.Realtime.Meme subBuilder = new global::Api.Realtime.Meme();
            if (typeCase_ == TypeOneofCase.Meme) {
              subBuilder.MergeFrom(Meme);
            }
            input.ReadMessage(subBuilder);
            Meme = subBuilder;
            break;
          }
          case 202: {
            global::Api.Realtime.Initialized subBuilder = new global::Api.Realtime.Initialized();
            if (typeCase_ == TypeOneofCase.Initialized) {
              subBuilder.MergeFrom(Initialized);
            }
            input.ReadMessage(subBuilder);
            Initialized = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class MatchJoin : pb::IMessage<MatchJoin> {
    private static readonly pb::MessageParser<MatchJoin> _parser = new pb::MessageParser<MatchJoin>(() => new MatchJoin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchJoin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.Realtime.RealtimeReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchJoin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchJoin(MatchJoin other) : this() {
      region_ = other.region_ != null ? other.region_.Clone() : null;
      seed_ = other.seed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchJoin Clone() {
      return new MatchJoin(this);
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 1;
    private global::Protometry.Volume.Box region_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protometry.Volume.Box Region {
      get { return region_; }
      set {
        region_ = value;
      }
    }

    /// <summary>Field number for the "seed" field.</summary>
    public const int SeedFieldNumber = 2;
    private long seed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Seed {
      get { return seed_; }
      set {
        seed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchJoin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchJoin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Region, other.Region)) return false;
      if (Seed != other.Seed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (region_ != null) hash ^= Region.GetHashCode();
      if (Seed != 0L) hash ^= Seed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (region_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Region);
      }
      if (Seed != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Seed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (region_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Region);
      }
      if (Seed != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Seed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchJoin other) {
      if (other == null) {
        return;
      }
      if (other.region_ != null) {
        if (region_ == null) {
          Region = new global::Protometry.Volume.Box();
        }
        Region.MergeFrom(other.Region);
      }
      if (other.Seed != 0L) {
        Seed = other.Seed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (region_ == null) {
              Region = new global::Protometry.Volume.Box();
            }
            input.ReadMessage(Region);
            break;
          }
          case 16: {
            Seed = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Map : pb::IMessage<Map> {
    private static readonly pb::MessageParser<Map> _parser = new pb::MessageParser<Map>(() => new Map());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Map> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.Realtime.RealtimeReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Map() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Map(Map other) : this() {
      xBase_ = other.xBase_;
      yBase_ = other.yBase_;
      map_ = other.map_ != null ? other.map_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Map Clone() {
      return new Map(this);
    }

    /// <summary>Field number for the "x_base" field.</summary>
    public const int XBaseFieldNumber = 1;
    private long xBase_;
    /// <summary>
    /// Offsets of the chunk of map data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long XBase {
      get { return xBase_; }
      set {
        xBase_ = value;
      }
    }

    /// <summary>Field number for the "y_base" field.</summary>
    public const int YBaseFieldNumber = 2;
    private long yBase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long YBase {
      get { return yBase_; }
      set {
        yBase_ = value;
      }
    }

    /// <summary>Field number for the "map" field.</summary>
    public const int Map_FieldNumber = 3;
    private global::Api.Realtime.Matrix map_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.Matrix Map_ {
      get { return map_; }
      set {
        map_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Map);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Map other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (XBase != other.XBase) return false;
      if (YBase != other.YBase) return false;
      if (!object.Equals(Map_, other.Map_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (XBase != 0L) hash ^= XBase.GetHashCode();
      if (YBase != 0L) hash ^= YBase.GetHashCode();
      if (map_ != null) hash ^= Map_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (XBase != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(XBase);
      }
      if (YBase != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(YBase);
      }
      if (map_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Map_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (XBase != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(XBase);
      }
      if (YBase != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(YBase);
      }
      if (map_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Map_);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Map other) {
      if (other == null) {
        return;
      }
      if (other.XBase != 0L) {
        XBase = other.XBase;
      }
      if (other.YBase != 0L) {
        YBase = other.YBase;
      }
      if (other.map_ != null) {
        if (map_ == null) {
          Map_ = new global::Api.Realtime.Matrix();
        }
        Map_.MergeFrom(other.Map_);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            XBase = input.ReadInt64();
            break;
          }
          case 16: {
            YBase = input.ReadInt64();
            break;
          }
          case 26: {
            if (map_ == null) {
              Map_ = new global::Api.Realtime.Matrix();
            }
            input.ReadMessage(Map_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Matrix : pb::IMessage<Matrix> {
    private static readonly pb::MessageParser<Matrix> _parser = new pb::MessageParser<Matrix>(() => new Matrix());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Matrix> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.Realtime.RealtimeReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Matrix() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Matrix(Matrix other) : this() {
      rows_ = other.rows_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Matrix Clone() {
      return new Matrix(this);
    }

    /// <summary>Field number for the "rows" field.</summary>
    public const int RowsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Api.Realtime.Array> _repeated_rows_codec
        = pb::FieldCodec.ForMessage(10, global::Api.Realtime.Array.Parser);
    private readonly pbc::RepeatedField<global::Api.Realtime.Array> rows_ = new pbc::RepeatedField<global::Api.Realtime.Array>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Api.Realtime.Array> Rows {
      get { return rows_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Matrix);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Matrix other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rows_.Equals(other.rows_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rows_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rows_.WriteTo(output, _repeated_rows_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rows_.CalculateSize(_repeated_rows_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Matrix other) {
      if (other == null) {
        return;
      }
      rows_.Add(other.rows_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            rows_.AddEntriesFrom(input, _repeated_rows_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Array : pb::IMessage<Array> {
    private static readonly pb::MessageParser<Array> _parser = new pb::MessageParser<Array>(() => new Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.Realtime.RealtimeReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Array(Array other) : this() {
      cols_ = other.cols_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Array Clone() {
      return new Array(this);
    }

    /// <summary>Field number for the "cols" field.</summary>
    public const int ColsFieldNumber = 1;
    private static readonly pb::FieldCodec<double> _repeated_cols_codec
        = pb::FieldCodec.ForDouble(10);
    private readonly pbc::RepeatedField<double> cols_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Cols {
      get { return cols_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cols_.Equals(other.cols_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cols_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cols_.WriteTo(output, _repeated_cols_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cols_.CalculateSize(_repeated_cols_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Array other) {
      if (other == null) {
        return;
      }
      cols_.Add(other.cols_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 9: {
            cols_.AddEntriesFrom(input, _repeated_cols_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// General purpose transform update typically shared by several different types of objects
  /// </summary>
  public sealed partial class UpdateTransform : pb::IMessage<UpdateTransform> {
    private static readonly pb::MessageParser<UpdateTransform> _parser = new pb::MessageParser<UpdateTransform>(() => new UpdateTransform());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateTransform> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.Realtime.RealtimeReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTransform() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTransform(UpdateTransform other) : this() {
      transform_ = other.transform_ != null ? other.transform_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTransform Clone() {
      return new UpdateTransform(this);
    }

    /// <summary>Field number for the "transform" field.</summary>
    public const int TransformFieldNumber = 1;
    private global::Api.Realtime.Transform transform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.Transform Transform {
      get { return transform_; }
      set {
        transform_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateTransform);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateTransform other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Transform, other.Transform)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (transform_ != null) hash ^= Transform.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (transform_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Transform);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (transform_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transform);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateTransform other) {
      if (other == null) {
        return;
      }
      if (other.transform_ != null) {
        if (transform_ == null) {
          Transform = new global::Api.Realtime.Transform();
        }
        Transform.MergeFrom(other.Transform);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (transform_ == null) {
              Transform = new global::Api.Realtime.Transform();
            }
            input.ReadMessage(Transform);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NavMeshUpdate : pb::IMessage<NavMeshUpdate> {
    private static readonly pb::MessageParser<NavMeshUpdate> _parser = new pb::MessageParser<NavMeshUpdate>(() => new NavMeshUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NavMeshUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.Realtime.RealtimeReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavMeshUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavMeshUpdate(NavMeshUpdate other) : this() {
      id_ = other.id_;
      destination_ = other.destination_ != null ? other.destination_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavMeshUpdate Clone() {
      return new NavMeshUpdate(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "destination" field.</summary>
    public const int DestinationFieldNumber = 2;
    private global::Protometry.Vector3.Vector3 destination_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protometry.Vector3.Vector3 Destination {
      get { return destination_; }
      set {
        destination_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NavMeshUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NavMeshUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Destination, other.Destination)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (destination_ != null) hash ^= Destination.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (destination_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Destination);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (destination_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Destination);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NavMeshUpdate other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.destination_ != null) {
        if (destination_ == null) {
          Destination = new global::Protometry.Vector3.Vector3();
        }
        Destination.MergeFrom(other.Destination);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 18: {
            if (destination_ == null) {
              Destination = new global::Protometry.Vector3.Vector3();
            }
            input.ReadMessage(Destination);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Spawn : pb::IMessage<Spawn> {
    private static readonly pb::MessageParser<Spawn> _parser = new pb::MessageParser<Spawn>(() => new Spawn());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Spawn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.Realtime.RealtimeReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Spawn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Spawn(Spawn other) : this() {
      switch (other.TypeCase) {
        case TypeOneofCase.Any:
          Any = other.Any.Clone();
          break;
        case TypeOneofCase.Tree:
          Tree = other.Tree.Clone();
          break;
        case TypeOneofCase.Animal:
          Animal = other.Animal.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Spawn Clone() {
      return new Spawn(this);
    }

    /// <summary>Field number for the "any" field.</summary>
    public const int AnyFieldNumber = 1;
    /// <summary>
    /// Any object, no special behaviour
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.Transform Any {
      get { return typeCase_ == TypeOneofCase.Any ? (global::Api.Realtime.Transform) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Any;
      }
    }

    /// <summary>Field number for the "tree" field.</summary>
    public const int TreeFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.Tree Tree {
      get { return typeCase_ == TypeOneofCase.Tree ? (global::Api.Realtime.Tree) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Tree;
      }
    }

    /// <summary>Field number for the "animal" field.</summary>
    public const int AnimalFieldNumber = 3;
    /// <summary>
    /// TODO: other ?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.Animal Animal {
      get { return typeCase_ == TypeOneofCase.Animal ? (global::Api.Realtime.Animal) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Animal;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      Any = 1,
      Tree = 2,
      Animal = 3,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Spawn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Spawn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Any, other.Any)) return false;
      if (!object.Equals(Tree, other.Tree)) return false;
      if (!object.Equals(Animal, other.Animal)) return false;
      if (TypeCase != other.TypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (typeCase_ == TypeOneofCase.Any) hash ^= Any.GetHashCode();
      if (typeCase_ == TypeOneofCase.Tree) hash ^= Tree.GetHashCode();
      if (typeCase_ == TypeOneofCase.Animal) hash ^= Animal.GetHashCode();
      hash ^= (int) typeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (typeCase_ == TypeOneofCase.Any) {
        output.WriteRawTag(10);
        output.WriteMessage(Any);
      }
      if (typeCase_ == TypeOneofCase.Tree) {
        output.WriteRawTag(18);
        output.WriteMessage(Tree);
      }
      if (typeCase_ == TypeOneofCase.Animal) {
        output.WriteRawTag(26);
        output.WriteMessage(Animal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (typeCase_ == TypeOneofCase.Any) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Any);
      }
      if (typeCase_ == TypeOneofCase.Tree) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tree);
      }
      if (typeCase_ == TypeOneofCase.Animal) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Animal);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Spawn other) {
      if (other == null) {
        return;
      }
      switch (other.TypeCase) {
        case TypeOneofCase.Any:
          if (Any == null) {
            Any = new global::Api.Realtime.Transform();
          }
          Any.MergeFrom(other.Any);
          break;
        case TypeOneofCase.Tree:
          if (Tree == null) {
            Tree = new global::Api.Realtime.Tree();
          }
          Tree.MergeFrom(other.Tree);
          break;
        case TypeOneofCase.Animal:
          if (Animal == null) {
            Animal = new global::Api.Realtime.Animal();
          }
          Animal.MergeFrom(other.Animal);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Api.Realtime.Transform subBuilder = new global::Api.Realtime.Transform();
            if (typeCase_ == TypeOneofCase.Any) {
              subBuilder.MergeFrom(Any);
            }
            input.ReadMessage(subBuilder);
            Any = subBuilder;
            break;
          }
          case 18: {
            global::Api.Realtime.Tree subBuilder = new global::Api.Realtime.Tree();
            if (typeCase_ == TypeOneofCase.Tree) {
              subBuilder.MergeFrom(Tree);
            }
            input.ReadMessage(subBuilder);
            Tree = subBuilder;
            break;
          }
          case 26: {
            global::Api.Realtime.Animal subBuilder = new global::Api.Realtime.Animal();
            if (typeCase_ == TypeOneofCase.Animal) {
              subBuilder.MergeFrom(Animal);
            }
            input.ReadMessage(subBuilder);
            Animal = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class Destroy : pb::IMessage<Destroy> {
    private static readonly pb::MessageParser<Destroy> _parser = new pb::MessageParser<Destroy>(() => new Destroy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Destroy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.Realtime.RealtimeReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Destroy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Destroy(Destroy other) : this() {
      switch (other.TypeCase) {
        case TypeOneofCase.Any:
          Any = other.Any.Clone();
          break;
        case TypeOneofCase.Tree:
          Tree = other.Tree.Clone();
          break;
        case TypeOneofCase.Animal:
          Animal = other.Animal.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Destroy Clone() {
      return new Destroy(this);
    }

    /// <summary>Field number for the "any" field.</summary>
    public const int AnyFieldNumber = 1;
    /// <summary>
    /// Any object, no special behaviour
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.Transform Any {
      get { return typeCase_ == TypeOneofCase.Any ? (global::Api.Realtime.Transform) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Any;
      }
    }

    /// <summary>Field number for the "tree" field.</summary>
    public const int TreeFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.Tree Tree {
      get { return typeCase_ == TypeOneofCase.Tree ? (global::Api.Realtime.Tree) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Tree;
      }
    }

    /// <summary>Field number for the "animal" field.</summary>
    public const int AnimalFieldNumber = 3;
    /// <summary>
    /// TODO: other ?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.Animal Animal {
      get { return typeCase_ == TypeOneofCase.Animal ? (global::Api.Realtime.Animal) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Animal;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      Any = 1,
      Tree = 2,
      Animal = 3,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Destroy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Destroy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Any, other.Any)) return false;
      if (!object.Equals(Tree, other.Tree)) return false;
      if (!object.Equals(Animal, other.Animal)) return false;
      if (TypeCase != other.TypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (typeCase_ == TypeOneofCase.Any) hash ^= Any.GetHashCode();
      if (typeCase_ == TypeOneofCase.Tree) hash ^= Tree.GetHashCode();
      if (typeCase_ == TypeOneofCase.Animal) hash ^= Animal.GetHashCode();
      hash ^= (int) typeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (typeCase_ == TypeOneofCase.Any) {
        output.WriteRawTag(10);
        output.WriteMessage(Any);
      }
      if (typeCase_ == TypeOneofCase.Tree) {
        output.WriteRawTag(18);
        output.WriteMessage(Tree);
      }
      if (typeCase_ == TypeOneofCase.Animal) {
        output.WriteRawTag(26);
        output.WriteMessage(Animal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (typeCase_ == TypeOneofCase.Any) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Any);
      }
      if (typeCase_ == TypeOneofCase.Tree) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tree);
      }
      if (typeCase_ == TypeOneofCase.Animal) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Animal);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Destroy other) {
      if (other == null) {
        return;
      }
      switch (other.TypeCase) {
        case TypeOneofCase.Any:
          if (Any == null) {
            Any = new global::Api.Realtime.Transform();
          }
          Any.MergeFrom(other.Any);
          break;
        case TypeOneofCase.Tree:
          if (Tree == null) {
            Tree = new global::Api.Realtime.Tree();
          }
          Tree.MergeFrom(other.Tree);
          break;
        case TypeOneofCase.Animal:
          if (Animal == null) {
            Animal = new global::Api.Realtime.Animal();
          }
          Animal.MergeFrom(other.Animal);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Api.Realtime.Transform subBuilder = new global::Api.Realtime.Transform();
            if (typeCase_ == TypeOneofCase.Any) {
              subBuilder.MergeFrom(Any);
            }
            input.ReadMessage(subBuilder);
            Any = subBuilder;
            break;
          }
          case 18: {
            global::Api.Realtime.Tree subBuilder = new global::Api.Realtime.Tree();
            if (typeCase_ == TypeOneofCase.Tree) {
              subBuilder.MergeFrom(Tree);
            }
            input.ReadMessage(subBuilder);
            Tree = subBuilder;
            break;
          }
          case 26: {
            global::Api.Realtime.Animal subBuilder = new global::Api.Realtime.Animal();
            if (typeCase_ == TypeOneofCase.Animal) {
              subBuilder.MergeFrom(Animal);
            }
            input.ReadMessage(subBuilder);
            Animal = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class Meme : pb::IMessage<Meme> {
    private static readonly pb::MessageParser<Meme> _parser = new pb::MessageParser<Meme>(() => new Meme());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Meme> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.Realtime.RealtimeReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Meme() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Meme(Meme other) : this() {
      id_ = other.id_;
      memeName_ = other.memeName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Meme Clone() {
      return new Meme(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "meme_name" field.</summary>
    public const int MemeNameFieldNumber = 2;
    private string memeName_ = "";
    /// <summary>
    /// Not really efficient but ok
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MemeName {
      get { return memeName_; }
      set {
        memeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Meme);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Meme other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (MemeName != other.MemeName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (MemeName.Length != 0) hash ^= MemeName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (MemeName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MemeName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (MemeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MemeName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Meme other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.MemeName.Length != 0) {
        MemeName = other.MemeName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 18: {
            MemeName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Client notifying being ready to handle gameplay
  /// </summary>
  public sealed partial class Initialized : pb::IMessage<Initialized> {
    private static readonly pb::MessageParser<Initialized> _parser = new pb::MessageParser<Initialized>(() => new Initialized());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Initialized> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.Realtime.RealtimeReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Initialized() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Initialized(Initialized other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Initialized Clone() {
      return new Initialized(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Initialized);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Initialized other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Initialized other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// TODO: is it worthwhile to add like "owner_id" ... ?
  /// </summary>
  public sealed partial class Transform : pb::IMessage<Transform> {
    private static readonly pb::MessageParser<Transform> _parser = new pb::MessageParser<Transform>(() => new Transform());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Transform> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.Realtime.RealtimeReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform(Transform other) : this() {
      id_ = other.id_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform Clone() {
      return new Transform(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::Protometry.Vector3.Vector3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protometry.Vector3.Vector3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 3;
    private global::Protometry.Quaternion.Quaternion rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protometry.Quaternion.Quaternion Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Transform);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Transform other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (rotation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Rotation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Transform other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Protometry.Vector3.Vector3();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          Rotation = new global::Protometry.Quaternion.Quaternion();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 18: {
            if (position_ == null) {
              Position = new global::Protometry.Vector3.Vector3();
            }
            input.ReadMessage(Position);
            break;
          }
          case 26: {
            if (rotation_ == null) {
              Rotation = new global::Protometry.Quaternion.Quaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Tree : pb::IMessage<Tree> {
    private static readonly pb::MessageParser<Tree> _parser = new pb::MessageParser<Tree>(() => new Tree());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Tree> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.Realtime.RealtimeReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tree() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tree(Tree other) : this() {
      transform_ = other.transform_ != null ? other.transform_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tree Clone() {
      return new Tree(this);
    }

    /// <summary>Field number for the "transform" field.</summary>
    public const int TransformFieldNumber = 1;
    private global::Api.Realtime.Transform transform_;
    /// <summary>
    /// TODO: other stats
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.Transform Transform {
      get { return transform_; }
      set {
        transform_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Tree);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Tree other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Transform, other.Transform)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (transform_ != null) hash ^= Transform.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (transform_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Transform);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (transform_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transform);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Tree other) {
      if (other == null) {
        return;
      }
      if (other.transform_ != null) {
        if (transform_ == null) {
          Transform = new global::Api.Realtime.Transform();
        }
        Transform.MergeFrom(other.Transform);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (transform_ == null) {
              Transform = new global::Api.Realtime.Transform();
            }
            input.ReadMessage(Transform);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Animal : pb::IMessage<Animal> {
    private static readonly pb::MessageParser<Animal> _parser = new pb::MessageParser<Animal>(() => new Animal());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Animal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.Realtime.RealtimeReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Animal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Animal(Animal other) : this() {
      transform_ = other.transform_ != null ? other.transform_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Animal Clone() {
      return new Animal(this);
    }

    /// <summary>Field number for the "transform" field.</summary>
    public const int TransformFieldNumber = 1;
    private global::Api.Realtime.Transform transform_;
    /// <summary>
    /// TODO: other stats
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.Transform Transform {
      get { return transform_; }
      set {
        transform_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Animal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Animal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Transform, other.Transform)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (transform_ != null) hash ^= Transform.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (transform_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Transform);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (transform_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transform);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Animal other) {
      if (other == null) {
        return;
      }
      if (other.transform_ != null) {
        if (transform_ == null) {
          Transform = new global::Api.Realtime.Transform();
        }
        Transform.MergeFrom(other.Transform);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (transform_ == null) {
              Transform = new global::Api.Realtime.Transform();
            }
            input.ReadMessage(Transform);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Ask a logic server to transfer ownership of an object
  /// </summary>
  public sealed partial class RequestTransferOwnership : pb::IMessage<RequestTransferOwnership> {
    private static readonly pb::MessageParser<RequestTransferOwnership> _parser = new pb::MessageParser<RequestTransferOwnership>(() => new RequestTransferOwnership());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestTransferOwnership> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.Realtime.RealtimeReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestTransferOwnership() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestTransferOwnership(RequestTransferOwnership other) : this() {
      transform_ = other.transform_ != null ? other.transform_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestTransferOwnership Clone() {
      return new RequestTransferOwnership(this);
    }

    /// <summary>Field number for the "transform" field.</summary>
    public const int TransformFieldNumber = 1;
    private global::Api.Realtime.Transform transform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Realtime.Transform Transform {
      get { return transform_; }
      set {
        transform_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestTransferOwnership);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestTransferOwnership other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Transform, other.Transform)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (transform_ != null) hash ^= Transform.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (transform_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Transform);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (transform_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transform);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestTransferOwnership other) {
      if (other == null) {
        return;
      }
      if (other.transform_ != null) {
        if (transform_ == null) {
          Transform = new global::Api.Realtime.Transform();
        }
        Transform.MergeFrom(other.Transform);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (transform_ == null) {
              Transform = new global::Api.Realtime.Transform();
            }
            input.ReadMessage(Transform);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

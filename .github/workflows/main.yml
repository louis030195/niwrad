name: Build Niwrad
on:
  push: { branches: [dev, master] }
  pull_request: { branches: [master] }

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

jobs:
  nakama:
    name: Test code, build image and push it
    strategy:
      matrix:
        go-version: [1.14.x]
        platform: [ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    defaults:
      run:
        working-directory: ./nakama
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: louis030195
          password: ${{ secrets.CR_PAT }}
      - name: Test go code
        run: go test ./...
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: nakama
          file: nakama/deploy/Dockerfile
          platforms: linux/amd64 # linux/arm,linux/arm64 # TODO: nakama base image doesnt support ARM yet
          push: true
          tags: |
            louis030195/niwrad-nakama:latest
            louis030195/niwrad-nakama:0.1.0
            ghcr.io/louis030195/niwrad-nakama/niwrad-nakama:latest
            ghcr.io/louis030195/niwrad-nakama/niwrad-nakama:0.1.0

      # # Test
      # # - name: Run tests
      # #   id: testRunner
      # #   uses: webbertakken/unity-test-runner@v1.6
      # #   with:
      # #     customParameters: # '-nographics' # Only hack to run headless tests on Linux
      # #     unityVersion: ${{ matrix.unityVersion }}
      # #     projectPath: ${{ matrix.projectPath }}
      # #     testMode: editmode # Ignore playmode because it requires user input
  
      # # Upload tests results
      # # - uses: actions/upload-artifact@v2
      # #   with:
      # #     name: Test results (all modes)
      # #     path: ${{ steps.testRunner.outputs.artifactsPath }}

  # Build Unity offline client
  unityOffline:
    name: Build for ${{ matrix.targetPlatform }} on version ${{ matrix.unityVersion }}
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - .
        unityVersion:
          - 2020.2.0f1
        targetPlatform:
          - StandaloneWindows64 # Build a Windows 64-bit standalone.
          - StandaloneLinux64 # Build a Linux 64-bit standalone.
          - Android # Build an Android .apk standalone app.
          - iOS
          - StandaloneOSX
    steps:
      # Checkout
      - uses: actions/checkout@v2
        with:
          lfs: true

      # Cache
      - uses: actions/cache@v1.1.0
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-
            Library-

      # Build
      - uses: webbertakken/unity-builder@v2.0-aplha-5
        with:
          projectPath: ${{ matrix.projectPath }}
          unityVersion: ${{ matrix.unityVersion }}
          targetPlatform: ${{ matrix.targetPlatform }}
          buildMethod: Editor.Builds.BuildOptions
          version: 0.1.1
          androidAppBundle: false
          androidKeystoreName: niwrad.keystore
          androidKeystoreBase64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          androidKeystorePass: ${{ secrets.ANDROID_KEYSTORE_PASS }}
          androidKeyaliasName: ${{ secrets.ANDROID_KEYALIAS_NAME }}
          androidKeyaliasPass: ${{ secrets.ANDROID_KEYALIAS_PASS }}
          buildsPath: builds
      - uses: actions/upload-artifact@v2
        with:
          name: offline-clients
          path: builds
          if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn` 

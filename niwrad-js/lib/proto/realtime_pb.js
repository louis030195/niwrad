/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var github_com_louis030195_protometry_api_vector3_vector3_pb = require('./github.com/louis030195/protometry/api/vector3/vector3_pb.js');
var github_com_louis030195_protometry_api_quaternion_quaternion_pb = require('./github.com/louis030195/protometry/api/quaternion/quaternion_pb.js');
var github_com_louis030195_protometry_api_volume_volume_pb = require('./github.com/louis030195/protometry/api/volume/volume_pb.js');
goog.exportSymbol('proto.nakama.niwrad.api.realtime.Animal', null, global);
goog.exportSymbol('proto.nakama.niwrad.api.realtime.Characteristics', null, global);
goog.exportSymbol('proto.nakama.niwrad.api.realtime.Characteristics.AnimalCharacteristics', null, global);
goog.exportSymbol('proto.nakama.niwrad.api.realtime.Characteristics.PlantCharacteristics', null, global);
goog.exportSymbol('proto.nakama.niwrad.api.realtime.Destroy', null, global);
goog.exportSymbol('proto.nakama.niwrad.api.realtime.Experience', null, global);
goog.exportSymbol('proto.nakama.niwrad.api.realtime.Experience.GeneralParameters', null, global);
goog.exportSymbol('proto.nakama.niwrad.api.realtime.Experience.Map', null, global);
goog.exportSymbol('proto.nakama.niwrad.api.realtime.Experience.PopulationDistribution', null, global);
goog.exportSymbol('proto.nakama.niwrad.api.realtime.Initialized', null, global);
goog.exportSymbol('proto.nakama.niwrad.api.realtime.MatchJoin', null, global);
goog.exportSymbol('proto.nakama.niwrad.api.realtime.Meme', null, global);
goog.exportSymbol('proto.nakama.niwrad.api.realtime.NavMeshUpdate', null, global);
goog.exportSymbol('proto.nakama.niwrad.api.realtime.Packet', null, global);
goog.exportSymbol('proto.nakama.niwrad.api.realtime.Plant', null, global);
goog.exportSymbol('proto.nakama.niwrad.api.realtime.RequestTransferOwnership', null, global);
goog.exportSymbol('proto.nakama.niwrad.api.realtime.Spawn', null, global);
goog.exportSymbol('proto.nakama.niwrad.api.realtime.TimeSeriePoint', null, global);
goog.exportSymbol('proto.nakama.niwrad.api.realtime.Transform', null, global);
goog.exportSymbol('proto.nakama.niwrad.api.realtime.UpdateTransform', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nakama.niwrad.api.realtime.Packet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nakama.niwrad.api.realtime.Packet.oneofGroups_);
};
goog.inherits(proto.nakama.niwrad.api.realtime.Packet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nakama.niwrad.api.realtime.Packet.displayName = 'proto.nakama.niwrad.api.realtime.Packet';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nakama.niwrad.api.realtime.Packet.oneofGroups_ = [[7,10,11,15,16,17,18,19,25]];

/**
 * @enum {number}
 */
proto.nakama.niwrad.api.realtime.Packet.TypeCase = {
  TYPE_NOT_SET: 0,
  MATCH_JOIN: 7,
  UPDATE_TRANSFORM: 10,
  NAV_MESH_UPDATE: 11,
  SPAWN: 15,
  REQUEST_SPAWN: 16,
  DESTROY: 17,
  REQUEST_DESTROY: 18,
  MEME: 19,
  INITIALIZED: 25
};

/**
 * @return {proto.nakama.niwrad.api.realtime.Packet.TypeCase}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.getTypeCase = function() {
  return /** @type {proto.nakama.niwrad.api.realtime.Packet.TypeCase} */(jspb.Message.computeOneofCase(this, proto.nakama.niwrad.api.realtime.Packet.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.toObject = function(opt_includeInstance) {
  return proto.nakama.niwrad.api.realtime.Packet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nakama.niwrad.api.realtime.Packet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Packet.toObject = function(includeInstance, msg) {
  var f, obj = {
    impact: (f = msg.getImpact()) && github_com_louis030195_protometry_api_vector3_vector3_pb.Vector3.toObject(includeInstance, f),
    matchJoin: (f = msg.getMatchJoin()) && proto.nakama.niwrad.api.realtime.MatchJoin.toObject(includeInstance, f),
    updateTransform: (f = msg.getUpdateTransform()) && proto.nakama.niwrad.api.realtime.UpdateTransform.toObject(includeInstance, f),
    navMeshUpdate: (f = msg.getNavMeshUpdate()) && proto.nakama.niwrad.api.realtime.NavMeshUpdate.toObject(includeInstance, f),
    spawn: (f = msg.getSpawn()) && proto.nakama.niwrad.api.realtime.Spawn.toObject(includeInstance, f),
    requestSpawn: (f = msg.getRequestSpawn()) && proto.nakama.niwrad.api.realtime.Spawn.toObject(includeInstance, f),
    destroy: (f = msg.getDestroy()) && proto.nakama.niwrad.api.realtime.Destroy.toObject(includeInstance, f),
    requestDestroy: (f = msg.getRequestDestroy()) && proto.nakama.niwrad.api.realtime.Destroy.toObject(includeInstance, f),
    meme: (f = msg.getMeme()) && proto.nakama.niwrad.api.realtime.Meme.toObject(includeInstance, f),
    initialized: (f = msg.getInitialized()) && proto.nakama.niwrad.api.realtime.Initialized.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nakama.niwrad.api.realtime.Packet}
 */
proto.nakama.niwrad.api.realtime.Packet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nakama.niwrad.api.realtime.Packet;
  return proto.nakama.niwrad.api.realtime.Packet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nakama.niwrad.api.realtime.Packet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nakama.niwrad.api.realtime.Packet}
 */
proto.nakama.niwrad.api.realtime.Packet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 4:
      var value = new github_com_louis030195_protometry_api_vector3_vector3_pb.Vector3;
      reader.readMessage(value,github_com_louis030195_protometry_api_vector3_vector3_pb.Vector3.deserializeBinaryFromReader);
      msg.setImpact(value);
      break;
    case 7:
      var value = new proto.nakama.niwrad.api.realtime.MatchJoin;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.MatchJoin.deserializeBinaryFromReader);
      msg.setMatchJoin(value);
      break;
    case 10:
      var value = new proto.nakama.niwrad.api.realtime.UpdateTransform;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.UpdateTransform.deserializeBinaryFromReader);
      msg.setUpdateTransform(value);
      break;
    case 11:
      var value = new proto.nakama.niwrad.api.realtime.NavMeshUpdate;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.NavMeshUpdate.deserializeBinaryFromReader);
      msg.setNavMeshUpdate(value);
      break;
    case 15:
      var value = new proto.nakama.niwrad.api.realtime.Spawn;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Spawn.deserializeBinaryFromReader);
      msg.setSpawn(value);
      break;
    case 16:
      var value = new proto.nakama.niwrad.api.realtime.Spawn;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Spawn.deserializeBinaryFromReader);
      msg.setRequestSpawn(value);
      break;
    case 17:
      var value = new proto.nakama.niwrad.api.realtime.Destroy;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Destroy.deserializeBinaryFromReader);
      msg.setDestroy(value);
      break;
    case 18:
      var value = new proto.nakama.niwrad.api.realtime.Destroy;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Destroy.deserializeBinaryFromReader);
      msg.setRequestDestroy(value);
      break;
    case 19:
      var value = new proto.nakama.niwrad.api.realtime.Meme;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Meme.deserializeBinaryFromReader);
      msg.setMeme(value);
      break;
    case 25:
      var value = new proto.nakama.niwrad.api.realtime.Initialized;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Initialized.deserializeBinaryFromReader);
      msg.setInitialized(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nakama.niwrad.api.realtime.Packet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nakama.niwrad.api.realtime.Packet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Packet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getImpact();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      github_com_louis030195_protometry_api_vector3_vector3_pb.Vector3.serializeBinaryToWriter
    );
  }
  f = message.getMatchJoin();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.nakama.niwrad.api.realtime.MatchJoin.serializeBinaryToWriter
    );
  }
  f = message.getUpdateTransform();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.nakama.niwrad.api.realtime.UpdateTransform.serializeBinaryToWriter
    );
  }
  f = message.getNavMeshUpdate();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.nakama.niwrad.api.realtime.NavMeshUpdate.serializeBinaryToWriter
    );
  }
  f = message.getSpawn();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.nakama.niwrad.api.realtime.Spawn.serializeBinaryToWriter
    );
  }
  f = message.getRequestSpawn();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.nakama.niwrad.api.realtime.Spawn.serializeBinaryToWriter
    );
  }
  f = message.getDestroy();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.nakama.niwrad.api.realtime.Destroy.serializeBinaryToWriter
    );
  }
  f = message.getRequestDestroy();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.nakama.niwrad.api.realtime.Destroy.serializeBinaryToWriter
    );
  }
  f = message.getMeme();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.nakama.niwrad.api.realtime.Meme.serializeBinaryToWriter
    );
  }
  f = message.getInitialized();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      proto.nakama.niwrad.api.realtime.Initialized.serializeBinaryToWriter
    );
  }
};


/**
 * optional protometry.vector3.Vector3 impact = 4;
 * @return {?proto.protometry.vector3.Vector3}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.getImpact = function() {
  return /** @type{?proto.protometry.vector3.Vector3} */ (
    jspb.Message.getWrapperField(this, github_com_louis030195_protometry_api_vector3_vector3_pb.Vector3, 4));
};


/** @param {?proto.protometry.vector3.Vector3|undefined} value */
proto.nakama.niwrad.api.realtime.Packet.prototype.setImpact = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.nakama.niwrad.api.realtime.Packet.prototype.clearImpact = function() {
  this.setImpact(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.hasImpact = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional MatchJoin match_join = 7;
 * @return {?proto.nakama.niwrad.api.realtime.MatchJoin}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.getMatchJoin = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.MatchJoin} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.MatchJoin, 7));
};


/** @param {?proto.nakama.niwrad.api.realtime.MatchJoin|undefined} value */
proto.nakama.niwrad.api.realtime.Packet.prototype.setMatchJoin = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.nakama.niwrad.api.realtime.Packet.oneofGroups_[0], value);
};


proto.nakama.niwrad.api.realtime.Packet.prototype.clearMatchJoin = function() {
  this.setMatchJoin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.hasMatchJoin = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional UpdateTransform update_transform = 10;
 * @return {?proto.nakama.niwrad.api.realtime.UpdateTransform}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.getUpdateTransform = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.UpdateTransform} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.UpdateTransform, 10));
};


/** @param {?proto.nakama.niwrad.api.realtime.UpdateTransform|undefined} value */
proto.nakama.niwrad.api.realtime.Packet.prototype.setUpdateTransform = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.nakama.niwrad.api.realtime.Packet.oneofGroups_[0], value);
};


proto.nakama.niwrad.api.realtime.Packet.prototype.clearUpdateTransform = function() {
  this.setUpdateTransform(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.hasUpdateTransform = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional NavMeshUpdate nav_mesh_update = 11;
 * @return {?proto.nakama.niwrad.api.realtime.NavMeshUpdate}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.getNavMeshUpdate = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.NavMeshUpdate} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.NavMeshUpdate, 11));
};


/** @param {?proto.nakama.niwrad.api.realtime.NavMeshUpdate|undefined} value */
proto.nakama.niwrad.api.realtime.Packet.prototype.setNavMeshUpdate = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.nakama.niwrad.api.realtime.Packet.oneofGroups_[0], value);
};


proto.nakama.niwrad.api.realtime.Packet.prototype.clearNavMeshUpdate = function() {
  this.setNavMeshUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.hasNavMeshUpdate = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Spawn spawn = 15;
 * @return {?proto.nakama.niwrad.api.realtime.Spawn}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.getSpawn = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Spawn} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Spawn, 15));
};


/** @param {?proto.nakama.niwrad.api.realtime.Spawn|undefined} value */
proto.nakama.niwrad.api.realtime.Packet.prototype.setSpawn = function(value) {
  jspb.Message.setOneofWrapperField(this, 15, proto.nakama.niwrad.api.realtime.Packet.oneofGroups_[0], value);
};


proto.nakama.niwrad.api.realtime.Packet.prototype.clearSpawn = function() {
  this.setSpawn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.hasSpawn = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional Spawn request_spawn = 16;
 * @return {?proto.nakama.niwrad.api.realtime.Spawn}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.getRequestSpawn = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Spawn} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Spawn, 16));
};


/** @param {?proto.nakama.niwrad.api.realtime.Spawn|undefined} value */
proto.nakama.niwrad.api.realtime.Packet.prototype.setRequestSpawn = function(value) {
  jspb.Message.setOneofWrapperField(this, 16, proto.nakama.niwrad.api.realtime.Packet.oneofGroups_[0], value);
};


proto.nakama.niwrad.api.realtime.Packet.prototype.clearRequestSpawn = function() {
  this.setRequestSpawn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.hasRequestSpawn = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional Destroy destroy = 17;
 * @return {?proto.nakama.niwrad.api.realtime.Destroy}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.getDestroy = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Destroy} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Destroy, 17));
};


/** @param {?proto.nakama.niwrad.api.realtime.Destroy|undefined} value */
proto.nakama.niwrad.api.realtime.Packet.prototype.setDestroy = function(value) {
  jspb.Message.setOneofWrapperField(this, 17, proto.nakama.niwrad.api.realtime.Packet.oneofGroups_[0], value);
};


proto.nakama.niwrad.api.realtime.Packet.prototype.clearDestroy = function() {
  this.setDestroy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.hasDestroy = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional Destroy request_destroy = 18;
 * @return {?proto.nakama.niwrad.api.realtime.Destroy}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.getRequestDestroy = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Destroy} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Destroy, 18));
};


/** @param {?proto.nakama.niwrad.api.realtime.Destroy|undefined} value */
proto.nakama.niwrad.api.realtime.Packet.prototype.setRequestDestroy = function(value) {
  jspb.Message.setOneofWrapperField(this, 18, proto.nakama.niwrad.api.realtime.Packet.oneofGroups_[0], value);
};


proto.nakama.niwrad.api.realtime.Packet.prototype.clearRequestDestroy = function() {
  this.setRequestDestroy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.hasRequestDestroy = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional Meme meme = 19;
 * @return {?proto.nakama.niwrad.api.realtime.Meme}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.getMeme = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Meme} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Meme, 19));
};


/** @param {?proto.nakama.niwrad.api.realtime.Meme|undefined} value */
proto.nakama.niwrad.api.realtime.Packet.prototype.setMeme = function(value) {
  jspb.Message.setOneofWrapperField(this, 19, proto.nakama.niwrad.api.realtime.Packet.oneofGroups_[0], value);
};


proto.nakama.niwrad.api.realtime.Packet.prototype.clearMeme = function() {
  this.setMeme(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.hasMeme = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional Initialized initialized = 25;
 * @return {?proto.nakama.niwrad.api.realtime.Initialized}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.getInitialized = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Initialized} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Initialized, 25));
};


/** @param {?proto.nakama.niwrad.api.realtime.Initialized|undefined} value */
proto.nakama.niwrad.api.realtime.Packet.prototype.setInitialized = function(value) {
  jspb.Message.setOneofWrapperField(this, 25, proto.nakama.niwrad.api.realtime.Packet.oneofGroups_[0], value);
};


proto.nakama.niwrad.api.realtime.Packet.prototype.clearInitialized = function() {
  this.setInitialized(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nakama.niwrad.api.realtime.Packet.prototype.hasInitialized = function() {
  return jspb.Message.getField(this, 25) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nakama.niwrad.api.realtime.MatchJoin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nakama.niwrad.api.realtime.MatchJoin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nakama.niwrad.api.realtime.MatchJoin.displayName = 'proto.nakama.niwrad.api.realtime.MatchJoin';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nakama.niwrad.api.realtime.MatchJoin.prototype.toObject = function(opt_includeInstance) {
  return proto.nakama.niwrad.api.realtime.MatchJoin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nakama.niwrad.api.realtime.MatchJoin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.MatchJoin.toObject = function(includeInstance, msg) {
  var f, obj = {
    region: (f = msg.getRegion()) && github_com_louis030195_protometry_api_volume_volume_pb.Box.toObject(includeInstance, f),
    seed: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nakama.niwrad.api.realtime.MatchJoin}
 */
proto.nakama.niwrad.api.realtime.MatchJoin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nakama.niwrad.api.realtime.MatchJoin;
  return proto.nakama.niwrad.api.realtime.MatchJoin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nakama.niwrad.api.realtime.MatchJoin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nakama.niwrad.api.realtime.MatchJoin}
 */
proto.nakama.niwrad.api.realtime.MatchJoin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_louis030195_protometry_api_volume_volume_pb.Box;
      reader.readMessage(value,github_com_louis030195_protometry_api_volume_volume_pb.Box.deserializeBinaryFromReader);
      msg.setRegion(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nakama.niwrad.api.realtime.MatchJoin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nakama.niwrad.api.realtime.MatchJoin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nakama.niwrad.api.realtime.MatchJoin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.MatchJoin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRegion();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_louis030195_protometry_api_volume_volume_pb.Box.serializeBinaryToWriter
    );
  }
  f = message.getSeed();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional protometry.volume.Box region = 1;
 * @return {?proto.protometry.volume.Box}
 */
proto.nakama.niwrad.api.realtime.MatchJoin.prototype.getRegion = function() {
  return /** @type{?proto.protometry.volume.Box} */ (
    jspb.Message.getWrapperField(this, github_com_louis030195_protometry_api_volume_volume_pb.Box, 1));
};


/** @param {?proto.protometry.volume.Box|undefined} value */
proto.nakama.niwrad.api.realtime.MatchJoin.prototype.setRegion = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.nakama.niwrad.api.realtime.MatchJoin.prototype.clearRegion = function() {
  this.setRegion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nakama.niwrad.api.realtime.MatchJoin.prototype.hasRegion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 seed = 2;
 * @return {number}
 */
proto.nakama.niwrad.api.realtime.MatchJoin.prototype.getSeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.nakama.niwrad.api.realtime.MatchJoin.prototype.setSeed = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nakama.niwrad.api.realtime.UpdateTransform = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nakama.niwrad.api.realtime.UpdateTransform, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nakama.niwrad.api.realtime.UpdateTransform.displayName = 'proto.nakama.niwrad.api.realtime.UpdateTransform';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nakama.niwrad.api.realtime.UpdateTransform.prototype.toObject = function(opt_includeInstance) {
  return proto.nakama.niwrad.api.realtime.UpdateTransform.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nakama.niwrad.api.realtime.UpdateTransform} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.UpdateTransform.toObject = function(includeInstance, msg) {
  var f, obj = {
    transform: (f = msg.getTransform()) && proto.nakama.niwrad.api.realtime.Transform.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nakama.niwrad.api.realtime.UpdateTransform}
 */
proto.nakama.niwrad.api.realtime.UpdateTransform.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nakama.niwrad.api.realtime.UpdateTransform;
  return proto.nakama.niwrad.api.realtime.UpdateTransform.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nakama.niwrad.api.realtime.UpdateTransform} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nakama.niwrad.api.realtime.UpdateTransform}
 */
proto.nakama.niwrad.api.realtime.UpdateTransform.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nakama.niwrad.api.realtime.Transform;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Transform.deserializeBinaryFromReader);
      msg.setTransform(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nakama.niwrad.api.realtime.UpdateTransform.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nakama.niwrad.api.realtime.UpdateTransform.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nakama.niwrad.api.realtime.UpdateTransform} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.UpdateTransform.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransform();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nakama.niwrad.api.realtime.Transform.serializeBinaryToWriter
    );
  }
};


/**
 * optional Transform transform = 1;
 * @return {?proto.nakama.niwrad.api.realtime.Transform}
 */
proto.nakama.niwrad.api.realtime.UpdateTransform.prototype.getTransform = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Transform} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Transform, 1));
};


/** @param {?proto.nakama.niwrad.api.realtime.Transform|undefined} value */
proto.nakama.niwrad.api.realtime.UpdateTransform.prototype.setTransform = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.nakama.niwrad.api.realtime.UpdateTransform.prototype.clearTransform = function() {
  this.setTransform(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nakama.niwrad.api.realtime.UpdateTransform.prototype.hasTransform = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nakama.niwrad.api.realtime.NavMeshUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nakama.niwrad.api.realtime.NavMeshUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nakama.niwrad.api.realtime.NavMeshUpdate.displayName = 'proto.nakama.niwrad.api.realtime.NavMeshUpdate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nakama.niwrad.api.realtime.NavMeshUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.nakama.niwrad.api.realtime.NavMeshUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nakama.niwrad.api.realtime.NavMeshUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.NavMeshUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    destination: (f = msg.getDestination()) && github_com_louis030195_protometry_api_vector3_vector3_pb.Vector3.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nakama.niwrad.api.realtime.NavMeshUpdate}
 */
proto.nakama.niwrad.api.realtime.NavMeshUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nakama.niwrad.api.realtime.NavMeshUpdate;
  return proto.nakama.niwrad.api.realtime.NavMeshUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nakama.niwrad.api.realtime.NavMeshUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nakama.niwrad.api.realtime.NavMeshUpdate}
 */
proto.nakama.niwrad.api.realtime.NavMeshUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = new github_com_louis030195_protometry_api_vector3_vector3_pb.Vector3;
      reader.readMessage(value,github_com_louis030195_protometry_api_vector3_vector3_pb.Vector3.deserializeBinaryFromReader);
      msg.setDestination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nakama.niwrad.api.realtime.NavMeshUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nakama.niwrad.api.realtime.NavMeshUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nakama.niwrad.api.realtime.NavMeshUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.NavMeshUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getDestination();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      github_com_louis030195_protometry_api_vector3_vector3_pb.Vector3.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.nakama.niwrad.api.realtime.NavMeshUpdate.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.nakama.niwrad.api.realtime.NavMeshUpdate.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional protometry.vector3.Vector3 destination = 2;
 * @return {?proto.protometry.vector3.Vector3}
 */
proto.nakama.niwrad.api.realtime.NavMeshUpdate.prototype.getDestination = function() {
  return /** @type{?proto.protometry.vector3.Vector3} */ (
    jspb.Message.getWrapperField(this, github_com_louis030195_protometry_api_vector3_vector3_pb.Vector3, 2));
};


/** @param {?proto.protometry.vector3.Vector3|undefined} value */
proto.nakama.niwrad.api.realtime.NavMeshUpdate.prototype.setDestination = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.nakama.niwrad.api.realtime.NavMeshUpdate.prototype.clearDestination = function() {
  this.setDestination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nakama.niwrad.api.realtime.NavMeshUpdate.prototype.hasDestination = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nakama.niwrad.api.realtime.Spawn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nakama.niwrad.api.realtime.Spawn.oneofGroups_);
};
goog.inherits(proto.nakama.niwrad.api.realtime.Spawn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nakama.niwrad.api.realtime.Spawn.displayName = 'proto.nakama.niwrad.api.realtime.Spawn';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nakama.niwrad.api.realtime.Spawn.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.nakama.niwrad.api.realtime.Spawn.TypeCase = {
  TYPE_NOT_SET: 0,
  ANY: 1,
  PLANT: 2,
  ANIMAL: 3
};

/**
 * @return {proto.nakama.niwrad.api.realtime.Spawn.TypeCase}
 */
proto.nakama.niwrad.api.realtime.Spawn.prototype.getTypeCase = function() {
  return /** @type {proto.nakama.niwrad.api.realtime.Spawn.TypeCase} */(jspb.Message.computeOneofCase(this, proto.nakama.niwrad.api.realtime.Spawn.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nakama.niwrad.api.realtime.Spawn.prototype.toObject = function(opt_includeInstance) {
  return proto.nakama.niwrad.api.realtime.Spawn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nakama.niwrad.api.realtime.Spawn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Spawn.toObject = function(includeInstance, msg) {
  var f, obj = {
    any: (f = msg.getAny()) && proto.nakama.niwrad.api.realtime.Transform.toObject(includeInstance, f),
    plant: (f = msg.getPlant()) && proto.nakama.niwrad.api.realtime.Plant.toObject(includeInstance, f),
    animal: (f = msg.getAnimal()) && proto.nakama.niwrad.api.realtime.Animal.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nakama.niwrad.api.realtime.Spawn}
 */
proto.nakama.niwrad.api.realtime.Spawn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nakama.niwrad.api.realtime.Spawn;
  return proto.nakama.niwrad.api.realtime.Spawn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nakama.niwrad.api.realtime.Spawn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nakama.niwrad.api.realtime.Spawn}
 */
proto.nakama.niwrad.api.realtime.Spawn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nakama.niwrad.api.realtime.Transform;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Transform.deserializeBinaryFromReader);
      msg.setAny(value);
      break;
    case 2:
      var value = new proto.nakama.niwrad.api.realtime.Plant;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Plant.deserializeBinaryFromReader);
      msg.setPlant(value);
      break;
    case 3:
      var value = new proto.nakama.niwrad.api.realtime.Animal;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Animal.deserializeBinaryFromReader);
      msg.setAnimal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nakama.niwrad.api.realtime.Spawn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nakama.niwrad.api.realtime.Spawn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nakama.niwrad.api.realtime.Spawn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Spawn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAny();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nakama.niwrad.api.realtime.Transform.serializeBinaryToWriter
    );
  }
  f = message.getPlant();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nakama.niwrad.api.realtime.Plant.serializeBinaryToWriter
    );
  }
  f = message.getAnimal();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nakama.niwrad.api.realtime.Animal.serializeBinaryToWriter
    );
  }
};


/**
 * optional Transform any = 1;
 * @return {?proto.nakama.niwrad.api.realtime.Transform}
 */
proto.nakama.niwrad.api.realtime.Spawn.prototype.getAny = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Transform} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Transform, 1));
};


/** @param {?proto.nakama.niwrad.api.realtime.Transform|undefined} value */
proto.nakama.niwrad.api.realtime.Spawn.prototype.setAny = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.nakama.niwrad.api.realtime.Spawn.oneofGroups_[0], value);
};


proto.nakama.niwrad.api.realtime.Spawn.prototype.clearAny = function() {
  this.setAny(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nakama.niwrad.api.realtime.Spawn.prototype.hasAny = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Plant plant = 2;
 * @return {?proto.nakama.niwrad.api.realtime.Plant}
 */
proto.nakama.niwrad.api.realtime.Spawn.prototype.getPlant = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Plant} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Plant, 2));
};


/** @param {?proto.nakama.niwrad.api.realtime.Plant|undefined} value */
proto.nakama.niwrad.api.realtime.Spawn.prototype.setPlant = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.nakama.niwrad.api.realtime.Spawn.oneofGroups_[0], value);
};


proto.nakama.niwrad.api.realtime.Spawn.prototype.clearPlant = function() {
  this.setPlant(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nakama.niwrad.api.realtime.Spawn.prototype.hasPlant = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Animal animal = 3;
 * @return {?proto.nakama.niwrad.api.realtime.Animal}
 */
proto.nakama.niwrad.api.realtime.Spawn.prototype.getAnimal = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Animal} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Animal, 3));
};


/** @param {?proto.nakama.niwrad.api.realtime.Animal|undefined} value */
proto.nakama.niwrad.api.realtime.Spawn.prototype.setAnimal = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.nakama.niwrad.api.realtime.Spawn.oneofGroups_[0], value);
};


proto.nakama.niwrad.api.realtime.Spawn.prototype.clearAnimal = function() {
  this.setAnimal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nakama.niwrad.api.realtime.Spawn.prototype.hasAnimal = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nakama.niwrad.api.realtime.Destroy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nakama.niwrad.api.realtime.Destroy.oneofGroups_);
};
goog.inherits(proto.nakama.niwrad.api.realtime.Destroy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nakama.niwrad.api.realtime.Destroy.displayName = 'proto.nakama.niwrad.api.realtime.Destroy';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nakama.niwrad.api.realtime.Destroy.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.nakama.niwrad.api.realtime.Destroy.TypeCase = {
  TYPE_NOT_SET: 0,
  ANY: 1,
  PLANT: 2,
  ANIMAL: 3
};

/**
 * @return {proto.nakama.niwrad.api.realtime.Destroy.TypeCase}
 */
proto.nakama.niwrad.api.realtime.Destroy.prototype.getTypeCase = function() {
  return /** @type {proto.nakama.niwrad.api.realtime.Destroy.TypeCase} */(jspb.Message.computeOneofCase(this, proto.nakama.niwrad.api.realtime.Destroy.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nakama.niwrad.api.realtime.Destroy.prototype.toObject = function(opt_includeInstance) {
  return proto.nakama.niwrad.api.realtime.Destroy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nakama.niwrad.api.realtime.Destroy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Destroy.toObject = function(includeInstance, msg) {
  var f, obj = {
    any: (f = msg.getAny()) && proto.nakama.niwrad.api.realtime.Transform.toObject(includeInstance, f),
    plant: (f = msg.getPlant()) && proto.nakama.niwrad.api.realtime.Plant.toObject(includeInstance, f),
    animal: (f = msg.getAnimal()) && proto.nakama.niwrad.api.realtime.Animal.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nakama.niwrad.api.realtime.Destroy}
 */
proto.nakama.niwrad.api.realtime.Destroy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nakama.niwrad.api.realtime.Destroy;
  return proto.nakama.niwrad.api.realtime.Destroy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nakama.niwrad.api.realtime.Destroy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nakama.niwrad.api.realtime.Destroy}
 */
proto.nakama.niwrad.api.realtime.Destroy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nakama.niwrad.api.realtime.Transform;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Transform.deserializeBinaryFromReader);
      msg.setAny(value);
      break;
    case 2:
      var value = new proto.nakama.niwrad.api.realtime.Plant;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Plant.deserializeBinaryFromReader);
      msg.setPlant(value);
      break;
    case 3:
      var value = new proto.nakama.niwrad.api.realtime.Animal;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Animal.deserializeBinaryFromReader);
      msg.setAnimal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nakama.niwrad.api.realtime.Destroy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nakama.niwrad.api.realtime.Destroy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nakama.niwrad.api.realtime.Destroy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Destroy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAny();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nakama.niwrad.api.realtime.Transform.serializeBinaryToWriter
    );
  }
  f = message.getPlant();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nakama.niwrad.api.realtime.Plant.serializeBinaryToWriter
    );
  }
  f = message.getAnimal();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nakama.niwrad.api.realtime.Animal.serializeBinaryToWriter
    );
  }
};


/**
 * optional Transform any = 1;
 * @return {?proto.nakama.niwrad.api.realtime.Transform}
 */
proto.nakama.niwrad.api.realtime.Destroy.prototype.getAny = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Transform} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Transform, 1));
};


/** @param {?proto.nakama.niwrad.api.realtime.Transform|undefined} value */
proto.nakama.niwrad.api.realtime.Destroy.prototype.setAny = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.nakama.niwrad.api.realtime.Destroy.oneofGroups_[0], value);
};


proto.nakama.niwrad.api.realtime.Destroy.prototype.clearAny = function() {
  this.setAny(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nakama.niwrad.api.realtime.Destroy.prototype.hasAny = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Plant plant = 2;
 * @return {?proto.nakama.niwrad.api.realtime.Plant}
 */
proto.nakama.niwrad.api.realtime.Destroy.prototype.getPlant = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Plant} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Plant, 2));
};


/** @param {?proto.nakama.niwrad.api.realtime.Plant|undefined} value */
proto.nakama.niwrad.api.realtime.Destroy.prototype.setPlant = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.nakama.niwrad.api.realtime.Destroy.oneofGroups_[0], value);
};


proto.nakama.niwrad.api.realtime.Destroy.prototype.clearPlant = function() {
  this.setPlant(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nakama.niwrad.api.realtime.Destroy.prototype.hasPlant = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Animal animal = 3;
 * @return {?proto.nakama.niwrad.api.realtime.Animal}
 */
proto.nakama.niwrad.api.realtime.Destroy.prototype.getAnimal = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Animal} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Animal, 3));
};


/** @param {?proto.nakama.niwrad.api.realtime.Animal|undefined} value */
proto.nakama.niwrad.api.realtime.Destroy.prototype.setAnimal = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.nakama.niwrad.api.realtime.Destroy.oneofGroups_[0], value);
};


proto.nakama.niwrad.api.realtime.Destroy.prototype.clearAnimal = function() {
  this.setAnimal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nakama.niwrad.api.realtime.Destroy.prototype.hasAnimal = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nakama.niwrad.api.realtime.Meme = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nakama.niwrad.api.realtime.Meme, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nakama.niwrad.api.realtime.Meme.displayName = 'proto.nakama.niwrad.api.realtime.Meme';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nakama.niwrad.api.realtime.Meme.prototype.toObject = function(opt_includeInstance) {
  return proto.nakama.niwrad.api.realtime.Meme.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nakama.niwrad.api.realtime.Meme} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Meme.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    memeName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nakama.niwrad.api.realtime.Meme}
 */
proto.nakama.niwrad.api.realtime.Meme.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nakama.niwrad.api.realtime.Meme;
  return proto.nakama.niwrad.api.realtime.Meme.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nakama.niwrad.api.realtime.Meme} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nakama.niwrad.api.realtime.Meme}
 */
proto.nakama.niwrad.api.realtime.Meme.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemeName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nakama.niwrad.api.realtime.Meme.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nakama.niwrad.api.realtime.Meme.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nakama.niwrad.api.realtime.Meme} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Meme.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getMemeName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.nakama.niwrad.api.realtime.Meme.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.nakama.niwrad.api.realtime.Meme.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string meme_name = 2;
 * @return {string}
 */
proto.nakama.niwrad.api.realtime.Meme.prototype.getMemeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.nakama.niwrad.api.realtime.Meme.prototype.setMemeName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nakama.niwrad.api.realtime.Initialized = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nakama.niwrad.api.realtime.Initialized, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nakama.niwrad.api.realtime.Initialized.displayName = 'proto.nakama.niwrad.api.realtime.Initialized';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nakama.niwrad.api.realtime.Initialized.prototype.toObject = function(opt_includeInstance) {
  return proto.nakama.niwrad.api.realtime.Initialized.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nakama.niwrad.api.realtime.Initialized} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Initialized.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nakama.niwrad.api.realtime.Initialized}
 */
proto.nakama.niwrad.api.realtime.Initialized.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nakama.niwrad.api.realtime.Initialized;
  return proto.nakama.niwrad.api.realtime.Initialized.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nakama.niwrad.api.realtime.Initialized} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nakama.niwrad.api.realtime.Initialized}
 */
proto.nakama.niwrad.api.realtime.Initialized.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nakama.niwrad.api.realtime.Initialized.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nakama.niwrad.api.realtime.Initialized.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nakama.niwrad.api.realtime.Initialized} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Initialized.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nakama.niwrad.api.realtime.Transform = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nakama.niwrad.api.realtime.Transform, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nakama.niwrad.api.realtime.Transform.displayName = 'proto.nakama.niwrad.api.realtime.Transform';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nakama.niwrad.api.realtime.Transform.prototype.toObject = function(opt_includeInstance) {
  return proto.nakama.niwrad.api.realtime.Transform.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nakama.niwrad.api.realtime.Transform} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Transform.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    position: (f = msg.getPosition()) && github_com_louis030195_protometry_api_vector3_vector3_pb.Vector3.toObject(includeInstance, f),
    rotation: (f = msg.getRotation()) && github_com_louis030195_protometry_api_quaternion_quaternion_pb.Quaternion.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nakama.niwrad.api.realtime.Transform}
 */
proto.nakama.niwrad.api.realtime.Transform.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nakama.niwrad.api.realtime.Transform;
  return proto.nakama.niwrad.api.realtime.Transform.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nakama.niwrad.api.realtime.Transform} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nakama.niwrad.api.realtime.Transform}
 */
proto.nakama.niwrad.api.realtime.Transform.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = new github_com_louis030195_protometry_api_vector3_vector3_pb.Vector3;
      reader.readMessage(value,github_com_louis030195_protometry_api_vector3_vector3_pb.Vector3.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 3:
      var value = new github_com_louis030195_protometry_api_quaternion_quaternion_pb.Quaternion;
      reader.readMessage(value,github_com_louis030195_protometry_api_quaternion_quaternion_pb.Quaternion.deserializeBinaryFromReader);
      msg.setRotation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nakama.niwrad.api.realtime.Transform.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nakama.niwrad.api.realtime.Transform.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nakama.niwrad.api.realtime.Transform} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Transform.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      github_com_louis030195_protometry_api_vector3_vector3_pb.Vector3.serializeBinaryToWriter
    );
  }
  f = message.getRotation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      github_com_louis030195_protometry_api_quaternion_quaternion_pb.Quaternion.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.nakama.niwrad.api.realtime.Transform.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.nakama.niwrad.api.realtime.Transform.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional protometry.vector3.Vector3 position = 2;
 * @return {?proto.protometry.vector3.Vector3}
 */
proto.nakama.niwrad.api.realtime.Transform.prototype.getPosition = function() {
  return /** @type{?proto.protometry.vector3.Vector3} */ (
    jspb.Message.getWrapperField(this, github_com_louis030195_protometry_api_vector3_vector3_pb.Vector3, 2));
};


/** @param {?proto.protometry.vector3.Vector3|undefined} value */
proto.nakama.niwrad.api.realtime.Transform.prototype.setPosition = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.nakama.niwrad.api.realtime.Transform.prototype.clearPosition = function() {
  this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nakama.niwrad.api.realtime.Transform.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional protometry.quaternion.Quaternion rotation = 3;
 * @return {?proto.protometry.quaternion.Quaternion}
 */
proto.nakama.niwrad.api.realtime.Transform.prototype.getRotation = function() {
  return /** @type{?proto.protometry.quaternion.Quaternion} */ (
    jspb.Message.getWrapperField(this, github_com_louis030195_protometry_api_quaternion_quaternion_pb.Quaternion, 3));
};


/** @param {?proto.protometry.quaternion.Quaternion|undefined} value */
proto.nakama.niwrad.api.realtime.Transform.prototype.setRotation = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.nakama.niwrad.api.realtime.Transform.prototype.clearRotation = function() {
  this.setRotation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nakama.niwrad.api.realtime.Transform.prototype.hasRotation = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nakama.niwrad.api.realtime.Plant = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nakama.niwrad.api.realtime.Plant, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nakama.niwrad.api.realtime.Plant.displayName = 'proto.nakama.niwrad.api.realtime.Plant';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nakama.niwrad.api.realtime.Plant.prototype.toObject = function(opt_includeInstance) {
  return proto.nakama.niwrad.api.realtime.Plant.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nakama.niwrad.api.realtime.Plant} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Plant.toObject = function(includeInstance, msg) {
  var f, obj = {
    transform: (f = msg.getTransform()) && proto.nakama.niwrad.api.realtime.Transform.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nakama.niwrad.api.realtime.Plant}
 */
proto.nakama.niwrad.api.realtime.Plant.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nakama.niwrad.api.realtime.Plant;
  return proto.nakama.niwrad.api.realtime.Plant.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nakama.niwrad.api.realtime.Plant} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nakama.niwrad.api.realtime.Plant}
 */
proto.nakama.niwrad.api.realtime.Plant.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nakama.niwrad.api.realtime.Transform;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Transform.deserializeBinaryFromReader);
      msg.setTransform(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nakama.niwrad.api.realtime.Plant.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nakama.niwrad.api.realtime.Plant.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nakama.niwrad.api.realtime.Plant} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Plant.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransform();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nakama.niwrad.api.realtime.Transform.serializeBinaryToWriter
    );
  }
};


/**
 * optional Transform transform = 1;
 * @return {?proto.nakama.niwrad.api.realtime.Transform}
 */
proto.nakama.niwrad.api.realtime.Plant.prototype.getTransform = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Transform} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Transform, 1));
};


/** @param {?proto.nakama.niwrad.api.realtime.Transform|undefined} value */
proto.nakama.niwrad.api.realtime.Plant.prototype.setTransform = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.nakama.niwrad.api.realtime.Plant.prototype.clearTransform = function() {
  this.setTransform(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nakama.niwrad.api.realtime.Plant.prototype.hasTransform = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nakama.niwrad.api.realtime.Animal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nakama.niwrad.api.realtime.Animal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nakama.niwrad.api.realtime.Animal.displayName = 'proto.nakama.niwrad.api.realtime.Animal';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nakama.niwrad.api.realtime.Animal.prototype.toObject = function(opt_includeInstance) {
  return proto.nakama.niwrad.api.realtime.Animal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nakama.niwrad.api.realtime.Animal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Animal.toObject = function(includeInstance, msg) {
  var f, obj = {
    transform: (f = msg.getTransform()) && proto.nakama.niwrad.api.realtime.Transform.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nakama.niwrad.api.realtime.Animal}
 */
proto.nakama.niwrad.api.realtime.Animal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nakama.niwrad.api.realtime.Animal;
  return proto.nakama.niwrad.api.realtime.Animal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nakama.niwrad.api.realtime.Animal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nakama.niwrad.api.realtime.Animal}
 */
proto.nakama.niwrad.api.realtime.Animal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nakama.niwrad.api.realtime.Transform;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Transform.deserializeBinaryFromReader);
      msg.setTransform(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nakama.niwrad.api.realtime.Animal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nakama.niwrad.api.realtime.Animal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nakama.niwrad.api.realtime.Animal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Animal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransform();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nakama.niwrad.api.realtime.Transform.serializeBinaryToWriter
    );
  }
};


/**
 * optional Transform transform = 1;
 * @return {?proto.nakama.niwrad.api.realtime.Transform}
 */
proto.nakama.niwrad.api.realtime.Animal.prototype.getTransform = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Transform} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Transform, 1));
};


/** @param {?proto.nakama.niwrad.api.realtime.Transform|undefined} value */
proto.nakama.niwrad.api.realtime.Animal.prototype.setTransform = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.nakama.niwrad.api.realtime.Animal.prototype.clearTransform = function() {
  this.setTransform(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nakama.niwrad.api.realtime.Animal.prototype.hasTransform = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nakama.niwrad.api.realtime.RequestTransferOwnership = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nakama.niwrad.api.realtime.RequestTransferOwnership, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nakama.niwrad.api.realtime.RequestTransferOwnership.displayName = 'proto.nakama.niwrad.api.realtime.RequestTransferOwnership';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nakama.niwrad.api.realtime.RequestTransferOwnership.prototype.toObject = function(opt_includeInstance) {
  return proto.nakama.niwrad.api.realtime.RequestTransferOwnership.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nakama.niwrad.api.realtime.RequestTransferOwnership} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.RequestTransferOwnership.toObject = function(includeInstance, msg) {
  var f, obj = {
    transform: (f = msg.getTransform()) && proto.nakama.niwrad.api.realtime.Transform.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nakama.niwrad.api.realtime.RequestTransferOwnership}
 */
proto.nakama.niwrad.api.realtime.RequestTransferOwnership.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nakama.niwrad.api.realtime.RequestTransferOwnership;
  return proto.nakama.niwrad.api.realtime.RequestTransferOwnership.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nakama.niwrad.api.realtime.RequestTransferOwnership} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nakama.niwrad.api.realtime.RequestTransferOwnership}
 */
proto.nakama.niwrad.api.realtime.RequestTransferOwnership.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nakama.niwrad.api.realtime.Transform;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Transform.deserializeBinaryFromReader);
      msg.setTransform(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nakama.niwrad.api.realtime.RequestTransferOwnership.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nakama.niwrad.api.realtime.RequestTransferOwnership.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nakama.niwrad.api.realtime.RequestTransferOwnership} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.RequestTransferOwnership.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransform();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nakama.niwrad.api.realtime.Transform.serializeBinaryToWriter
    );
  }
};


/**
 * optional Transform transform = 1;
 * @return {?proto.nakama.niwrad.api.realtime.Transform}
 */
proto.nakama.niwrad.api.realtime.RequestTransferOwnership.prototype.getTransform = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Transform} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Transform, 1));
};


/** @param {?proto.nakama.niwrad.api.realtime.Transform|undefined} value */
proto.nakama.niwrad.api.realtime.RequestTransferOwnership.prototype.setTransform = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.nakama.niwrad.api.realtime.RequestTransferOwnership.prototype.clearTransform = function() {
  this.setTransform(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nakama.niwrad.api.realtime.RequestTransferOwnership.prototype.hasTransform = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nakama.niwrad.api.realtime.Characteristics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nakama.niwrad.api.realtime.Characteristics.oneofGroups_);
};
goog.inherits(proto.nakama.niwrad.api.realtime.Characteristics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nakama.niwrad.api.realtime.Characteristics.displayName = 'proto.nakama.niwrad.api.realtime.Characteristics';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nakama.niwrad.api.realtime.Characteristics.oneofGroups_ = [[15,16]];

/**
 * @enum {number}
 */
proto.nakama.niwrad.api.realtime.Characteristics.TypeCase = {
  TYPE_NOT_SET: 0,
  ANIMAL_CHARACTERISTICS: 15,
  PLANT_CHARACTERISTICS: 16
};

/**
 * @return {proto.nakama.niwrad.api.realtime.Characteristics.TypeCase}
 */
proto.nakama.niwrad.api.realtime.Characteristics.prototype.getTypeCase = function() {
  return /** @type {proto.nakama.niwrad.api.realtime.Characteristics.TypeCase} */(jspb.Message.computeOneofCase(this, proto.nakama.niwrad.api.realtime.Characteristics.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nakama.niwrad.api.realtime.Characteristics.prototype.toObject = function(opt_includeInstance) {
  return proto.nakama.niwrad.api.realtime.Characteristics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nakama.niwrad.api.realtime.Characteristics} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Characteristics.toObject = function(includeInstance, msg) {
  var f, obj = {
    computation: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    life: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    robustness: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    energy: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    reproductionCost: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    energyLoss: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    eatEnergyGain: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    drinkEnergyGain: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    carnivorous: jspb.Message.getFieldWithDefault(msg, 9, false),
    reproductionDelay: +jspb.Message.getFieldWithDefault(msg, 10, 0.0),
    reproductionProbability: +jspb.Message.getFieldWithDefault(msg, 11, 0.0),
    animalCharacteristics: (f = msg.getAnimalCharacteristics()) && proto.nakama.niwrad.api.realtime.Characteristics.AnimalCharacteristics.toObject(includeInstance, f),
    plantCharacteristics: (f = msg.getPlantCharacteristics()) && proto.nakama.niwrad.api.realtime.Characteristics.PlantCharacteristics.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nakama.niwrad.api.realtime.Characteristics}
 */
proto.nakama.niwrad.api.realtime.Characteristics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nakama.niwrad.api.realtime.Characteristics;
  return proto.nakama.niwrad.api.realtime.Characteristics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nakama.niwrad.api.realtime.Characteristics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nakama.niwrad.api.realtime.Characteristics}
 */
proto.nakama.niwrad.api.realtime.Characteristics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setComputation(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLife(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRobustness(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setEnergy(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setReproductionCost(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setEnergyLoss(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setEatEnergyGain(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDrinkEnergyGain(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCarnivorous(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setReproductionDelay(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setReproductionProbability(value);
      break;
    case 15:
      var value = new proto.nakama.niwrad.api.realtime.Characteristics.AnimalCharacteristics;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Characteristics.AnimalCharacteristics.deserializeBinaryFromReader);
      msg.setAnimalCharacteristics(value);
      break;
    case 16:
      var value = new proto.nakama.niwrad.api.realtime.Characteristics.PlantCharacteristics;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Characteristics.PlantCharacteristics.deserializeBinaryFromReader);
      msg.setPlantCharacteristics(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nakama.niwrad.api.realtime.Characteristics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nakama.niwrad.api.realtime.Characteristics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nakama.niwrad.api.realtime.Characteristics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Characteristics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getComputation();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getLife();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getRobustness();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getEnergy();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getReproductionCost();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getEnergyLoss();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getEatEnergyGain();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getDrinkEnergyGain();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getCarnivorous();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getReproductionDelay();
  if (f !== 0.0) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = message.getReproductionProbability();
  if (f !== 0.0) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = message.getAnimalCharacteristics();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.nakama.niwrad.api.realtime.Characteristics.AnimalCharacteristics.serializeBinaryToWriter
    );
  }
  f = message.getPlantCharacteristics();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.nakama.niwrad.api.realtime.Characteristics.PlantCharacteristics.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nakama.niwrad.api.realtime.Characteristics.AnimalCharacteristics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nakama.niwrad.api.realtime.Characteristics.AnimalCharacteristics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nakama.niwrad.api.realtime.Characteristics.AnimalCharacteristics.displayName = 'proto.nakama.niwrad.api.realtime.Characteristics.AnimalCharacteristics';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nakama.niwrad.api.realtime.Characteristics.AnimalCharacteristics.prototype.toObject = function(opt_includeInstance) {
  return proto.nakama.niwrad.api.realtime.Characteristics.AnimalCharacteristics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nakama.niwrad.api.realtime.Characteristics.AnimalCharacteristics} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Characteristics.AnimalCharacteristics.toObject = function(includeInstance, msg) {
  var f, obj = {
    speed: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    randomMovementRange: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    sightRange: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    eatRange: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    metabolism: +jspb.Message.getFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nakama.niwrad.api.realtime.Characteristics.AnimalCharacteristics}
 */
proto.nakama.niwrad.api.realtime.Characteristics.AnimalCharacteristics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nakama.niwrad.api.realtime.Characteristics.AnimalCharacteristics;
  return proto.nakama.niwrad.api.realtime.Characteristics.AnimalCharacteristics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nakama.niwrad.api.realtime.Characteristics.AnimalCharacteristics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nakama.niwrad.api.realtime.Characteristics.AnimalCharacteristics}
 */
proto.nakama.niwrad.api.realtime.Characteristics.AnimalCharacteristics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSpeed(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRandomMovementRange(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSightRange(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setEatRange(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMetabolism(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nakama.niwrad.api.realtime.Characteristics.AnimalCharacteristics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nakama.niwrad.api.realtime.Characteristics.AnimalCharacteristics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nakama.niwrad.api.realtime.Characteristics.AnimalCharacteristics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Characteristics.AnimalCharacteristics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpeed();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getRandomMovementRange();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getSightRange();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getEatRange();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getMetabolism();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
};


/**
 * optional float speed = 1;
 * @return {number}
 */
proto.nakama.niwrad.api.realtime.Characteristics.AnimalCharacteristics.prototype.getSpeed = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.nakama.niwrad.api.realtime.Characteristics.AnimalCharacteristics.prototype.setSpeed = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float random_movement_range = 2;
 * @return {number}
 */
proto.nakama.niwrad.api.realtime.Characteristics.AnimalCharacteristics.prototype.getRandomMovementRange = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.nakama.niwrad.api.realtime.Characteristics.AnimalCharacteristics.prototype.setRandomMovementRange = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float sight_range = 3;
 * @return {number}
 */
proto.nakama.niwrad.api.realtime.Characteristics.AnimalCharacteristics.prototype.getSightRange = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.nakama.niwrad.api.realtime.Characteristics.AnimalCharacteristics.prototype.setSightRange = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float eat_range = 4;
 * @return {number}
 */
proto.nakama.niwrad.api.realtime.Characteristics.AnimalCharacteristics.prototype.getEatRange = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.nakama.niwrad.api.realtime.Characteristics.AnimalCharacteristics.prototype.setEatRange = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float metabolism = 5;
 * @return {number}
 */
proto.nakama.niwrad.api.realtime.Characteristics.AnimalCharacteristics.prototype.getMetabolism = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.nakama.niwrad.api.realtime.Characteristics.AnimalCharacteristics.prototype.setMetabolism = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nakama.niwrad.api.realtime.Characteristics.PlantCharacteristics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nakama.niwrad.api.realtime.Characteristics.PlantCharacteristics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nakama.niwrad.api.realtime.Characteristics.PlantCharacteristics.displayName = 'proto.nakama.niwrad.api.realtime.Characteristics.PlantCharacteristics';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nakama.niwrad.api.realtime.Characteristics.PlantCharacteristics.prototype.toObject = function(opt_includeInstance) {
  return proto.nakama.niwrad.api.realtime.Characteristics.PlantCharacteristics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nakama.niwrad.api.realtime.Characteristics.PlantCharacteristics} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Characteristics.PlantCharacteristics.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nakama.niwrad.api.realtime.Characteristics.PlantCharacteristics}
 */
proto.nakama.niwrad.api.realtime.Characteristics.PlantCharacteristics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nakama.niwrad.api.realtime.Characteristics.PlantCharacteristics;
  return proto.nakama.niwrad.api.realtime.Characteristics.PlantCharacteristics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nakama.niwrad.api.realtime.Characteristics.PlantCharacteristics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nakama.niwrad.api.realtime.Characteristics.PlantCharacteristics}
 */
proto.nakama.niwrad.api.realtime.Characteristics.PlantCharacteristics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nakama.niwrad.api.realtime.Characteristics.PlantCharacteristics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nakama.niwrad.api.realtime.Characteristics.PlantCharacteristics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nakama.niwrad.api.realtime.Characteristics.PlantCharacteristics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Characteristics.PlantCharacteristics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * optional float computation = 1;
 * @return {number}
 */
proto.nakama.niwrad.api.realtime.Characteristics.prototype.getComputation = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.nakama.niwrad.api.realtime.Characteristics.prototype.setComputation = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float life = 2;
 * @return {number}
 */
proto.nakama.niwrad.api.realtime.Characteristics.prototype.getLife = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.nakama.niwrad.api.realtime.Characteristics.prototype.setLife = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float robustness = 3;
 * @return {number}
 */
proto.nakama.niwrad.api.realtime.Characteristics.prototype.getRobustness = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.nakama.niwrad.api.realtime.Characteristics.prototype.setRobustness = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float energy = 4;
 * @return {number}
 */
proto.nakama.niwrad.api.realtime.Characteristics.prototype.getEnergy = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.nakama.niwrad.api.realtime.Characteristics.prototype.setEnergy = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float reproduction_cost = 5;
 * @return {number}
 */
proto.nakama.niwrad.api.realtime.Characteristics.prototype.getReproductionCost = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.nakama.niwrad.api.realtime.Characteristics.prototype.setReproductionCost = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float energy_loss = 6;
 * @return {number}
 */
proto.nakama.niwrad.api.realtime.Characteristics.prototype.getEnergyLoss = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.nakama.niwrad.api.realtime.Characteristics.prototype.setEnergyLoss = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional float eat_energy_gain = 7;
 * @return {number}
 */
proto.nakama.niwrad.api.realtime.Characteristics.prototype.getEatEnergyGain = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.nakama.niwrad.api.realtime.Characteristics.prototype.setEatEnergyGain = function(value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional float drink_energy_gain = 8;
 * @return {number}
 */
proto.nakama.niwrad.api.realtime.Characteristics.prototype.getDrinkEnergyGain = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.nakama.niwrad.api.realtime.Characteristics.prototype.setDrinkEnergyGain = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional bool carnivorous = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.nakama.niwrad.api.realtime.Characteristics.prototype.getCarnivorous = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.nakama.niwrad.api.realtime.Characteristics.prototype.setCarnivorous = function(value) {
  jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional float reproduction_delay = 10;
 * @return {number}
 */
proto.nakama.niwrad.api.realtime.Characteristics.prototype.getReproductionDelay = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 10, 0.0));
};


/** @param {number} value */
proto.nakama.niwrad.api.realtime.Characteristics.prototype.setReproductionDelay = function(value) {
  jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional float reproduction_probability = 11;
 * @return {number}
 */
proto.nakama.niwrad.api.realtime.Characteristics.prototype.getReproductionProbability = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 11, 0.0));
};


/** @param {number} value */
proto.nakama.niwrad.api.realtime.Characteristics.prototype.setReproductionProbability = function(value) {
  jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional AnimalCharacteristics animal_characteristics = 15;
 * @return {?proto.nakama.niwrad.api.realtime.Characteristics.AnimalCharacteristics}
 */
proto.nakama.niwrad.api.realtime.Characteristics.prototype.getAnimalCharacteristics = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Characteristics.AnimalCharacteristics} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Characteristics.AnimalCharacteristics, 15));
};


/** @param {?proto.nakama.niwrad.api.realtime.Characteristics.AnimalCharacteristics|undefined} value */
proto.nakama.niwrad.api.realtime.Characteristics.prototype.setAnimalCharacteristics = function(value) {
  jspb.Message.setOneofWrapperField(this, 15, proto.nakama.niwrad.api.realtime.Characteristics.oneofGroups_[0], value);
};


proto.nakama.niwrad.api.realtime.Characteristics.prototype.clearAnimalCharacteristics = function() {
  this.setAnimalCharacteristics(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nakama.niwrad.api.realtime.Characteristics.prototype.hasAnimalCharacteristics = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional PlantCharacteristics plant_characteristics = 16;
 * @return {?proto.nakama.niwrad.api.realtime.Characteristics.PlantCharacteristics}
 */
proto.nakama.niwrad.api.realtime.Characteristics.prototype.getPlantCharacteristics = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Characteristics.PlantCharacteristics} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Characteristics.PlantCharacteristics, 16));
};


/** @param {?proto.nakama.niwrad.api.realtime.Characteristics.PlantCharacteristics|undefined} value */
proto.nakama.niwrad.api.realtime.Characteristics.prototype.setPlantCharacteristics = function(value) {
  jspb.Message.setOneofWrapperField(this, 16, proto.nakama.niwrad.api.realtime.Characteristics.oneofGroups_[0], value);
};


proto.nakama.niwrad.api.realtime.Characteristics.prototype.clearPlantCharacteristics = function() {
  this.setPlantCharacteristics(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nakama.niwrad.api.realtime.Characteristics.prototype.hasPlantCharacteristics = function() {
  return jspb.Message.getField(this, 16) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nakama.niwrad.api.realtime.TimeSeriePoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nakama.niwrad.api.realtime.TimeSeriePoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nakama.niwrad.api.realtime.TimeSeriePoint.displayName = 'proto.nakama.niwrad.api.realtime.TimeSeriePoint';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nakama.niwrad.api.realtime.TimeSeriePoint.prototype.toObject = function(opt_includeInstance) {
  return proto.nakama.niwrad.api.realtime.TimeSeriePoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nakama.niwrad.api.realtime.TimeSeriePoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.TimeSeriePoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    animals: jspb.Message.getFieldWithDefault(msg, 50, 0),
    plants: jspb.Message.getFieldWithDefault(msg, 60, 0),
    animalAge: +jspb.Message.getFieldWithDefault(msg, 70, 0.0),
    animalCharacteristics: (f = msg.getAnimalCharacteristics()) && proto.nakama.niwrad.api.realtime.Characteristics.toObject(includeInstance, f),
    plantAge: +jspb.Message.getFieldWithDefault(msg, 90, 0.0),
    plantCharacteristics: (f = msg.getPlantCharacteristics()) && proto.nakama.niwrad.api.realtime.Characteristics.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nakama.niwrad.api.realtime.TimeSeriePoint}
 */
proto.nakama.niwrad.api.realtime.TimeSeriePoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nakama.niwrad.api.realtime.TimeSeriePoint;
  return proto.nakama.niwrad.api.realtime.TimeSeriePoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nakama.niwrad.api.realtime.TimeSeriePoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nakama.niwrad.api.realtime.TimeSeriePoint}
 */
proto.nakama.niwrad.api.realtime.TimeSeriePoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 50:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAnimals(value);
      break;
    case 60:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPlants(value);
      break;
    case 70:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAnimalAge(value);
      break;
    case 10:
      var value = new proto.nakama.niwrad.api.realtime.Characteristics;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Characteristics.deserializeBinaryFromReader);
      msg.setAnimalCharacteristics(value);
      break;
    case 90:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPlantAge(value);
      break;
    case 40:
      var value = new proto.nakama.niwrad.api.realtime.Characteristics;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Characteristics.deserializeBinaryFromReader);
      msg.setPlantCharacteristics(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nakama.niwrad.api.realtime.TimeSeriePoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nakama.niwrad.api.realtime.TimeSeriePoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nakama.niwrad.api.realtime.TimeSeriePoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.TimeSeriePoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnimals();
  if (f !== 0) {
    writer.writeInt64(
      50,
      f
    );
  }
  f = message.getPlants();
  if (f !== 0) {
    writer.writeInt64(
      60,
      f
    );
  }
  f = message.getAnimalAge();
  if (f !== 0.0) {
    writer.writeDouble(
      70,
      f
    );
  }
  f = message.getAnimalCharacteristics();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.nakama.niwrad.api.realtime.Characteristics.serializeBinaryToWriter
    );
  }
  f = message.getPlantAge();
  if (f !== 0.0) {
    writer.writeDouble(
      90,
      f
    );
  }
  f = message.getPlantCharacteristics();
  if (f != null) {
    writer.writeMessage(
      40,
      f,
      proto.nakama.niwrad.api.realtime.Characteristics.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 animals = 50;
 * @return {number}
 */
proto.nakama.niwrad.api.realtime.TimeSeriePoint.prototype.getAnimals = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 50, 0));
};


/** @param {number} value */
proto.nakama.niwrad.api.realtime.TimeSeriePoint.prototype.setAnimals = function(value) {
  jspb.Message.setProto3IntField(this, 50, value);
};


/**
 * optional int64 plants = 60;
 * @return {number}
 */
proto.nakama.niwrad.api.realtime.TimeSeriePoint.prototype.getPlants = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 60, 0));
};


/** @param {number} value */
proto.nakama.niwrad.api.realtime.TimeSeriePoint.prototype.setPlants = function(value) {
  jspb.Message.setProto3IntField(this, 60, value);
};


/**
 * optional double animal_age = 70;
 * @return {number}
 */
proto.nakama.niwrad.api.realtime.TimeSeriePoint.prototype.getAnimalAge = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 70, 0.0));
};


/** @param {number} value */
proto.nakama.niwrad.api.realtime.TimeSeriePoint.prototype.setAnimalAge = function(value) {
  jspb.Message.setProto3FloatField(this, 70, value);
};


/**
 * optional Characteristics animal_characteristics = 10;
 * @return {?proto.nakama.niwrad.api.realtime.Characteristics}
 */
proto.nakama.niwrad.api.realtime.TimeSeriePoint.prototype.getAnimalCharacteristics = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Characteristics} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Characteristics, 10));
};


/** @param {?proto.nakama.niwrad.api.realtime.Characteristics|undefined} value */
proto.nakama.niwrad.api.realtime.TimeSeriePoint.prototype.setAnimalCharacteristics = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.nakama.niwrad.api.realtime.TimeSeriePoint.prototype.clearAnimalCharacteristics = function() {
  this.setAnimalCharacteristics(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nakama.niwrad.api.realtime.TimeSeriePoint.prototype.hasAnimalCharacteristics = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional double plant_age = 90;
 * @return {number}
 */
proto.nakama.niwrad.api.realtime.TimeSeriePoint.prototype.getPlantAge = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 90, 0.0));
};


/** @param {number} value */
proto.nakama.niwrad.api.realtime.TimeSeriePoint.prototype.setPlantAge = function(value) {
  jspb.Message.setProto3FloatField(this, 90, value);
};


/**
 * optional Characteristics plant_characteristics = 40;
 * @return {?proto.nakama.niwrad.api.realtime.Characteristics}
 */
proto.nakama.niwrad.api.realtime.TimeSeriePoint.prototype.getPlantCharacteristics = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Characteristics} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Characteristics, 40));
};


/** @param {?proto.nakama.niwrad.api.realtime.Characteristics|undefined} value */
proto.nakama.niwrad.api.realtime.TimeSeriePoint.prototype.setPlantCharacteristics = function(value) {
  jspb.Message.setWrapperField(this, 40, value);
};


proto.nakama.niwrad.api.realtime.TimeSeriePoint.prototype.clearPlantCharacteristics = function() {
  this.setPlantCharacteristics(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nakama.niwrad.api.realtime.TimeSeriePoint.prototype.hasPlantCharacteristics = function() {
  return jspb.Message.getField(this, 40) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nakama.niwrad.api.realtime.Experience = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nakama.niwrad.api.realtime.Experience, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nakama.niwrad.api.realtime.Experience.displayName = 'proto.nakama.niwrad.api.realtime.Experience';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nakama.niwrad.api.realtime.Experience.prototype.toObject = function(opt_includeInstance) {
  return proto.nakama.niwrad.api.realtime.Experience.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nakama.niwrad.api.realtime.Experience} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Experience.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    includeCarnivorous: jspb.Message.getFieldWithDefault(msg, 14, false),
    carnivorousPercent: jspb.Message.getFieldWithDefault(msg, 15, 0),
    animalCharacteristics: (f = msg.getAnimalCharacteristics()) && proto.nakama.niwrad.api.realtime.Characteristics.toObject(includeInstance, f),
    animalCharacteristicsMinimumBound: (f = msg.getAnimalCharacteristicsMinimumBound()) && proto.nakama.niwrad.api.realtime.Characteristics.toObject(includeInstance, f),
    animalCharacteristicsMaximumBound: (f = msg.getAnimalCharacteristicsMaximumBound()) && proto.nakama.niwrad.api.realtime.Characteristics.toObject(includeInstance, f),
    animalDistribution: (f = msg.getAnimalDistribution()) && proto.nakama.niwrad.api.realtime.Experience.PopulationDistribution.toObject(includeInstance, f),
    plantCharacteristics: (f = msg.getPlantCharacteristics()) && proto.nakama.niwrad.api.realtime.Characteristics.toObject(includeInstance, f),
    plantCharacteristicsMinimumBound: (f = msg.getPlantCharacteristicsMinimumBound()) && proto.nakama.niwrad.api.realtime.Characteristics.toObject(includeInstance, f),
    plantCharacteristicsMaximumBound: (f = msg.getPlantCharacteristicsMaximumBound()) && proto.nakama.niwrad.api.realtime.Characteristics.toObject(includeInstance, f),
    plantDistribution: (f = msg.getPlantDistribution()) && proto.nakama.niwrad.api.realtime.Experience.PopulationDistribution.toObject(includeInstance, f),
    map: (f = msg.getMap()) && proto.nakama.niwrad.api.realtime.Experience.Map.toObject(includeInstance, f),
    general: (f = msg.getGeneral()) && proto.nakama.niwrad.api.realtime.Experience.GeneralParameters.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nakama.niwrad.api.realtime.Experience}
 */
proto.nakama.niwrad.api.realtime.Experience.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nakama.niwrad.api.realtime.Experience;
  return proto.nakama.niwrad.api.realtime.Experience.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nakama.niwrad.api.realtime.Experience} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nakama.niwrad.api.realtime.Experience}
 */
proto.nakama.niwrad.api.realtime.Experience.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludeCarnivorous(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCarnivorousPercent(value);
      break;
    case 10:
      var value = new proto.nakama.niwrad.api.realtime.Characteristics;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Characteristics.deserializeBinaryFromReader);
      msg.setAnimalCharacteristics(value);
      break;
    case 11:
      var value = new proto.nakama.niwrad.api.realtime.Characteristics;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Characteristics.deserializeBinaryFromReader);
      msg.setAnimalCharacteristicsMinimumBound(value);
      break;
    case 12:
      var value = new proto.nakama.niwrad.api.realtime.Characteristics;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Characteristics.deserializeBinaryFromReader);
      msg.setAnimalCharacteristicsMaximumBound(value);
      break;
    case 13:
      var value = new proto.nakama.niwrad.api.realtime.Experience.PopulationDistribution;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Experience.PopulationDistribution.deserializeBinaryFromReader);
      msg.setAnimalDistribution(value);
      break;
    case 40:
      var value = new proto.nakama.niwrad.api.realtime.Characteristics;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Characteristics.deserializeBinaryFromReader);
      msg.setPlantCharacteristics(value);
      break;
    case 41:
      var value = new proto.nakama.niwrad.api.realtime.Characteristics;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Characteristics.deserializeBinaryFromReader);
      msg.setPlantCharacteristicsMinimumBound(value);
      break;
    case 42:
      var value = new proto.nakama.niwrad.api.realtime.Characteristics;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Characteristics.deserializeBinaryFromReader);
      msg.setPlantCharacteristicsMaximumBound(value);
      break;
    case 43:
      var value = new proto.nakama.niwrad.api.realtime.Experience.PopulationDistribution;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Experience.PopulationDistribution.deserializeBinaryFromReader);
      msg.setPlantDistribution(value);
      break;
    case 50:
      var value = new proto.nakama.niwrad.api.realtime.Experience.Map;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Experience.Map.deserializeBinaryFromReader);
      msg.setMap(value);
      break;
    case 60:
      var value = new proto.nakama.niwrad.api.realtime.Experience.GeneralParameters;
      reader.readMessage(value,proto.nakama.niwrad.api.realtime.Experience.GeneralParameters.deserializeBinaryFromReader);
      msg.setGeneral(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nakama.niwrad.api.realtime.Experience.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nakama.niwrad.api.realtime.Experience.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nakama.niwrad.api.realtime.Experience} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Experience.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIncludeCarnivorous();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getCarnivorousPercent();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getAnimalCharacteristics();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.nakama.niwrad.api.realtime.Characteristics.serializeBinaryToWriter
    );
  }
  f = message.getAnimalCharacteristicsMinimumBound();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.nakama.niwrad.api.realtime.Characteristics.serializeBinaryToWriter
    );
  }
  f = message.getAnimalCharacteristicsMaximumBound();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.nakama.niwrad.api.realtime.Characteristics.serializeBinaryToWriter
    );
  }
  f = message.getAnimalDistribution();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.nakama.niwrad.api.realtime.Experience.PopulationDistribution.serializeBinaryToWriter
    );
  }
  f = message.getPlantCharacteristics();
  if (f != null) {
    writer.writeMessage(
      40,
      f,
      proto.nakama.niwrad.api.realtime.Characteristics.serializeBinaryToWriter
    );
  }
  f = message.getPlantCharacteristicsMinimumBound();
  if (f != null) {
    writer.writeMessage(
      41,
      f,
      proto.nakama.niwrad.api.realtime.Characteristics.serializeBinaryToWriter
    );
  }
  f = message.getPlantCharacteristicsMaximumBound();
  if (f != null) {
    writer.writeMessage(
      42,
      f,
      proto.nakama.niwrad.api.realtime.Characteristics.serializeBinaryToWriter
    );
  }
  f = message.getPlantDistribution();
  if (f != null) {
    writer.writeMessage(
      43,
      f,
      proto.nakama.niwrad.api.realtime.Experience.PopulationDistribution.serializeBinaryToWriter
    );
  }
  f = message.getMap();
  if (f != null) {
    writer.writeMessage(
      50,
      f,
      proto.nakama.niwrad.api.realtime.Experience.Map.serializeBinaryToWriter
    );
  }
  f = message.getGeneral();
  if (f != null) {
    writer.writeMessage(
      60,
      f,
      proto.nakama.niwrad.api.realtime.Experience.GeneralParameters.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nakama.niwrad.api.realtime.Experience.PopulationDistribution = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nakama.niwrad.api.realtime.Experience.PopulationDistribution, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nakama.niwrad.api.realtime.Experience.PopulationDistribution.displayName = 'proto.nakama.niwrad.api.realtime.Experience.PopulationDistribution';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nakama.niwrad.api.realtime.Experience.PopulationDistribution.prototype.toObject = function(opt_includeInstance) {
  return proto.nakama.niwrad.api.realtime.Experience.PopulationDistribution.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nakama.niwrad.api.realtime.Experience.PopulationDistribution} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Experience.PopulationDistribution.toObject = function(includeInstance, msg) {
  var f, obj = {
    initialAmount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    scattering: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nakama.niwrad.api.realtime.Experience.PopulationDistribution}
 */
proto.nakama.niwrad.api.realtime.Experience.PopulationDistribution.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nakama.niwrad.api.realtime.Experience.PopulationDistribution;
  return proto.nakama.niwrad.api.realtime.Experience.PopulationDistribution.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nakama.niwrad.api.realtime.Experience.PopulationDistribution} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nakama.niwrad.api.realtime.Experience.PopulationDistribution}
 */
proto.nakama.niwrad.api.realtime.Experience.PopulationDistribution.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setInitialAmount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setScattering(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nakama.niwrad.api.realtime.Experience.PopulationDistribution.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nakama.niwrad.api.realtime.Experience.PopulationDistribution.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nakama.niwrad.api.realtime.Experience.PopulationDistribution} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Experience.PopulationDistribution.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInitialAmount();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getScattering();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional uint64 initial_amount = 1;
 * @return {number}
 */
proto.nakama.niwrad.api.realtime.Experience.PopulationDistribution.prototype.getInitialAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.nakama.niwrad.api.realtime.Experience.PopulationDistribution.prototype.setInitialAmount = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional float scattering = 2;
 * @return {number}
 */
proto.nakama.niwrad.api.realtime.Experience.PopulationDistribution.prototype.getScattering = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.nakama.niwrad.api.realtime.Experience.PopulationDistribution.prototype.setScattering = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nakama.niwrad.api.realtime.Experience.Map = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nakama.niwrad.api.realtime.Experience.Map, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nakama.niwrad.api.realtime.Experience.Map.displayName = 'proto.nakama.niwrad.api.realtime.Experience.Map';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nakama.niwrad.api.realtime.Experience.Map.prototype.toObject = function(opt_includeInstance) {
  return proto.nakama.niwrad.api.realtime.Experience.Map.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nakama.niwrad.api.realtime.Experience.Map} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Experience.Map.toObject = function(includeInstance, msg) {
  var f, obj = {
    size: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    height: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    spread: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    spreadReductionRate: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    water: jspb.Message.getFieldWithDefault(msg, 8, false),
    diversity: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nakama.niwrad.api.realtime.Experience.Map}
 */
proto.nakama.niwrad.api.realtime.Experience.Map.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nakama.niwrad.api.realtime.Experience.Map;
  return proto.nakama.niwrad.api.realtime.Experience.Map.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nakama.niwrad.api.realtime.Experience.Map} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nakama.niwrad.api.realtime.Experience.Map}
 */
proto.nakama.niwrad.api.realtime.Experience.Map.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSize(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeight(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpread(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpreadReductionRate(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWater(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDiversity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nakama.niwrad.api.realtime.Experience.Map.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nakama.niwrad.api.realtime.Experience.Map.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nakama.niwrad.api.realtime.Experience.Map} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Experience.Map.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSize();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getSpread();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getSpreadReductionRate();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getWater();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getDiversity();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
};


/**
 * optional double size = 1;
 * @return {number}
 */
proto.nakama.niwrad.api.realtime.Experience.Map.prototype.getSize = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.nakama.niwrad.api.realtime.Experience.Map.prototype.setSize = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double height = 2;
 * @return {number}
 */
proto.nakama.niwrad.api.realtime.Experience.Map.prototype.getHeight = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.nakama.niwrad.api.realtime.Experience.Map.prototype.setHeight = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double spread = 5;
 * @return {number}
 */
proto.nakama.niwrad.api.realtime.Experience.Map.prototype.getSpread = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.nakama.niwrad.api.realtime.Experience.Map.prototype.setSpread = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double spread_reduction_rate = 7;
 * @return {number}
 */
proto.nakama.niwrad.api.realtime.Experience.Map.prototype.getSpreadReductionRate = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.nakama.niwrad.api.realtime.Experience.Map.prototype.setSpreadReductionRate = function(value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional bool water = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.nakama.niwrad.api.realtime.Experience.Map.prototype.getWater = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.nakama.niwrad.api.realtime.Experience.Map.prototype.setWater = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional uint64 diversity = 10;
 * @return {number}
 */
proto.nakama.niwrad.api.realtime.Experience.Map.prototype.getDiversity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.nakama.niwrad.api.realtime.Experience.Map.prototype.setDiversity = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nakama.niwrad.api.realtime.Experience.GeneralParameters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nakama.niwrad.api.realtime.Experience.GeneralParameters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nakama.niwrad.api.realtime.Experience.GeneralParameters.displayName = 'proto.nakama.niwrad.api.realtime.Experience.GeneralParameters';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nakama.niwrad.api.realtime.Experience.GeneralParameters.prototype.toObject = function(opt_includeInstance) {
  return proto.nakama.niwrad.api.realtime.Experience.GeneralParameters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nakama.niwrad.api.realtime.Experience.GeneralParameters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Experience.GeneralParameters.toObject = function(includeInstance, msg) {
  var f, obj = {
    timescale: jspb.Message.getFieldWithDefault(msg, 1, 0),
    timeLimit: jspb.Message.getFieldWithDefault(msg, 2, 0),
    repeat: jspb.Message.getFieldWithDefault(msg, 3, false),
    saveStatistics: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nakama.niwrad.api.realtime.Experience.GeneralParameters}
 */
proto.nakama.niwrad.api.realtime.Experience.GeneralParameters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nakama.niwrad.api.realtime.Experience.GeneralParameters;
  return proto.nakama.niwrad.api.realtime.Experience.GeneralParameters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nakama.niwrad.api.realtime.Experience.GeneralParameters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nakama.niwrad.api.realtime.Experience.GeneralParameters}
 */
proto.nakama.niwrad.api.realtime.Experience.GeneralParameters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimescale(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimeLimit(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRepeat(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSaveStatistics(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nakama.niwrad.api.realtime.Experience.GeneralParameters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nakama.niwrad.api.realtime.Experience.GeneralParameters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nakama.niwrad.api.realtime.Experience.GeneralParameters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nakama.niwrad.api.realtime.Experience.GeneralParameters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimescale();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTimeLimit();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getRepeat();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getSaveStatistics();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional uint32 timescale = 1;
 * @return {number}
 */
proto.nakama.niwrad.api.realtime.Experience.GeneralParameters.prototype.getTimescale = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.nakama.niwrad.api.realtime.Experience.GeneralParameters.prototype.setTimescale = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 time_limit = 2;
 * @return {number}
 */
proto.nakama.niwrad.api.realtime.Experience.GeneralParameters.prototype.getTimeLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.nakama.niwrad.api.realtime.Experience.GeneralParameters.prototype.setTimeLimit = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool repeat = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.nakama.niwrad.api.realtime.Experience.GeneralParameters.prototype.getRepeat = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.nakama.niwrad.api.realtime.Experience.GeneralParameters.prototype.setRepeat = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool save_statistics = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.nakama.niwrad.api.realtime.Experience.GeneralParameters.prototype.getSaveStatistics = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.nakama.niwrad.api.realtime.Experience.GeneralParameters.prototype.setSaveStatistics = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.nakama.niwrad.api.realtime.Experience.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nakama.niwrad.api.realtime.Experience.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool include_carnivorous = 14;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.nakama.niwrad.api.realtime.Experience.prototype.getIncludeCarnivorous = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 14, false));
};


/** @param {boolean} value */
proto.nakama.niwrad.api.realtime.Experience.prototype.setIncludeCarnivorous = function(value) {
  jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional int32 carnivorous_percent = 15;
 * @return {number}
 */
proto.nakama.niwrad.api.realtime.Experience.prototype.getCarnivorousPercent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.nakama.niwrad.api.realtime.Experience.prototype.setCarnivorousPercent = function(value) {
  jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional Characteristics animal_characteristics = 10;
 * @return {?proto.nakama.niwrad.api.realtime.Characteristics}
 */
proto.nakama.niwrad.api.realtime.Experience.prototype.getAnimalCharacteristics = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Characteristics} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Characteristics, 10));
};


/** @param {?proto.nakama.niwrad.api.realtime.Characteristics|undefined} value */
proto.nakama.niwrad.api.realtime.Experience.prototype.setAnimalCharacteristics = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.nakama.niwrad.api.realtime.Experience.prototype.clearAnimalCharacteristics = function() {
  this.setAnimalCharacteristics(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nakama.niwrad.api.realtime.Experience.prototype.hasAnimalCharacteristics = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Characteristics animal_characteristics_minimum_bound = 11;
 * @return {?proto.nakama.niwrad.api.realtime.Characteristics}
 */
proto.nakama.niwrad.api.realtime.Experience.prototype.getAnimalCharacteristicsMinimumBound = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Characteristics} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Characteristics, 11));
};


/** @param {?proto.nakama.niwrad.api.realtime.Characteristics|undefined} value */
proto.nakama.niwrad.api.realtime.Experience.prototype.setAnimalCharacteristicsMinimumBound = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.nakama.niwrad.api.realtime.Experience.prototype.clearAnimalCharacteristicsMinimumBound = function() {
  this.setAnimalCharacteristicsMinimumBound(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nakama.niwrad.api.realtime.Experience.prototype.hasAnimalCharacteristicsMinimumBound = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Characteristics animal_characteristics_maximum_bound = 12;
 * @return {?proto.nakama.niwrad.api.realtime.Characteristics}
 */
proto.nakama.niwrad.api.realtime.Experience.prototype.getAnimalCharacteristicsMaximumBound = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Characteristics} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Characteristics, 12));
};


/** @param {?proto.nakama.niwrad.api.realtime.Characteristics|undefined} value */
proto.nakama.niwrad.api.realtime.Experience.prototype.setAnimalCharacteristicsMaximumBound = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.nakama.niwrad.api.realtime.Experience.prototype.clearAnimalCharacteristicsMaximumBound = function() {
  this.setAnimalCharacteristicsMaximumBound(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nakama.niwrad.api.realtime.Experience.prototype.hasAnimalCharacteristicsMaximumBound = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional PopulationDistribution animal_distribution = 13;
 * @return {?proto.nakama.niwrad.api.realtime.Experience.PopulationDistribution}
 */
proto.nakama.niwrad.api.realtime.Experience.prototype.getAnimalDistribution = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Experience.PopulationDistribution} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Experience.PopulationDistribution, 13));
};


/** @param {?proto.nakama.niwrad.api.realtime.Experience.PopulationDistribution|undefined} value */
proto.nakama.niwrad.api.realtime.Experience.prototype.setAnimalDistribution = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.nakama.niwrad.api.realtime.Experience.prototype.clearAnimalDistribution = function() {
  this.setAnimalDistribution(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nakama.niwrad.api.realtime.Experience.prototype.hasAnimalDistribution = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional Characteristics plant_characteristics = 40;
 * @return {?proto.nakama.niwrad.api.realtime.Characteristics}
 */
proto.nakama.niwrad.api.realtime.Experience.prototype.getPlantCharacteristics = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Characteristics} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Characteristics, 40));
};


/** @param {?proto.nakama.niwrad.api.realtime.Characteristics|undefined} value */
proto.nakama.niwrad.api.realtime.Experience.prototype.setPlantCharacteristics = function(value) {
  jspb.Message.setWrapperField(this, 40, value);
};


proto.nakama.niwrad.api.realtime.Experience.prototype.clearPlantCharacteristics = function() {
  this.setPlantCharacteristics(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nakama.niwrad.api.realtime.Experience.prototype.hasPlantCharacteristics = function() {
  return jspb.Message.getField(this, 40) != null;
};


/**
 * optional Characteristics plant_characteristics_minimum_bound = 41;
 * @return {?proto.nakama.niwrad.api.realtime.Characteristics}
 */
proto.nakama.niwrad.api.realtime.Experience.prototype.getPlantCharacteristicsMinimumBound = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Characteristics} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Characteristics, 41));
};


/** @param {?proto.nakama.niwrad.api.realtime.Characteristics|undefined} value */
proto.nakama.niwrad.api.realtime.Experience.prototype.setPlantCharacteristicsMinimumBound = function(value) {
  jspb.Message.setWrapperField(this, 41, value);
};


proto.nakama.niwrad.api.realtime.Experience.prototype.clearPlantCharacteristicsMinimumBound = function() {
  this.setPlantCharacteristicsMinimumBound(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nakama.niwrad.api.realtime.Experience.prototype.hasPlantCharacteristicsMinimumBound = function() {
  return jspb.Message.getField(this, 41) != null;
};


/**
 * optional Characteristics plant_characteristics_maximum_bound = 42;
 * @return {?proto.nakama.niwrad.api.realtime.Characteristics}
 */
proto.nakama.niwrad.api.realtime.Experience.prototype.getPlantCharacteristicsMaximumBound = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Characteristics} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Characteristics, 42));
};


/** @param {?proto.nakama.niwrad.api.realtime.Characteristics|undefined} value */
proto.nakama.niwrad.api.realtime.Experience.prototype.setPlantCharacteristicsMaximumBound = function(value) {
  jspb.Message.setWrapperField(this, 42, value);
};


proto.nakama.niwrad.api.realtime.Experience.prototype.clearPlantCharacteristicsMaximumBound = function() {
  this.setPlantCharacteristicsMaximumBound(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nakama.niwrad.api.realtime.Experience.prototype.hasPlantCharacteristicsMaximumBound = function() {
  return jspb.Message.getField(this, 42) != null;
};


/**
 * optional PopulationDistribution plant_distribution = 43;
 * @return {?proto.nakama.niwrad.api.realtime.Experience.PopulationDistribution}
 */
proto.nakama.niwrad.api.realtime.Experience.prototype.getPlantDistribution = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Experience.PopulationDistribution} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Experience.PopulationDistribution, 43));
};


/** @param {?proto.nakama.niwrad.api.realtime.Experience.PopulationDistribution|undefined} value */
proto.nakama.niwrad.api.realtime.Experience.prototype.setPlantDistribution = function(value) {
  jspb.Message.setWrapperField(this, 43, value);
};


proto.nakama.niwrad.api.realtime.Experience.prototype.clearPlantDistribution = function() {
  this.setPlantDistribution(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nakama.niwrad.api.realtime.Experience.prototype.hasPlantDistribution = function() {
  return jspb.Message.getField(this, 43) != null;
};


/**
 * optional Map map = 50;
 * @return {?proto.nakama.niwrad.api.realtime.Experience.Map}
 */
proto.nakama.niwrad.api.realtime.Experience.prototype.getMap = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Experience.Map} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Experience.Map, 50));
};


/** @param {?proto.nakama.niwrad.api.realtime.Experience.Map|undefined} value */
proto.nakama.niwrad.api.realtime.Experience.prototype.setMap = function(value) {
  jspb.Message.setWrapperField(this, 50, value);
};


proto.nakama.niwrad.api.realtime.Experience.prototype.clearMap = function() {
  this.setMap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nakama.niwrad.api.realtime.Experience.prototype.hasMap = function() {
  return jspb.Message.getField(this, 50) != null;
};


/**
 * optional GeneralParameters general = 60;
 * @return {?proto.nakama.niwrad.api.realtime.Experience.GeneralParameters}
 */
proto.nakama.niwrad.api.realtime.Experience.prototype.getGeneral = function() {
  return /** @type{?proto.nakama.niwrad.api.realtime.Experience.GeneralParameters} */ (
    jspb.Message.getWrapperField(this, proto.nakama.niwrad.api.realtime.Experience.GeneralParameters, 60));
};


/** @param {?proto.nakama.niwrad.api.realtime.Experience.GeneralParameters|undefined} value */
proto.nakama.niwrad.api.realtime.Experience.prototype.setGeneral = function(value) {
  jspb.Message.setWrapperField(this, 60, value);
};


proto.nakama.niwrad.api.realtime.Experience.prototype.clearGeneral = function() {
  this.setGeneral(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nakama.niwrad.api.realtime.Experience.prototype.hasGeneral = function() {
  return jspb.Message.getField(this, 60) != null;
};


goog.object.extend(exports, proto.nakama.niwrad.api.realtime);

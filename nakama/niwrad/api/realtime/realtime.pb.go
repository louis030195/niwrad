// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.6.1
// source: realtime.proto

package realtime

import (
	proto "github.com/golang/protobuf/proto"
	quaternion "github.com/louis030195/protometry/api/quaternion"
	vector3 "github.com/louis030195/protometry/api/vector3"
	volume "github.com/louis030195/protometry/api/volume"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// TODO: kind of ugly to use same struct for client -> server and server -> client ?
type Packet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: prob will have to switch to a box instead of vector3 later (want to notify before arrival ...)
	Impact *vector3.Vector3 `protobuf:"bytes,4,opt,name=impact,proto3" json:"impact,omitempty"` // Whom for ? Does xXxD4rkK1ll3rxXx care about the message 1 km away ?
	// Types that are assignable to Type:
	//	*Packet_MatchJoin
	//	*Packet_UpdateTransform
	//	*Packet_NavMeshUpdate
	//	*Packet_Spawn
	//	*Packet_RequestSpawn
	//	*Packet_Destroy
	//	*Packet_RequestDestroy
	//	*Packet_Meme
	//	*Packet_Initialized
	Type isPacket_Type `protobuf_oneof:"type"`
}

func (x *Packet) Reset() {
	*x = Packet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_realtime_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Packet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Packet) ProtoMessage() {}

func (x *Packet) ProtoReflect() protoreflect.Message {
	mi := &file_realtime_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Packet.ProtoReflect.Descriptor instead.
func (*Packet) Descriptor() ([]byte, []int) {
	return file_realtime_proto_rawDescGZIP(), []int{0}
}

func (x *Packet) GetImpact() *vector3.Vector3 {
	if x != nil {
		return x.Impact
	}
	return nil
}

func (m *Packet) GetType() isPacket_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Packet) GetMatchJoin() *MatchJoin {
	if x, ok := x.GetType().(*Packet_MatchJoin); ok {
		return x.MatchJoin
	}
	return nil
}

func (x *Packet) GetUpdateTransform() *UpdateTransform {
	if x, ok := x.GetType().(*Packet_UpdateTransform); ok {
		return x.UpdateTransform
	}
	return nil
}

func (x *Packet) GetNavMeshUpdate() *NavMeshUpdate {
	if x, ok := x.GetType().(*Packet_NavMeshUpdate); ok {
		return x.NavMeshUpdate
	}
	return nil
}

func (x *Packet) GetSpawn() *Spawn {
	if x, ok := x.GetType().(*Packet_Spawn); ok {
		return x.Spawn
	}
	return nil
}

func (x *Packet) GetRequestSpawn() *Spawn {
	if x, ok := x.GetType().(*Packet_RequestSpawn); ok {
		return x.RequestSpawn
	}
	return nil
}

func (x *Packet) GetDestroy() *Destroy {
	if x, ok := x.GetType().(*Packet_Destroy); ok {
		return x.Destroy
	}
	return nil
}

func (x *Packet) GetRequestDestroy() *Destroy {
	if x, ok := x.GetType().(*Packet_RequestDestroy); ok {
		return x.RequestDestroy
	}
	return nil
}

func (x *Packet) GetMeme() *Meme {
	if x, ok := x.GetType().(*Packet_Meme); ok {
		return x.Meme
	}
	return nil
}

func (x *Packet) GetInitialized() *Initialized {
	if x, ok := x.GetType().(*Packet_Initialized); ok {
		return x.Initialized
	}
	return nil
}

type isPacket_Type interface {
	isPacket_Type()
}

type Packet_MatchJoin struct {
	// Events
	MatchJoin *MatchJoin `protobuf:"bytes,7,opt,name=match_join,json=matchJoin,proto3,oneof"` // Map map = 8;
}

type Packet_UpdateTransform struct {
	// General physical objects
	UpdateTransform *UpdateTransform `protobuf:"bytes,10,opt,name=update_transform,json=updateTransform,proto3,oneof"`
}

type Packet_NavMeshUpdate struct {
	NavMeshUpdate *NavMeshUpdate `protobuf:"bytes,11,opt,name=nav_mesh_update,json=navMeshUpdate,proto3,oneof"`
}

type Packet_Spawn struct {
	// Evolution
	Spawn *Spawn `protobuf:"bytes,15,opt,name=spawn,proto3,oneof"`
}

type Packet_RequestSpawn struct {
	RequestSpawn *Spawn `protobuf:"bytes,16,opt,name=request_spawn,json=requestSpawn,proto3,oneof"`
}

type Packet_Destroy struct {
	Destroy *Destroy `protobuf:"bytes,17,opt,name=destroy,proto3,oneof"`
}

type Packet_RequestDestroy struct {
	RequestDestroy *Destroy `protobuf:"bytes,18,opt,name=request_destroy,json=requestDestroy,proto3,oneof"`
}

type Packet_Meme struct {
	Meme *Meme `protobuf:"bytes,19,opt,name=meme,proto3,oneof"`
}

type Packet_Initialized struct {
	// Player
	Initialized *Initialized `protobuf:"bytes,25,opt,name=initialized,proto3,oneof"`
}

func (*Packet_MatchJoin) isPacket_Type() {}

func (*Packet_UpdateTransform) isPacket_Type() {}

func (*Packet_NavMeshUpdate) isPacket_Type() {}

func (*Packet_Spawn) isPacket_Type() {}

func (*Packet_RequestSpawn) isPacket_Type() {}

func (*Packet_Destroy) isPacket_Type() {}

func (*Packet_RequestDestroy) isPacket_Type() {}

func (*Packet_Meme) isPacket_Type() {}

func (*Packet_Initialized) isPacket_Type() {}

type MatchJoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region *volume.Box `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	Seed   int64       `protobuf:"varint,2,opt,name=seed,proto3" json:"seed,omitempty"`
}

func (x *MatchJoin) Reset() {
	*x = MatchJoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_realtime_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchJoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchJoin) ProtoMessage() {}

func (x *MatchJoin) ProtoReflect() protoreflect.Message {
	mi := &file_realtime_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchJoin.ProtoReflect.Descriptor instead.
func (*MatchJoin) Descriptor() ([]byte, []int) {
	return file_realtime_proto_rawDescGZIP(), []int{1}
}

func (x *MatchJoin) GetRegion() *volume.Box {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *MatchJoin) GetSeed() int64 {
	if x != nil {
		return x.Seed
	}
	return 0
}

// General purpose transform update typically shared by several different types of objects
type UpdateTransform struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transform *Transform `protobuf:"bytes,1,opt,name=transform,proto3" json:"transform,omitempty"`
}

func (x *UpdateTransform) Reset() {
	*x = UpdateTransform{}
	if protoimpl.UnsafeEnabled {
		mi := &file_realtime_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTransform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTransform) ProtoMessage() {}

func (x *UpdateTransform) ProtoReflect() protoreflect.Message {
	mi := &file_realtime_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTransform.ProtoReflect.Descriptor instead.
func (*UpdateTransform) Descriptor() ([]byte, []int) {
	return file_realtime_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateTransform) GetTransform() *Transform {
	if x != nil {
		return x.Transform
	}
	return nil
}

type NavMeshUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Destination *vector3.Vector3 `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (x *NavMeshUpdate) Reset() {
	*x = NavMeshUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_realtime_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavMeshUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavMeshUpdate) ProtoMessage() {}

func (x *NavMeshUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_realtime_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavMeshUpdate.ProtoReflect.Descriptor instead.
func (*NavMeshUpdate) Descriptor() ([]byte, []int) {
	return file_realtime_proto_rawDescGZIP(), []int{3}
}

func (x *NavMeshUpdate) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NavMeshUpdate) GetDestination() *vector3.Vector3 {
	if x != nil {
		return x.Destination
	}
	return nil
}

type Spawn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*Spawn_Any
	//	*Spawn_Plant
	//	*Spawn_Animal
	Type isSpawn_Type `protobuf_oneof:"type"`
}

func (x *Spawn) Reset() {
	*x = Spawn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_realtime_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Spawn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spawn) ProtoMessage() {}

func (x *Spawn) ProtoReflect() protoreflect.Message {
	mi := &file_realtime_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spawn.ProtoReflect.Descriptor instead.
func (*Spawn) Descriptor() ([]byte, []int) {
	return file_realtime_proto_rawDescGZIP(), []int{4}
}

func (m *Spawn) GetType() isSpawn_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Spawn) GetAny() *Transform {
	if x, ok := x.GetType().(*Spawn_Any); ok {
		return x.Any
	}
	return nil
}

func (x *Spawn) GetPlant() *Plant {
	if x, ok := x.GetType().(*Spawn_Plant); ok {
		return x.Plant
	}
	return nil
}

func (x *Spawn) GetAnimal() *Animal {
	if x, ok := x.GetType().(*Spawn_Animal); ok {
		return x.Animal
	}
	return nil
}

type isSpawn_Type interface {
	isSpawn_Type()
}

type Spawn_Any struct {
	Any *Transform `protobuf:"bytes,1,opt,name=any,proto3,oneof"` // Any object, no special behaviour
}

type Spawn_Plant struct {
	Plant *Plant `protobuf:"bytes,2,opt,name=plant,proto3,oneof"`
}

type Spawn_Animal struct {
	Animal *Animal `protobuf:"bytes,3,opt,name=animal,proto3,oneof"` // TODO: other ?
}

func (*Spawn_Any) isSpawn_Type() {}

func (*Spawn_Plant) isSpawn_Type() {}

func (*Spawn_Animal) isSpawn_Type() {}

type Destroy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*Destroy_Any
	//	*Destroy_Plant
	//	*Destroy_Animal
	Type isDestroy_Type `protobuf_oneof:"type"`
}

func (x *Destroy) Reset() {
	*x = Destroy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_realtime_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Destroy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Destroy) ProtoMessage() {}

func (x *Destroy) ProtoReflect() protoreflect.Message {
	mi := &file_realtime_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Destroy.ProtoReflect.Descriptor instead.
func (*Destroy) Descriptor() ([]byte, []int) {
	return file_realtime_proto_rawDescGZIP(), []int{5}
}

func (m *Destroy) GetType() isDestroy_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Destroy) GetAny() *Transform {
	if x, ok := x.GetType().(*Destroy_Any); ok {
		return x.Any
	}
	return nil
}

func (x *Destroy) GetPlant() *Plant {
	if x, ok := x.GetType().(*Destroy_Plant); ok {
		return x.Plant
	}
	return nil
}

func (x *Destroy) GetAnimal() *Animal {
	if x, ok := x.GetType().(*Destroy_Animal); ok {
		return x.Animal
	}
	return nil
}

type isDestroy_Type interface {
	isDestroy_Type()
}

type Destroy_Any struct {
	Any *Transform `protobuf:"bytes,1,opt,name=any,proto3,oneof"` // Any object, no special behaviour
}

type Destroy_Plant struct {
	Plant *Plant `protobuf:"bytes,2,opt,name=plant,proto3,oneof"`
}

type Destroy_Animal struct {
	Animal *Animal `protobuf:"bytes,3,opt,name=animal,proto3,oneof"` // TODO: other ?
}

func (*Destroy_Any) isDestroy_Type() {}

func (*Destroy_Plant) isDestroy_Type() {}

func (*Destroy_Animal) isDestroy_Type() {}

type Meme struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MemeName string `protobuf:"bytes,2,opt,name=meme_name,json=memeName,proto3" json:"meme_name,omitempty"` // Not really efficient but ok
}

func (x *Meme) Reset() {
	*x = Meme{}
	if protoimpl.UnsafeEnabled {
		mi := &file_realtime_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meme) ProtoMessage() {}

func (x *Meme) ProtoReflect() protoreflect.Message {
	mi := &file_realtime_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meme.ProtoReflect.Descriptor instead.
func (*Meme) Descriptor() ([]byte, []int) {
	return file_realtime_proto_rawDescGZIP(), []int{6}
}

func (x *Meme) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Meme) GetMemeName() string {
	if x != nil {
		return x.MemeName
	}
	return ""
}

// Client notifying being ready to handle gameplay
type Initialized struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Initialized) Reset() {
	*x = Initialized{}
	if protoimpl.UnsafeEnabled {
		mi := &file_realtime_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Initialized) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Initialized) ProtoMessage() {}

func (x *Initialized) ProtoReflect() protoreflect.Message {
	mi := &file_realtime_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Initialized.ProtoReflect.Descriptor instead.
func (*Initialized) Descriptor() ([]byte, []int) {
	return file_realtime_proto_rawDescGZIP(), []int{7}
}

type Transform struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Position *vector3.Vector3       `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	Rotation *quaternion.Quaternion `protobuf:"bytes,3,opt,name=rotation,proto3" json:"rotation,omitempty"`
}

func (x *Transform) Reset() {
	*x = Transform{}
	if protoimpl.UnsafeEnabled {
		mi := &file_realtime_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transform) ProtoMessage() {}

func (x *Transform) ProtoReflect() protoreflect.Message {
	mi := &file_realtime_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transform.ProtoReflect.Descriptor instead.
func (*Transform) Descriptor() ([]byte, []int) {
	return file_realtime_proto_rawDescGZIP(), []int{8}
}

func (x *Transform) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Transform) GetPosition() *vector3.Vector3 {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *Transform) GetRotation() *quaternion.Quaternion {
	if x != nil {
		return x.Rotation
	}
	return nil
}

type Plant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transform *Transform `protobuf:"bytes,1,opt,name=transform,proto3" json:"transform,omitempty"` // TODO: other stats
}

func (x *Plant) Reset() {
	*x = Plant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_realtime_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Plant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plant) ProtoMessage() {}

func (x *Plant) ProtoReflect() protoreflect.Message {
	mi := &file_realtime_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plant.ProtoReflect.Descriptor instead.
func (*Plant) Descriptor() ([]byte, []int) {
	return file_realtime_proto_rawDescGZIP(), []int{9}
}

func (x *Plant) GetTransform() *Transform {
	if x != nil {
		return x.Transform
	}
	return nil
}

type Animal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transform *Transform `protobuf:"bytes,1,opt,name=transform,proto3" json:"transform,omitempty"` // TODO: other stats
}

func (x *Animal) Reset() {
	*x = Animal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_realtime_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Animal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Animal) ProtoMessage() {}

func (x *Animal) ProtoReflect() protoreflect.Message {
	mi := &file_realtime_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Animal.ProtoReflect.Descriptor instead.
func (*Animal) Descriptor() ([]byte, []int) {
	return file_realtime_proto_rawDescGZIP(), []int{10}
}

func (x *Animal) GetTransform() *Transform {
	if x != nil {
		return x.Transform
	}
	return nil
}

// Ask a logic server to transfer ownership of an object
type RequestTransferOwnership struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transform *Transform `protobuf:"bytes,1,opt,name=transform,proto3" json:"transform,omitempty"`
}

func (x *RequestTransferOwnership) Reset() {
	*x = RequestTransferOwnership{}
	if protoimpl.UnsafeEnabled {
		mi := &file_realtime_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestTransferOwnership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestTransferOwnership) ProtoMessage() {}

func (x *RequestTransferOwnership) ProtoReflect() protoreflect.Message {
	mi := &file_realtime_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestTransferOwnership.ProtoReflect.Descriptor instead.
func (*RequestTransferOwnership) Descriptor() ([]byte, []int) {
	return file_realtime_proto_rawDescGZIP(), []int{11}
}

func (x *RequestTransferOwnership) GetTransform() *Transform {
	if x != nil {
		return x.Transform
	}
	return nil
}

// Real time characteristics of a living being
type Characteristics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Computation             float32 `protobuf:"fixed32,1,opt,name=computation,proto3" json:"computation,omitempty"`                                       // E.g. more = more decisions, less delay, more reactive ...
	Life                    float32 `protobuf:"fixed32,2,opt,name=life,proto3" json:"life,omitempty"`                                                     // 0 = dead, highly related to energy
	Robustness              float32 `protobuf:"fixed32,3,opt,name=robustness,proto3" json:"robustness,omitempty"`                                         // ? Resistance, anti fragility ?
	Energy                  float32 `protobuf:"fixed32,4,opt,name=energy,proto3" json:"energy,omitempty"`                                                 // Current energy
	ReproductionCost        float32 `protobuf:"fixed32,5,opt,name=reproduction_cost,json=reproductionCost,proto3" json:"reproduction_cost,omitempty"`     // Cost in energy
	EnergyLoss              float32 `protobuf:"fixed32,6,opt,name=energy_loss,json=energyLoss,proto3" json:"energy_loss,omitempty"`                       // Cost in energy
	EatEnergyGain           float32 `protobuf:"fixed32,7,opt,name=eat_energy_gain,json=eatEnergyGain,proto3" json:"eat_energy_gain,omitempty"`            // TODO: do plants eat ? fed from sun ?
	DrinkEnergyGain         float32 `protobuf:"fixed32,8,opt,name=drink_energy_gain,json=drinkEnergyGain,proto3" json:"drink_energy_gain,omitempty"`      // TODO: lot of hard coded stuff can we do better ?
	Carnivorous             bool    `protobuf:"varint,9,opt,name=carnivorous,proto3" json:"carnivorous,omitempty"`                                        // Both plant and animals can be carnivorous
	ReproductionDelay       float32 `protobuf:"fixed32,10,opt,name=reproduction_delay,json=reproductionDelay,proto3" json:"reproduction_delay,omitempty"` // Hardcoded delay
	ReproductionProbability float32 `protobuf:"fixed32,11,opt,name=reproduction_probability,json=reproductionProbability,proto3" json:"reproduction_probability,omitempty"`
	// Types that are assignable to Type:
	//	*Characteristics_AnimalCharacteristics_
	//	*Characteristics_PlantCharacteristics_
	Type isCharacteristics_Type `protobuf_oneof:"type"`
}

func (x *Characteristics) Reset() {
	*x = Characteristics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_realtime_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Characteristics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Characteristics) ProtoMessage() {}

func (x *Characteristics) ProtoReflect() protoreflect.Message {
	mi := &file_realtime_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Characteristics.ProtoReflect.Descriptor instead.
func (*Characteristics) Descriptor() ([]byte, []int) {
	return file_realtime_proto_rawDescGZIP(), []int{12}
}

func (x *Characteristics) GetComputation() float32 {
	if x != nil {
		return x.Computation
	}
	return 0
}

func (x *Characteristics) GetLife() float32 {
	if x != nil {
		return x.Life
	}
	return 0
}

func (x *Characteristics) GetRobustness() float32 {
	if x != nil {
		return x.Robustness
	}
	return 0
}

func (x *Characteristics) GetEnergy() float32 {
	if x != nil {
		return x.Energy
	}
	return 0
}

func (x *Characteristics) GetReproductionCost() float32 {
	if x != nil {
		return x.ReproductionCost
	}
	return 0
}

func (x *Characteristics) GetEnergyLoss() float32 {
	if x != nil {
		return x.EnergyLoss
	}
	return 0
}

func (x *Characteristics) GetEatEnergyGain() float32 {
	if x != nil {
		return x.EatEnergyGain
	}
	return 0
}

func (x *Characteristics) GetDrinkEnergyGain() float32 {
	if x != nil {
		return x.DrinkEnergyGain
	}
	return 0
}

func (x *Characteristics) GetCarnivorous() bool {
	if x != nil {
		return x.Carnivorous
	}
	return false
}

func (x *Characteristics) GetReproductionDelay() float32 {
	if x != nil {
		return x.ReproductionDelay
	}
	return 0
}

func (x *Characteristics) GetReproductionProbability() float32 {
	if x != nil {
		return x.ReproductionProbability
	}
	return 0
}

func (m *Characteristics) GetType() isCharacteristics_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Characteristics) GetAnimalCharacteristics() *Characteristics_AnimalCharacteristics {
	if x, ok := x.GetType().(*Characteristics_AnimalCharacteristics_); ok {
		return x.AnimalCharacteristics
	}
	return nil
}

func (x *Characteristics) GetPlantCharacteristics() *Characteristics_PlantCharacteristics {
	if x, ok := x.GetType().(*Characteristics_PlantCharacteristics_); ok {
		return x.PlantCharacteristics
	}
	return nil
}

type isCharacteristics_Type interface {
	isCharacteristics_Type()
}

type Characteristics_AnimalCharacteristics_ struct {
	AnimalCharacteristics *Characteristics_AnimalCharacteristics `protobuf:"bytes,15,opt,name=animal_characteristics,json=animalCharacteristics,proto3,oneof"`
}

type Characteristics_PlantCharacteristics_ struct {
	PlantCharacteristics *Characteristics_PlantCharacteristics `protobuf:"bytes,16,opt,name=plant_characteristics,json=plantCharacteristics,proto3,oneof"`
}

func (*Characteristics_AnimalCharacteristics_) isCharacteristics_Type() {}

func (*Characteristics_PlantCharacteristics_) isCharacteristics_Type() {}

// TODO: instead of this, what about building a (binary ? tree type depend on reproduction type) tree, idk if that can scale
// so this is like a prometheus thing ? idk ..
type ExperienceSample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Discrete
	Animals int64 `protobuf:"varint,50,opt,name=animals,proto3" json:"animals,omitempty"`
	Plants  int64 `protobuf:"varint,60,opt,name=plants,proto3" json:"plants,omitempty"`
	// Computed, maybe variance no brain at first
	AnimalAge             float64          `protobuf:"fixed64,70,opt,name=animal_age,json=animalAge,proto3" json:"animal_age,omitempty"`
	AnimalCharacteristics *Characteristics `protobuf:"bytes,10,opt,name=animal_characteristics,json=animalCharacteristics,proto3" json:"animal_characteristics,omitempty"`
	PlantAge              float64          `protobuf:"fixed64,90,opt,name=plant_age,json=plantAge,proto3" json:"plant_age,omitempty"`
	PlantCharacteristics  *Characteristics `protobuf:"bytes,40,opt,name=plant_characteristics,json=plantCharacteristics,proto3" json:"plant_characteristics,omitempty"`
}

func (x *ExperienceSample) Reset() {
	*x = ExperienceSample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_realtime_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExperienceSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExperienceSample) ProtoMessage() {}

func (x *ExperienceSample) ProtoReflect() protoreflect.Message {
	mi := &file_realtime_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExperienceSample.ProtoReflect.Descriptor instead.
func (*ExperienceSample) Descriptor() ([]byte, []int) {
	return file_realtime_proto_rawDescGZIP(), []int{13}
}

func (x *ExperienceSample) GetAnimals() int64 {
	if x != nil {
		return x.Animals
	}
	return 0
}

func (x *ExperienceSample) GetPlants() int64 {
	if x != nil {
		return x.Plants
	}
	return 0
}

func (x *ExperienceSample) GetAnimalAge() float64 {
	if x != nil {
		return x.AnimalAge
	}
	return 0
}

func (x *ExperienceSample) GetAnimalCharacteristics() *Characteristics {
	if x != nil {
		return x.AnimalCharacteristics
	}
	return nil
}

func (x *ExperienceSample) GetPlantAge() float64 {
	if x != nil {
		return x.PlantAge
	}
	return 0
}

func (x *ExperienceSample) GetPlantCharacteristics() *Characteristics {
	if x != nil {
		return x.PlantCharacteristics
	}
	return nil
}

type Experience struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                              string                             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IncludeCarnivorous                bool                               `protobuf:"varint,14,opt,name=include_carnivorous,json=includeCarnivorous,proto3" json:"include_carnivorous,omitempty"`
	CarnivorousPercent                int32                              `protobuf:"varint,15,opt,name=carnivorous_percent,json=carnivorousPercent,proto3" json:"carnivorous_percent,omitempty"`
	AnimalCharacteristics             *Characteristics                   `protobuf:"bytes,10,opt,name=animal_characteristics,json=animalCharacteristics,proto3" json:"animal_characteristics,omitempty"`
	AnimalCharacteristicsMinimumBound *Characteristics                   `protobuf:"bytes,11,opt,name=animal_characteristics_minimum_bound,json=animalCharacteristicsMinimumBound,proto3" json:"animal_characteristics_minimum_bound,omitempty"` // E.g. for example speed is bounded between 0 and 100 to keep balance
	AnimalCharacteristicsMaximumBound *Characteristics                   `protobuf:"bytes,12,opt,name=animal_characteristics_maximum_bound,json=animalCharacteristicsMaximumBound,proto3" json:"animal_characteristics_maximum_bound,omitempty"`
	AnimalDistribution                *Experience_PopulationDistribution `protobuf:"bytes,13,opt,name=animal_distribution,json=animalDistribution,proto3" json:"animal_distribution,omitempty"`
	PlantCharacteristics              *Characteristics                   `protobuf:"bytes,40,opt,name=plant_characteristics,json=plantCharacteristics,proto3" json:"plant_characteristics,omitempty"`
	PlantCharacteristicsMinimumBound  *Characteristics                   `protobuf:"bytes,41,opt,name=plant_characteristics_minimum_bound,json=plantCharacteristicsMinimumBound,proto3" json:"plant_characteristics_minimum_bound,omitempty"`
	PlantCharacteristicsMaximumBound  *Characteristics                   `protobuf:"bytes,42,opt,name=plant_characteristics_maximum_bound,json=plantCharacteristicsMaximumBound,proto3" json:"plant_characteristics_maximum_bound,omitempty"`
	PlantDistribution                 *Experience_PopulationDistribution `protobuf:"bytes,43,opt,name=plant_distribution,json=plantDistribution,proto3" json:"plant_distribution,omitempty"`
	Map                               *Experience_Map                    `protobuf:"bytes,50,opt,name=map,proto3" json:"map,omitempty"`
	General                           *Experience_GeneralParameters      `protobuf:"bytes,60,opt,name=general,proto3" json:"general,omitempty"` // TODO: why general object ?
}

func (x *Experience) Reset() {
	*x = Experience{}
	if protoimpl.UnsafeEnabled {
		mi := &file_realtime_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Experience) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Experience) ProtoMessage() {}

func (x *Experience) ProtoReflect() protoreflect.Message {
	mi := &file_realtime_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Experience.ProtoReflect.Descriptor instead.
func (*Experience) Descriptor() ([]byte, []int) {
	return file_realtime_proto_rawDescGZIP(), []int{14}
}

func (x *Experience) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Experience) GetIncludeCarnivorous() bool {
	if x != nil {
		return x.IncludeCarnivorous
	}
	return false
}

func (x *Experience) GetCarnivorousPercent() int32 {
	if x != nil {
		return x.CarnivorousPercent
	}
	return 0
}

func (x *Experience) GetAnimalCharacteristics() *Characteristics {
	if x != nil {
		return x.AnimalCharacteristics
	}
	return nil
}

func (x *Experience) GetAnimalCharacteristicsMinimumBound() *Characteristics {
	if x != nil {
		return x.AnimalCharacteristicsMinimumBound
	}
	return nil
}

func (x *Experience) GetAnimalCharacteristicsMaximumBound() *Characteristics {
	if x != nil {
		return x.AnimalCharacteristicsMaximumBound
	}
	return nil
}

func (x *Experience) GetAnimalDistribution() *Experience_PopulationDistribution {
	if x != nil {
		return x.AnimalDistribution
	}
	return nil
}

func (x *Experience) GetPlantCharacteristics() *Characteristics {
	if x != nil {
		return x.PlantCharacteristics
	}
	return nil
}

func (x *Experience) GetPlantCharacteristicsMinimumBound() *Characteristics {
	if x != nil {
		return x.PlantCharacteristicsMinimumBound
	}
	return nil
}

func (x *Experience) GetPlantCharacteristicsMaximumBound() *Characteristics {
	if x != nil {
		return x.PlantCharacteristicsMaximumBound
	}
	return nil
}

func (x *Experience) GetPlantDistribution() *Experience_PopulationDistribution {
	if x != nil {
		return x.PlantDistribution
	}
	return nil
}

func (x *Experience) GetMap() *Experience_Map {
	if x != nil {
		return x.Map
	}
	return nil
}

func (x *Experience) GetGeneral() *Experience_GeneralParameters {
	if x != nil {
		return x.General
	}
	return nil
}

type Characteristics_AnimalCharacteristics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Speed               float32 `protobuf:"fixed32,1,opt,name=speed,proto3" json:"speed,omitempty"`
	RandomMovementRange float32 `protobuf:"fixed32,2,opt,name=random_movement_range,json=randomMovementRange,proto3" json:"random_movement_range,omitempty"` // these are very hard coded chars ?
	SightRange          float32 `protobuf:"fixed32,3,opt,name=sight_range,json=sightRange,proto3" json:"sight_range,omitempty"`
	EatRange            float32 `protobuf:"fixed32,4,opt,name=eat_range,json=eatRange,proto3" json:"eat_range,omitempty"`
	Metabolism          float32 `protobuf:"fixed32,5,opt,name=metabolism,proto3" json:"metabolism,omitempty"`
}

func (x *Characteristics_AnimalCharacteristics) Reset() {
	*x = Characteristics_AnimalCharacteristics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_realtime_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Characteristics_AnimalCharacteristics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Characteristics_AnimalCharacteristics) ProtoMessage() {}

func (x *Characteristics_AnimalCharacteristics) ProtoReflect() protoreflect.Message {
	mi := &file_realtime_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Characteristics_AnimalCharacteristics.ProtoReflect.Descriptor instead.
func (*Characteristics_AnimalCharacteristics) Descriptor() ([]byte, []int) {
	return file_realtime_proto_rawDescGZIP(), []int{12, 0}
}

func (x *Characteristics_AnimalCharacteristics) GetSpeed() float32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *Characteristics_AnimalCharacteristics) GetRandomMovementRange() float32 {
	if x != nil {
		return x.RandomMovementRange
	}
	return 0
}

func (x *Characteristics_AnimalCharacteristics) GetSightRange() float32 {
	if x != nil {
		return x.SightRange
	}
	return 0
}

func (x *Characteristics_AnimalCharacteristics) GetEatRange() float32 {
	if x != nil {
		return x.EatRange
	}
	return 0
}

func (x *Characteristics_AnimalCharacteristics) GetMetabolism() float32 {
	if x != nil {
		return x.Metabolism
	}
	return 0
}

type Characteristics_PlantCharacteristics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Characteristics_PlantCharacteristics) Reset() {
	*x = Characteristics_PlantCharacteristics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_realtime_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Characteristics_PlantCharacteristics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Characteristics_PlantCharacteristics) ProtoMessage() {}

func (x *Characteristics_PlantCharacteristics) ProtoReflect() protoreflect.Message {
	mi := &file_realtime_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Characteristics_PlantCharacteristics.ProtoReflect.Descriptor instead.
func (*Characteristics_PlantCharacteristics) Descriptor() ([]byte, []int) {
	return file_realtime_proto_rawDescGZIP(), []int{12, 1}
}

// How should we spawn individuals, tons grouped on a specific point or very scattered ... ?
type Experience_PopulationDistribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitialAmount uint64  `protobuf:"varint,1,opt,name=initial_amount,json=initialAmount,proto3" json:"initial_amount,omitempty"`
	Scattering    float32 `protobuf:"fixed32,2,opt,name=scattering,proto3" json:"scattering,omitempty"` // How close individuals are from each other at spawn
}

func (x *Experience_PopulationDistribution) Reset() {
	*x = Experience_PopulationDistribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_realtime_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Experience_PopulationDistribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Experience_PopulationDistribution) ProtoMessage() {}

func (x *Experience_PopulationDistribution) ProtoReflect() protoreflect.Message {
	mi := &file_realtime_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Experience_PopulationDistribution.ProtoReflect.Descriptor instead.
func (*Experience_PopulationDistribution) Descriptor() ([]byte, []int) {
	return file_realtime_proto_rawDescGZIP(), []int{14, 0}
}

func (x *Experience_PopulationDistribution) GetInitialAmount() uint64 {
	if x != nil {
		return x.InitialAmount
	}
	return 0
}

func (x *Experience_PopulationDistribution) GetScattering() float32 {
	if x != nil {
		return x.Scattering
	}
	return 0
}

// Initial proc gen traits
type Experience_Map struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size                float64 `protobuf:"fixed64,1,opt,name=size,proto3" json:"size,omitempty"`
	Height              float64 `protobuf:"fixed64,2,opt,name=height,proto3" json:"height,omitempty"`
	Spread              float64 `protobuf:"fixed64,5,opt,name=spread,proto3" json:"spread,omitempty"`
	SpreadReductionRate float64 `protobuf:"fixed64,7,opt,name=spread_reduction_rate,json=spreadReductionRate,proto3" json:"spread_reduction_rate,omitempty"`
	Water               bool    `protobuf:"varint,8,opt,name=water,proto3" json:"water,omitempty"`
	Diversity           uint64  `protobuf:"varint,10,opt,name=diversity,proto3" json:"diversity,omitempty"` // linear scale: desert, mountains ...
}

func (x *Experience_Map) Reset() {
	*x = Experience_Map{}
	if protoimpl.UnsafeEnabled {
		mi := &file_realtime_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Experience_Map) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Experience_Map) ProtoMessage() {}

func (x *Experience_Map) ProtoReflect() protoreflect.Message {
	mi := &file_realtime_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Experience_Map.ProtoReflect.Descriptor instead.
func (*Experience_Map) Descriptor() ([]byte, []int) {
	return file_realtime_proto_rawDescGZIP(), []int{14, 1}
}

func (x *Experience_Map) GetSize() float64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Experience_Map) GetHeight() float64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Experience_Map) GetSpread() float64 {
	if x != nil {
		return x.Spread
	}
	return 0
}

func (x *Experience_Map) GetSpreadReductionRate() float64 {
	if x != nil {
		return x.SpreadReductionRate
	}
	return 0
}

func (x *Experience_Map) GetWater() bool {
	if x != nil {
		return x.Water
	}
	return false
}

func (x *Experience_Map) GetDiversity() uint64 {
	if x != nil {
		return x.Diversity
	}
	return 0
}

type Experience_GeneralParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timescale      uint32 `protobuf:"varint,1,opt,name=timescale,proto3" json:"timescale,omitempty"`
	TimeLimit      uint32 `protobuf:"varint,2,opt,name=time_limit,json=timeLimit,proto3" json:"time_limit,omitempty"`                // Stop experience after x time
	Repeat         bool   `protobuf:"varint,3,opt,name=repeat,proto3" json:"repeat,omitempty"`                                       // Repeat experience ?
	SaveStatistics bool   `protobuf:"varint,4,opt,name=save_statistics,json=saveStatistics,proto3" json:"save_statistics,omitempty"` // [Regularly] save characteristics statistics ?
}

func (x *Experience_GeneralParameters) Reset() {
	*x = Experience_GeneralParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_realtime_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Experience_GeneralParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Experience_GeneralParameters) ProtoMessage() {}

func (x *Experience_GeneralParameters) ProtoReflect() protoreflect.Message {
	mi := &file_realtime_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Experience_GeneralParameters.ProtoReflect.Descriptor instead.
func (*Experience_GeneralParameters) Descriptor() ([]byte, []int) {
	return file_realtime_proto_rawDescGZIP(), []int{14, 2}
}

func (x *Experience_GeneralParameters) GetTimescale() uint32 {
	if x != nil {
		return x.Timescale
	}
	return 0
}

func (x *Experience_GeneralParameters) GetTimeLimit() uint32 {
	if x != nil {
		return x.TimeLimit
	}
	return 0
}

func (x *Experience_GeneralParameters) GetRepeat() bool {
	if x != nil {
		return x.Repeat
	}
	return false
}

func (x *Experience_GeneralParameters) GetSaveStatistics() bool {
	if x != nil {
		return x.SaveStatistics
	}
	return false
}

var File_realtime_proto protoreflect.FileDescriptor

var file_realtime_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1a, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x6e, 0x69, 0x77, 0x72, 0x61, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0x3b, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x6f, 0x75, 0x69, 0x73, 0x30, 0x33,
	0x30, 0x31, 0x39, 0x35, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x2f, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x6f, 0x75, 0x69, 0x73, 0x30, 0x33, 0x30, 0x31, 0x39,
	0x35, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x71, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x75, 0x61, 0x74,
	0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x39, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x6f, 0x75, 0x69, 0x73, 0x30, 0x33,
	0x30, 0x31, 0x39, 0x35, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd7, 0x05, 0x0a, 0x06, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x52,
	0x06, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x46, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x61,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x6e, 0x69, 0x77, 0x72, 0x61, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f,
	0x69, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x69, 0x6e, 0x12,
	0x58, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x61, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x6e, 0x69, 0x77, 0x72, 0x61, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65,
	0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x48, 0x00, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x53, 0x0a, 0x0f, 0x6e, 0x61, 0x76,
	0x5f, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x6e, 0x69, 0x77, 0x72,
	0x61, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x4e, 0x61, 0x76, 0x4d, 0x65, 0x73, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x0d, 0x6e, 0x61, 0x76, 0x4d, 0x65, 0x73, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x39,
	0x0a, 0x05, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x6e, 0x69, 0x77, 0x72, 0x61, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x53, 0x70, 0x61, 0x77, 0x6e,
	0x48, 0x00, 0x52, 0x05, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x12, 0x48, 0x0a, 0x0d, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x6e, 0x69, 0x77, 0x72, 0x61, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x53, 0x70,
	0x61, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x70,
	0x61, 0x77, 0x6e, 0x12, 0x3f, 0x0a, 0x07, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x6e, 0x69,
	0x77, 0x72, 0x61, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x12, 0x4e, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x6e, 0x69, 0x77, 0x72, 0x61, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x12, 0x36, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x6e, 0x69, 0x77, 0x72,
	0x61, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x4d, 0x65, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x0b,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x6e, 0x69, 0x77, 0x72, 0x61,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x4f, 0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x2e,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x2e, 0x42, 0x6f, 0x78, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x65,
	0x65, 0x64, 0x22, 0x56, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x43, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d,
	0x61, 0x2e, 0x6e, 0x69, 0x77, 0x72, 0x61, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x61,
	0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x5e, 0x0a, 0x0d, 0x4e, 0x61,
	0x76, 0x4d, 0x65, 0x73, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x33, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc3, 0x01, 0x0a, 0x05, 0x53,
	0x70, 0x61, 0x77, 0x6e, 0x12, 0x39, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x6e, 0x69, 0x77, 0x72, 0x61,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x12,
	0x39, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x6e, 0x69, 0x77, 0x72, 0x61, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x61, 0x6e,
	0x69, 0x6d, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x61, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x6e, 0x69, 0x77, 0x72, 0x61, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72,
	0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00,
	0x52, 0x06, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0xc5, 0x01, 0x0a, 0x07, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x39, 0x0a, 0x03,
	0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x61, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x6e, 0x69, 0x77, 0x72, 0x61, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65,
	0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x48, 0x00, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x6e, 0x69, 0x77, 0x72, 0x61, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x6e, 0x69, 0x77, 0x72,
	0x61, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x06, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c,
	0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x33, 0x0a, 0x04, 0x4d, 0x65, 0x6d, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x0d, 0x0a,
	0x0b, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x22, 0x93, 0x01, 0x0a,
	0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x33, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2e, 0x71, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75,
	0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x4c, 0x0a, 0x05, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x09, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x6e, 0x69, 0x77, 0x72, 0x61, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x22, 0x4d, 0x0a, 0x06, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x43, 0x0a, 0x09, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x6e, 0x69, 0x77, 0x72, 0x61, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x22,
	0x5f, 0x0a, 0x18, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x43, 0x0a, 0x09, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x6e, 0x69, 0x77, 0x72, 0x61, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x22, 0x84, 0x07, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x66, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6c, 0x69, 0x66, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x6f,
	0x62, 0x75, 0x73, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a,
	0x72, 0x6f, 0x62, 0x75, 0x73, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x65, 0x6e, 0x65, 0x72,
	0x67, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x72,
	0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4c, 0x6f, 0x73, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x65, 0x61, 0x74, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x67,
	0x61, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x65, 0x61, 0x74, 0x45, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x47, 0x61, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x72, 0x69, 0x6e,
	0x6b, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0f, 0x64, 0x72, 0x69, 0x6e, 0x6b, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x47, 0x61, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x6e, 0x69, 0x76, 0x6f, 0x72,
	0x6f, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x6e, 0x69,
	0x76, 0x6f, 0x72, 0x6f, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x11, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x39, 0x0a, 0x18, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x7a, 0x0a, 0x16, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x41, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x6e, 0x69, 0x77, 0x72, 0x61, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x41, 0x6e,
	0x69, 0x6d, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x15, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x77, 0x0a, 0x15,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6e, 0x61,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x6e, 0x69, 0x77, 0x72, 0x61, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52,
	0x14, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0xbf, 0x01, 0x0a, 0x15, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f,
	0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x4d, 0x6f, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x61,
	0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x65,
	0x61, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x61, 0x62,
	0x6f, 0x6c, 0x69, 0x73, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6d, 0x65, 0x74,
	0x61, 0x62, 0x6f, 0x6c, 0x69, 0x73, 0x6d, 0x1a, 0x16, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42,
	0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xc6, 0x02, 0x0a, 0x10, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61,
	0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x46, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x41, 0x67, 0x65, 0x12, 0x62, 0x0a,
	0x16, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x6e, 0x69, 0x77, 0x72, 0x61, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x15, 0x61, 0x6e, 0x69, 0x6d,
	0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x5a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x41, 0x67, 0x65, 0x12, 0x60,
	0x0a, 0x15, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x6e, 0x69, 0x77, 0x72, 0x61, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x14, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x22, 0xd5, 0x0c, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63,
	0x61, 0x72, 0x6e, 0x69, 0x76, 0x6f, 0x72, 0x6f, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x61, 0x72, 0x6e, 0x69, 0x76, 0x6f,
	0x72, 0x6f, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x61, 0x72, 0x6e, 0x69, 0x76, 0x6f, 0x72,
	0x6f, 0x75, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x12, 0x63, 0x61, 0x72, 0x6e, 0x69, 0x76, 0x6f, 0x72, 0x6f, 0x75, 0x73, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x62, 0x0a, 0x16, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x5f,
	0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x6e,
	0x69, 0x77, 0x72, 0x61, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x15, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x7c, 0x0a, 0x24, 0x61, 0x6e, 0x69,
	0x6d, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x6e, 0x69, 0x77, 0x72, 0x61, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x61, 0x6c,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x21, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x7c, 0x0a, 0x24, 0x61, 0x6e, 0x69, 0x6d, 0x61,
	0x6c, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x6e,
	0x69, 0x77, 0x72, 0x61, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x21, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x6e, 0x0a, 0x13, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x5f,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x6e, 0x69, 0x77, 0x72,
	0x61, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x70, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x12, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x15, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x6e, 0x69,
	0x77, 0x72, 0x61, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x14, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x7a, 0x0a, 0x23, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x6e, 0x69,
	0x77, 0x72, 0x61, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x7a, 0x0a, 0x23, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x6e, 0x69, 0x77, 0x72, 0x61, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x20, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x6c, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6e, 0x61,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x6e, 0x69, 0x77, 0x72, 0x61, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a,
	0x03, 0x6d, 0x61, 0x70, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x61, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x6e, 0x69, 0x77, 0x72, 0x61, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72,
	0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x12, 0x52, 0x0a, 0x07, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6e,
	0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x6e, 0x69, 0x77, 0x72, 0x61, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x1a,
	0x5f, 0x0a, 0x16, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x1a, 0xb1, 0x01, 0x0a, 0x03, 0x4d, 0x61, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x12, 0x32, 0x0a, 0x15,
	0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x73, 0x70, 0x72,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x61, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x77, 0x61, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x64, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x74, 0x79, 0x1a, 0x91, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x61, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x34, 0x5a, 0x23, 0x6e, 0x61, 0x6b, 0x61,
	0x6d, 0x61, 0x2f, 0x6e, 0x69, 0x77, 0x72, 0x61, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65,
	0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x3b, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0xaa,
	0x02, 0x0c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_realtime_proto_rawDescOnce sync.Once
	file_realtime_proto_rawDescData = file_realtime_proto_rawDesc
)

func file_realtime_proto_rawDescGZIP() []byte {
	file_realtime_proto_rawDescOnce.Do(func() {
		file_realtime_proto_rawDescData = protoimpl.X.CompressGZIP(file_realtime_proto_rawDescData)
	})
	return file_realtime_proto_rawDescData
}

var file_realtime_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_realtime_proto_goTypes = []interface{}{
	(*Packet)(nil),                   // 0: nakama.niwrad.api.realtime.Packet
	(*MatchJoin)(nil),                // 1: nakama.niwrad.api.realtime.MatchJoin
	(*UpdateTransform)(nil),          // 2: nakama.niwrad.api.realtime.UpdateTransform
	(*NavMeshUpdate)(nil),            // 3: nakama.niwrad.api.realtime.NavMeshUpdate
	(*Spawn)(nil),                    // 4: nakama.niwrad.api.realtime.Spawn
	(*Destroy)(nil),                  // 5: nakama.niwrad.api.realtime.Destroy
	(*Meme)(nil),                     // 6: nakama.niwrad.api.realtime.Meme
	(*Initialized)(nil),              // 7: nakama.niwrad.api.realtime.Initialized
	(*Transform)(nil),                // 8: nakama.niwrad.api.realtime.Transform
	(*Plant)(nil),                    // 9: nakama.niwrad.api.realtime.Plant
	(*Animal)(nil),                   // 10: nakama.niwrad.api.realtime.Animal
	(*RequestTransferOwnership)(nil), // 11: nakama.niwrad.api.realtime.RequestTransferOwnership
	(*Characteristics)(nil),          // 12: nakama.niwrad.api.realtime.Characteristics
	(*ExperienceSample)(nil),         // 13: nakama.niwrad.api.realtime.ExperienceSample
	(*Experience)(nil),               // 14: nakama.niwrad.api.realtime.Experience
	(*Characteristics_AnimalCharacteristics)(nil), // 15: nakama.niwrad.api.realtime.Characteristics.AnimalCharacteristics
	(*Characteristics_PlantCharacteristics)(nil),  // 16: nakama.niwrad.api.realtime.Characteristics.PlantCharacteristics
	(*Experience_PopulationDistribution)(nil),     // 17: nakama.niwrad.api.realtime.Experience.PopulationDistribution
	(*Experience_Map)(nil),                        // 18: nakama.niwrad.api.realtime.Experience.Map
	(*Experience_GeneralParameters)(nil),          // 19: nakama.niwrad.api.realtime.Experience.GeneralParameters
	(*vector3.Vector3)(nil),                       // 20: protometry.vector3.Vector3
	(*volume.Box)(nil),                            // 21: protometry.volume.Box
	(*quaternion.Quaternion)(nil),                 // 22: protometry.quaternion.Quaternion
}
var file_realtime_proto_depIdxs = []int32{
	20, // 0: nakama.niwrad.api.realtime.Packet.impact:type_name -> protometry.vector3.Vector3
	1,  // 1: nakama.niwrad.api.realtime.Packet.match_join:type_name -> nakama.niwrad.api.realtime.MatchJoin
	2,  // 2: nakama.niwrad.api.realtime.Packet.update_transform:type_name -> nakama.niwrad.api.realtime.UpdateTransform
	3,  // 3: nakama.niwrad.api.realtime.Packet.nav_mesh_update:type_name -> nakama.niwrad.api.realtime.NavMeshUpdate
	4,  // 4: nakama.niwrad.api.realtime.Packet.spawn:type_name -> nakama.niwrad.api.realtime.Spawn
	4,  // 5: nakama.niwrad.api.realtime.Packet.request_spawn:type_name -> nakama.niwrad.api.realtime.Spawn
	5,  // 6: nakama.niwrad.api.realtime.Packet.destroy:type_name -> nakama.niwrad.api.realtime.Destroy
	5,  // 7: nakama.niwrad.api.realtime.Packet.request_destroy:type_name -> nakama.niwrad.api.realtime.Destroy
	6,  // 8: nakama.niwrad.api.realtime.Packet.meme:type_name -> nakama.niwrad.api.realtime.Meme
	7,  // 9: nakama.niwrad.api.realtime.Packet.initialized:type_name -> nakama.niwrad.api.realtime.Initialized
	21, // 10: nakama.niwrad.api.realtime.MatchJoin.region:type_name -> protometry.volume.Box
	8,  // 11: nakama.niwrad.api.realtime.UpdateTransform.transform:type_name -> nakama.niwrad.api.realtime.Transform
	20, // 12: nakama.niwrad.api.realtime.NavMeshUpdate.destination:type_name -> protometry.vector3.Vector3
	8,  // 13: nakama.niwrad.api.realtime.Spawn.any:type_name -> nakama.niwrad.api.realtime.Transform
	9,  // 14: nakama.niwrad.api.realtime.Spawn.plant:type_name -> nakama.niwrad.api.realtime.Plant
	10, // 15: nakama.niwrad.api.realtime.Spawn.animal:type_name -> nakama.niwrad.api.realtime.Animal
	8,  // 16: nakama.niwrad.api.realtime.Destroy.any:type_name -> nakama.niwrad.api.realtime.Transform
	9,  // 17: nakama.niwrad.api.realtime.Destroy.plant:type_name -> nakama.niwrad.api.realtime.Plant
	10, // 18: nakama.niwrad.api.realtime.Destroy.animal:type_name -> nakama.niwrad.api.realtime.Animal
	20, // 19: nakama.niwrad.api.realtime.Transform.position:type_name -> protometry.vector3.Vector3
	22, // 20: nakama.niwrad.api.realtime.Transform.rotation:type_name -> protometry.quaternion.Quaternion
	8,  // 21: nakama.niwrad.api.realtime.Plant.transform:type_name -> nakama.niwrad.api.realtime.Transform
	8,  // 22: nakama.niwrad.api.realtime.Animal.transform:type_name -> nakama.niwrad.api.realtime.Transform
	8,  // 23: nakama.niwrad.api.realtime.RequestTransferOwnership.transform:type_name -> nakama.niwrad.api.realtime.Transform
	15, // 24: nakama.niwrad.api.realtime.Characteristics.animal_characteristics:type_name -> nakama.niwrad.api.realtime.Characteristics.AnimalCharacteristics
	16, // 25: nakama.niwrad.api.realtime.Characteristics.plant_characteristics:type_name -> nakama.niwrad.api.realtime.Characteristics.PlantCharacteristics
	12, // 26: nakama.niwrad.api.realtime.ExperienceSample.animal_characteristics:type_name -> nakama.niwrad.api.realtime.Characteristics
	12, // 27: nakama.niwrad.api.realtime.ExperienceSample.plant_characteristics:type_name -> nakama.niwrad.api.realtime.Characteristics
	12, // 28: nakama.niwrad.api.realtime.Experience.animal_characteristics:type_name -> nakama.niwrad.api.realtime.Characteristics
	12, // 29: nakama.niwrad.api.realtime.Experience.animal_characteristics_minimum_bound:type_name -> nakama.niwrad.api.realtime.Characteristics
	12, // 30: nakama.niwrad.api.realtime.Experience.animal_characteristics_maximum_bound:type_name -> nakama.niwrad.api.realtime.Characteristics
	17, // 31: nakama.niwrad.api.realtime.Experience.animal_distribution:type_name -> nakama.niwrad.api.realtime.Experience.PopulationDistribution
	12, // 32: nakama.niwrad.api.realtime.Experience.plant_characteristics:type_name -> nakama.niwrad.api.realtime.Characteristics
	12, // 33: nakama.niwrad.api.realtime.Experience.plant_characteristics_minimum_bound:type_name -> nakama.niwrad.api.realtime.Characteristics
	12, // 34: nakama.niwrad.api.realtime.Experience.plant_characteristics_maximum_bound:type_name -> nakama.niwrad.api.realtime.Characteristics
	17, // 35: nakama.niwrad.api.realtime.Experience.plant_distribution:type_name -> nakama.niwrad.api.realtime.Experience.PopulationDistribution
	18, // 36: nakama.niwrad.api.realtime.Experience.map:type_name -> nakama.niwrad.api.realtime.Experience.Map
	19, // 37: nakama.niwrad.api.realtime.Experience.general:type_name -> nakama.niwrad.api.realtime.Experience.GeneralParameters
	38, // [38:38] is the sub-list for method output_type
	38, // [38:38] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_realtime_proto_init() }
func file_realtime_proto_init() {
	if File_realtime_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_realtime_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Packet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_realtime_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchJoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_realtime_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTransform); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_realtime_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavMeshUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_realtime_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Spawn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_realtime_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Destroy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_realtime_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meme); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_realtime_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Initialized); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_realtime_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transform); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_realtime_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Plant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_realtime_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Animal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_realtime_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestTransferOwnership); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_realtime_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Characteristics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_realtime_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExperienceSample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_realtime_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Experience); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_realtime_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Characteristics_AnimalCharacteristics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_realtime_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Characteristics_PlantCharacteristics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_realtime_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Experience_PopulationDistribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_realtime_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Experience_Map); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_realtime_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Experience_GeneralParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_realtime_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Packet_MatchJoin)(nil),
		(*Packet_UpdateTransform)(nil),
		(*Packet_NavMeshUpdate)(nil),
		(*Packet_Spawn)(nil),
		(*Packet_RequestSpawn)(nil),
		(*Packet_Destroy)(nil),
		(*Packet_RequestDestroy)(nil),
		(*Packet_Meme)(nil),
		(*Packet_Initialized)(nil),
	}
	file_realtime_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Spawn_Any)(nil),
		(*Spawn_Plant)(nil),
		(*Spawn_Animal)(nil),
	}
	file_realtime_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Destroy_Any)(nil),
		(*Destroy_Plant)(nil),
		(*Destroy_Animal)(nil),
	}
	file_realtime_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*Characteristics_AnimalCharacteristics_)(nil),
		(*Characteristics_PlantCharacteristics_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_realtime_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_realtime_proto_goTypes,
		DependencyIndexes: file_realtime_proto_depIdxs,
		MessageInfos:      file_realtime_proto_msgTypes,
	}.Build()
	File_realtime_proto = out.File
	file_realtime_proto_rawDesc = nil
	file_realtime_proto_goTypes = nil
	file_realtime_proto_depIdxs = nil
}

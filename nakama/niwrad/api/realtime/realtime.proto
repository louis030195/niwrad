syntax = "proto3";

package nakama.niwrad.api.realtime;

option csharp_namespace = "Api.Realtime";
option go_package = "nakama/niwrad/api/realtime;realtime";
import "github.com/louis030195/protometry/api/vector3/vector3.proto";
import "github.com/louis030195/protometry/api/quaternion/quaternion.proto";
import "github.com/louis030195/protometry/api/volume/volume.proto";

// TODO: kind of ugly to use same struct for client -> server and server -> client ?
message Packet {
    // TODO: prob will have to switch to a box instead of vector3 later (want to notify before arrival ...)
    protometry.vector3.Vector3 impact = 4; // Whom for ? Does xXxD4rkK1ll3rxXx care about the message 1 km away ?
    oneof type {
        // Events
        MatchJoin match_join = 7; 
        Map map = 8;

        // General physical objects
        UpdateTransform update_transform = 10;
        NavMeshUpdate nav_mesh_update = 11;

        // Evolution
        Spawn spawn = 15;
        Spawn request_spawn = 16;
        Destroy destroy = 17;
        Destroy request_destroy = 18;
        Meme meme = 19;
        
        // Player
        Initialized initialized = 25;
    }
}

message MatchJoin{
    protometry.volume.Box region = 1;
    int64 seed = 2;
}

message Map {
    // Offsets of the chunk of map data
    int64 x_base = 1;
    int64 y_base = 2;
    Matrix map = 3;
}
message Matrix {
    repeated Array rows = 1;
}
message Array {
    repeated double cols = 1 [packed=true];
}

// General purpose transform update typically shared by several different types of objects
message UpdateTransform {
    Transform transform = 1;
}

message NavMeshUpdate {
    uint64 id = 1;
    protometry.vector3.Vector3 destination = 2;
}


message Spawn {
    oneof type {
        Transform any = 1; // Any object, no special behaviour
        Tree tree = 2;
        Animal animal = 3;
        // TODO: other ?
    }
}

message Destroy {
    oneof type {
        Transform any = 1; // Any object, no special behaviour
        Tree tree = 2;
        Animal animal = 3;
        // TODO: other ?
    }
}

message Meme {
    uint64 id = 1;
    string meme_name = 2; // Not really efficient but ok
}

// Client notifying being ready to handle gameplay
message Initialized {
}

message Transform { // TODO: is it worthwhile to add like "owner_id" ... ?
    uint64 id = 1;
    protometry.vector3.Vector3 position = 2;
    protometry.quaternion.Quaternion rotation = 3;
}

message Tree {
    Transform transform = 1;
    // TODO: other stats
}
message Animal {
    Transform transform = 1;
    // TODO: other stats
}

// Ask a logic server to transfer ownership of an object
message RequestTransferOwnership {
    Transform transform = 1;
}
